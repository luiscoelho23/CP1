
CP1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005640  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c8  08005840  08005840  00015840  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d08  08005d08  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005d08  08005d08  00015d08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005d10  08005d10  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d10  08005d10  00015d10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005d14  08005d14  00015d14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005d18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000101d0  20000070  08005d88  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20010240  08005d88  00020240  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e0ee  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f05  00000000  00000000  0002e18c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000880  00000000  00000000  00030098  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007b8  00000000  00000000  00030918  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002748b  00000000  00000000  000310d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c121  00000000  00000000  0005855b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f1a85  00000000  00000000  0006467c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00156101  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000296c  00000000  00000000  00156154  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000070 	.word	0x20000070
 800021c:	00000000 	.word	0x00000000
 8000220:	08005828 	.word	0x08005828

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000074 	.word	0x20000074
 800023c:	08005828 	.word	0x08005828

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96e 	b.w	80005e4 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468c      	mov	ip, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	f040 8083 	bne.w	8000436 <__udivmoddi4+0x116>
 8000330:	428a      	cmp	r2, r1
 8000332:	4617      	mov	r7, r2
 8000334:	d947      	bls.n	80003c6 <__udivmoddi4+0xa6>
 8000336:	fab2 f282 	clz	r2, r2
 800033a:	b142      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033c:	f1c2 0020 	rsb	r0, r2, #32
 8000340:	fa24 f000 	lsr.w	r0, r4, r0
 8000344:	4091      	lsls	r1, r2
 8000346:	4097      	lsls	r7, r2
 8000348:	ea40 0c01 	orr.w	ip, r0, r1
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbbc f6f8 	udiv	r6, ip, r8
 8000358:	fa1f fe87 	uxth.w	lr, r7
 800035c:	fb08 c116 	mls	r1, r8, r6, ip
 8000360:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000364:	fb06 f10e 	mul.w	r1, r6, lr
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18fb      	adds	r3, r7, r3
 800036e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000372:	f080 8119 	bcs.w	80005a8 <__udivmoddi4+0x288>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8116 	bls.w	80005a8 <__udivmoddi4+0x288>
 800037c:	3e02      	subs	r6, #2
 800037e:	443b      	add	r3, r7
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0f8 	udiv	r0, r3, r8
 8000388:	fb08 3310 	mls	r3, r8, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fe0e 	mul.w	lr, r0, lr
 8000394:	45a6      	cmp	lr, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8105 	bcs.w	80005ac <__udivmoddi4+0x28c>
 80003a2:	45a6      	cmp	lr, r4
 80003a4:	f240 8102 	bls.w	80005ac <__udivmoddi4+0x28c>
 80003a8:	3802      	subs	r0, #2
 80003aa:	443c      	add	r4, r7
 80003ac:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b0:	eba4 040e 	sub.w	r4, r4, lr
 80003b4:	2600      	movs	r6, #0
 80003b6:	b11d      	cbz	r5, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c5 4300 	strd	r4, r3, [r5]
 80003c0:	4631      	mov	r1, r6
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	b902      	cbnz	r2, 80003ca <__udivmoddi4+0xaa>
 80003c8:	deff      	udf	#255	; 0xff
 80003ca:	fab2 f282 	clz	r2, r2
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	d150      	bne.n	8000474 <__udivmoddi4+0x154>
 80003d2:	1bcb      	subs	r3, r1, r7
 80003d4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d8:	fa1f f887 	uxth.w	r8, r7
 80003dc:	2601      	movs	r6, #1
 80003de:	fbb3 fcfe 	udiv	ip, r3, lr
 80003e2:	0c21      	lsrs	r1, r4, #16
 80003e4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ec:	fb08 f30c 	mul.w	r3, r8, ip
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0xe4>
 80003f4:	1879      	adds	r1, r7, r1
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0xe2>
 80003fc:	428b      	cmp	r3, r1
 80003fe:	f200 80e9 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 8000402:	4684      	mov	ip, r0
 8000404:	1ac9      	subs	r1, r1, r3
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000410:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x10c>
 800041c:	193c      	adds	r4, r7, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x10a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80d9 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e7bf      	b.n	80003b6 <__udivmoddi4+0x96>
 8000436:	428b      	cmp	r3, r1
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x12e>
 800043a:	2d00      	cmp	r5, #0
 800043c:	f000 80b1 	beq.w	80005a2 <__udivmoddi4+0x282>
 8000440:	2600      	movs	r6, #0
 8000442:	e9c5 0100 	strd	r0, r1, [r5]
 8000446:	4630      	mov	r0, r6
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	fab3 f683 	clz	r6, r3
 8000452:	2e00      	cmp	r6, #0
 8000454:	d14a      	bne.n	80004ec <__udivmoddi4+0x1cc>
 8000456:	428b      	cmp	r3, r1
 8000458:	d302      	bcc.n	8000460 <__udivmoddi4+0x140>
 800045a:	4282      	cmp	r2, r0
 800045c:	f200 80b8 	bhi.w	80005d0 <__udivmoddi4+0x2b0>
 8000460:	1a84      	subs	r4, r0, r2
 8000462:	eb61 0103 	sbc.w	r1, r1, r3
 8000466:	2001      	movs	r0, #1
 8000468:	468c      	mov	ip, r1
 800046a:	2d00      	cmp	r5, #0
 800046c:	d0a8      	beq.n	80003c0 <__udivmoddi4+0xa0>
 800046e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000472:	e7a5      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000474:	f1c2 0320 	rsb	r3, r2, #32
 8000478:	fa20 f603 	lsr.w	r6, r0, r3
 800047c:	4097      	lsls	r7, r2
 800047e:	fa01 f002 	lsl.w	r0, r1, r2
 8000482:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000486:	40d9      	lsrs	r1, r3
 8000488:	4330      	orrs	r0, r6
 800048a:	0c03      	lsrs	r3, r0, #16
 800048c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000490:	fa1f f887 	uxth.w	r8, r7
 8000494:	fb0e 1116 	mls	r1, lr, r6, r1
 8000498:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800049c:	fb06 f108 	mul.w	r1, r6, r8
 80004a0:	4299      	cmp	r1, r3
 80004a2:	fa04 f402 	lsl.w	r4, r4, r2
 80004a6:	d909      	bls.n	80004bc <__udivmoddi4+0x19c>
 80004a8:	18fb      	adds	r3, r7, r3
 80004aa:	f106 3cff 	add.w	ip, r6, #4294967295
 80004ae:	f080 808d 	bcs.w	80005cc <__udivmoddi4+0x2ac>
 80004b2:	4299      	cmp	r1, r3
 80004b4:	f240 808a 	bls.w	80005cc <__udivmoddi4+0x2ac>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	443b      	add	r3, r7
 80004bc:	1a5b      	subs	r3, r3, r1
 80004be:	b281      	uxth	r1, r0
 80004c0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004cc:	fb00 f308 	mul.w	r3, r0, r8
 80004d0:	428b      	cmp	r3, r1
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x1c4>
 80004d4:	1879      	adds	r1, r7, r1
 80004d6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004da:	d273      	bcs.n	80005c4 <__udivmoddi4+0x2a4>
 80004dc:	428b      	cmp	r3, r1
 80004de:	d971      	bls.n	80005c4 <__udivmoddi4+0x2a4>
 80004e0:	3802      	subs	r0, #2
 80004e2:	4439      	add	r1, r7
 80004e4:	1acb      	subs	r3, r1, r3
 80004e6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ea:	e778      	b.n	80003de <__udivmoddi4+0xbe>
 80004ec:	f1c6 0c20 	rsb	ip, r6, #32
 80004f0:	fa03 f406 	lsl.w	r4, r3, r6
 80004f4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004f8:	431c      	orrs	r4, r3
 80004fa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004fe:	fa01 f306 	lsl.w	r3, r1, r6
 8000502:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000506:	fa21 f10c 	lsr.w	r1, r1, ip
 800050a:	431f      	orrs	r7, r3
 800050c:	0c3b      	lsrs	r3, r7, #16
 800050e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000512:	fa1f f884 	uxth.w	r8, r4
 8000516:	fb0e 1119 	mls	r1, lr, r9, r1
 800051a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800051e:	fb09 fa08 	mul.w	sl, r9, r8
 8000522:	458a      	cmp	sl, r1
 8000524:	fa02 f206 	lsl.w	r2, r2, r6
 8000528:	fa00 f306 	lsl.w	r3, r0, r6
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x220>
 800052e:	1861      	adds	r1, r4, r1
 8000530:	f109 30ff 	add.w	r0, r9, #4294967295
 8000534:	d248      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 8000536:	458a      	cmp	sl, r1
 8000538:	d946      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800053a:	f1a9 0902 	sub.w	r9, r9, #2
 800053e:	4421      	add	r1, r4
 8000540:	eba1 010a 	sub.w	r1, r1, sl
 8000544:	b2bf      	uxth	r7, r7
 8000546:	fbb1 f0fe 	udiv	r0, r1, lr
 800054a:	fb0e 1110 	mls	r1, lr, r0, r1
 800054e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000552:	fb00 f808 	mul.w	r8, r0, r8
 8000556:	45b8      	cmp	r8, r7
 8000558:	d907      	bls.n	800056a <__udivmoddi4+0x24a>
 800055a:	19e7      	adds	r7, r4, r7
 800055c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000560:	d22e      	bcs.n	80005c0 <__udivmoddi4+0x2a0>
 8000562:	45b8      	cmp	r8, r7
 8000564:	d92c      	bls.n	80005c0 <__udivmoddi4+0x2a0>
 8000566:	3802      	subs	r0, #2
 8000568:	4427      	add	r7, r4
 800056a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800056e:	eba7 0708 	sub.w	r7, r7, r8
 8000572:	fba0 8902 	umull	r8, r9, r0, r2
 8000576:	454f      	cmp	r7, r9
 8000578:	46c6      	mov	lr, r8
 800057a:	4649      	mov	r1, r9
 800057c:	d31a      	bcc.n	80005b4 <__udivmoddi4+0x294>
 800057e:	d017      	beq.n	80005b0 <__udivmoddi4+0x290>
 8000580:	b15d      	cbz	r5, 800059a <__udivmoddi4+0x27a>
 8000582:	ebb3 020e 	subs.w	r2, r3, lr
 8000586:	eb67 0701 	sbc.w	r7, r7, r1
 800058a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800058e:	40f2      	lsrs	r2, r6
 8000590:	ea4c 0202 	orr.w	r2, ip, r2
 8000594:	40f7      	lsrs	r7, r6
 8000596:	e9c5 2700 	strd	r2, r7, [r5]
 800059a:	2600      	movs	r6, #0
 800059c:	4631      	mov	r1, r6
 800059e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e70b      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0x60>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6fd      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b0:	4543      	cmp	r3, r8
 80005b2:	d2e5      	bcs.n	8000580 <__udivmoddi4+0x260>
 80005b4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005b8:	eb69 0104 	sbc.w	r1, r9, r4
 80005bc:	3801      	subs	r0, #1
 80005be:	e7df      	b.n	8000580 <__udivmoddi4+0x260>
 80005c0:	4608      	mov	r0, r1
 80005c2:	e7d2      	b.n	800056a <__udivmoddi4+0x24a>
 80005c4:	4660      	mov	r0, ip
 80005c6:	e78d      	b.n	80004e4 <__udivmoddi4+0x1c4>
 80005c8:	4681      	mov	r9, r0
 80005ca:	e7b9      	b.n	8000540 <__udivmoddi4+0x220>
 80005cc:	4666      	mov	r6, ip
 80005ce:	e775      	b.n	80004bc <__udivmoddi4+0x19c>
 80005d0:	4630      	mov	r0, r6
 80005d2:	e74a      	b.n	800046a <__udivmoddi4+0x14a>
 80005d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d8:	4439      	add	r1, r7
 80005da:	e713      	b.n	8000404 <__udivmoddi4+0xe4>
 80005dc:	3802      	subs	r0, #2
 80005de:	443c      	add	r4, r7
 80005e0:	e724      	b.n	800042c <__udivmoddi4+0x10c>
 80005e2:	bf00      	nop

080005e4 <__aeabi_idiv0>:
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop

080005e8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b088      	sub	sp, #32
 80005ec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ee:	f107 030c 	add.w	r3, r7, #12
 80005f2:	2200      	movs	r2, #0
 80005f4:	601a      	str	r2, [r3, #0]
 80005f6:	605a      	str	r2, [r3, #4]
 80005f8:	609a      	str	r2, [r3, #8]
 80005fa:	60da      	str	r2, [r3, #12]
 80005fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005fe:	4b1d      	ldr	r3, [pc, #116]	; (8000674 <MX_GPIO_Init+0x8c>)
 8000600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000602:	4a1c      	ldr	r2, [pc, #112]	; (8000674 <MX_GPIO_Init+0x8c>)
 8000604:	f043 0302 	orr.w	r3, r3, #2
 8000608:	6313      	str	r3, [r2, #48]	; 0x30
 800060a:	4b1a      	ldr	r3, [pc, #104]	; (8000674 <MX_GPIO_Init+0x8c>)
 800060c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060e:	f003 0302 	and.w	r3, r3, #2
 8000612:	60bb      	str	r3, [r7, #8]
 8000614:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000616:	4b17      	ldr	r3, [pc, #92]	; (8000674 <MX_GPIO_Init+0x8c>)
 8000618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061a:	4a16      	ldr	r2, [pc, #88]	; (8000674 <MX_GPIO_Init+0x8c>)
 800061c:	f043 0308 	orr.w	r3, r3, #8
 8000620:	6313      	str	r3, [r2, #48]	; 0x30
 8000622:	4b14      	ldr	r3, [pc, #80]	; (8000674 <MX_GPIO_Init+0x8c>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000626:	f003 0308 	and.w	r3, r3, #8
 800062a:	607b      	str	r3, [r7, #4]
 800062c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800062e:	4b11      	ldr	r3, [pc, #68]	; (8000674 <MX_GPIO_Init+0x8c>)
 8000630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000632:	4a10      	ldr	r2, [pc, #64]	; (8000674 <MX_GPIO_Init+0x8c>)
 8000634:	f043 0301 	orr.w	r3, r3, #1
 8000638:	6313      	str	r3, [r2, #48]	; 0x30
 800063a:	4b0e      	ldr	r3, [pc, #56]	; (8000674 <MX_GPIO_Init+0x8c>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063e:	f003 0301 	and.w	r3, r3, #1
 8000642:	603b      	str	r3, [r7, #0]
 8000644:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000646:	2200      	movs	r2, #0
 8000648:	2101      	movs	r1, #1
 800064a:	480b      	ldr	r0, [pc, #44]	; (8000678 <MX_GPIO_Init+0x90>)
 800064c:	f001 fac2 	bl	8001bd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000650:	2301      	movs	r3, #1
 8000652:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000654:	2301      	movs	r3, #1
 8000656:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000658:	2300      	movs	r3, #0
 800065a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800065c:	2300      	movs	r3, #0
 800065e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000660:	f107 030c 	add.w	r3, r7, #12
 8000664:	4619      	mov	r1, r3
 8000666:	4804      	ldr	r0, [pc, #16]	; (8000678 <MX_GPIO_Init+0x90>)
 8000668:	f001 f908 	bl	800187c <HAL_GPIO_Init>

}
 800066c:	bf00      	nop
 800066e:	3720      	adds	r7, #32
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	40023800 	.word	0x40023800
 8000678:	40020400 	.word	0x40020400

0800067c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b0a2      	sub	sp, #136	; 0x88
 8000680:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000682:	f000 fefa 	bl	800147a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000686:	f000 f82d 	bl	80006e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800068a:	f7ff ffad 	bl	80005e8 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800068e:	f000 fd41 	bl	8001114 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  //send_UART("");
  HAL_UART_Receive_IT(&huart3, UART_RX_buffer, 1);
 8000692:	2201      	movs	r2, #1
 8000694:	4911      	ldr	r1, [pc, #68]	; (80006dc <main+0x60>)
 8000696:	4812      	ldr	r0, [pc, #72]	; (80006e0 <main+0x64>)
 8000698:	f002 fc9a 	bl	8002fd0 <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(has_message_from_UART())
 800069c:	f000 fdea 	bl	8001274 <has_message_from_UART>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d0fa      	beq.n	800069c <main+0x20>
	  {
		  uint8_t message[BUFFER_SIZE];

		  read_UART((char*) message);
 80006a6:	1d3b      	adds	r3, r7, #4
 80006a8:	4618      	mov	r0, r3
 80006aa:	f000 fe49 	bl	8001340 <read_UART>

		  unsigned char cmd = check_command((char*) message);
 80006ae:	1d3b      	adds	r3, r7, #4
 80006b0:	4618      	mov	r0, r3
 80006b2:	f000 f887 	bl	80007c4 <check_command>
 80006b6:	4603      	mov	r3, r0
 80006b8:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
		  exec_command(cmd, (char*) message);
 80006bc:	1d3a      	adds	r2, r7, #4
 80006be:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80006c2:	4611      	mov	r1, r2
 80006c4:	4618      	mov	r0, r3
 80006c6:	f000 f8db 	bl	8000880 <exec_command>

		  while(is_transmitting_to_UART());
 80006ca:	bf00      	nop
 80006cc:	f000 fdde 	bl	800128c <is_transmitting_to_UART>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d1fa      	bne.n	80006cc <main+0x50>

		  reset_UART();
 80006d6:	f000 fde5 	bl	80012a4 <reset_UART>
	  if(has_message_from_UART())
 80006da:	e7df      	b.n	800069c <main+0x20>
 80006dc:	20000098 	.word	0x20000098
 80006e0:	200101a8 	.word	0x200101a8

080006e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b094      	sub	sp, #80	; 0x50
 80006e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ea:	f107 031c 	add.w	r3, r7, #28
 80006ee:	2234      	movs	r2, #52	; 0x34
 80006f0:	2100      	movs	r1, #0
 80006f2:	4618      	mov	r0, r3
 80006f4:	f003 ff7a 	bl	80045ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006f8:	f107 0308 	add.w	r3, r7, #8
 80006fc:	2200      	movs	r2, #0
 80006fe:	601a      	str	r2, [r3, #0]
 8000700:	605a      	str	r2, [r3, #4]
 8000702:	609a      	str	r2, [r3, #8]
 8000704:	60da      	str	r2, [r3, #12]
 8000706:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000708:	4b2c      	ldr	r3, [pc, #176]	; (80007bc <SystemClock_Config+0xd8>)
 800070a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800070c:	4a2b      	ldr	r2, [pc, #172]	; (80007bc <SystemClock_Config+0xd8>)
 800070e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000712:	6413      	str	r3, [r2, #64]	; 0x40
 8000714:	4b29      	ldr	r3, [pc, #164]	; (80007bc <SystemClock_Config+0xd8>)
 8000716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000718:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800071c:	607b      	str	r3, [r7, #4]
 800071e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000720:	4b27      	ldr	r3, [pc, #156]	; (80007c0 <SystemClock_Config+0xdc>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000728:	4a25      	ldr	r2, [pc, #148]	; (80007c0 <SystemClock_Config+0xdc>)
 800072a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800072e:	6013      	str	r3, [r2, #0]
 8000730:	4b23      	ldr	r3, [pc, #140]	; (80007c0 <SystemClock_Config+0xdc>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000738:	603b      	str	r3, [r7, #0]
 800073a:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800073c:	2302      	movs	r3, #2
 800073e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000740:	2301      	movs	r3, #1
 8000742:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000744:	2310      	movs	r3, #16
 8000746:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000748:	2302      	movs	r3, #2
 800074a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800074c:	2300      	movs	r3, #0
 800074e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000750:	2308      	movs	r3, #8
 8000752:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000754:	2360      	movs	r3, #96	; 0x60
 8000756:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000758:	2302      	movs	r3, #2
 800075a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800075c:	2304      	movs	r3, #4
 800075e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000760:	2302      	movs	r3, #2
 8000762:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000764:	f107 031c 	add.w	r3, r7, #28
 8000768:	4618      	mov	r0, r3
 800076a:	f001 fa9d 	bl	8001ca8 <HAL_RCC_OscConfig>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000774:	f000 fc28 	bl	8000fc8 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000778:	f001 fa46 	bl	8001c08 <HAL_PWREx_EnableOverDrive>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000782:	f000 fc21 	bl	8000fc8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000786:	230f      	movs	r3, #15
 8000788:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800078a:	2302      	movs	r3, #2
 800078c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800078e:	2300      	movs	r3, #0
 8000790:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000792:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000796:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000798:	2300      	movs	r3, #0
 800079a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800079c:	f107 0308 	add.w	r3, r7, #8
 80007a0:	2103      	movs	r1, #3
 80007a2:	4618      	mov	r0, r3
 80007a4:	f001 fd2e 	bl	8002204 <HAL_RCC_ClockConfig>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <SystemClock_Config+0xce>
  {
    Error_Handler();
 80007ae:	f000 fc0b 	bl	8000fc8 <Error_Handler>
  }
}
 80007b2:	bf00      	nop
 80007b4:	3750      	adds	r7, #80	; 0x50
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	40023800 	.word	0x40023800
 80007c0:	40007000 	.word	0x40007000

080007c4 <check_command>:

/* USER CODE BEGIN 4 */

unsigned char check_command(char* message)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
	if(!strncmp((char*) message, "MR ", 3))
 80007cc:	2203      	movs	r2, #3
 80007ce:	4925      	ldr	r1, [pc, #148]	; (8000864 <check_command+0xa0>)
 80007d0:	6878      	ldr	r0, [r7, #4]
 80007d2:	f003 ff61 	bl	8004698 <strncmp>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d101      	bne.n	80007e0 <check_command+0x1c>
		return MR;
 80007dc:	2301      	movs	r3, #1
 80007de:	e03c      	b.n	800085a <check_command+0x96>

	else if(!strncmp((char*) message, "MW ", 3))
 80007e0:	2203      	movs	r2, #3
 80007e2:	4921      	ldr	r1, [pc, #132]	; (8000868 <check_command+0xa4>)
 80007e4:	6878      	ldr	r0, [r7, #4]
 80007e6:	f003 ff57 	bl	8004698 <strncmp>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d101      	bne.n	80007f4 <check_command+0x30>
		return MW;
 80007f0:	2302      	movs	r3, #2
 80007f2:	e032      	b.n	800085a <check_command+0x96>

	else if(!strncmp((char*) message, "MI ", 3))
 80007f4:	2203      	movs	r2, #3
 80007f6:	491d      	ldr	r1, [pc, #116]	; (800086c <check_command+0xa8>)
 80007f8:	6878      	ldr	r0, [r7, #4]
 80007fa:	f003 ff4d 	bl	8004698 <strncmp>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d101      	bne.n	8000808 <check_command+0x44>
		return MI;
 8000804:	2303      	movs	r3, #3
 8000806:	e028      	b.n	800085a <check_command+0x96>

	else if(!strncmp((char*) message, "MO ", 3))
 8000808:	2203      	movs	r2, #3
 800080a:	4919      	ldr	r1, [pc, #100]	; (8000870 <check_command+0xac>)
 800080c:	6878      	ldr	r0, [r7, #4]
 800080e:	f003 ff43 	bl	8004698 <strncmp>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d101      	bne.n	800081c <check_command+0x58>
		return MO;
 8000818:	2304      	movs	r3, #4
 800081a:	e01e      	b.n	800085a <check_command+0x96>

	else if(!strncmp((char*) message, "RD ", 3))
 800081c:	2203      	movs	r2, #3
 800081e:	4915      	ldr	r1, [pc, #84]	; (8000874 <check_command+0xb0>)
 8000820:	6878      	ldr	r0, [r7, #4]
 8000822:	f003 ff39 	bl	8004698 <strncmp>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d101      	bne.n	8000830 <check_command+0x6c>
		return RD;
 800082c:	2305      	movs	r3, #5
 800082e:	e014      	b.n	800085a <check_command+0x96>

	else if(!strncmp((char*) message, "WD ", 3))
 8000830:	2203      	movs	r2, #3
 8000832:	4911      	ldr	r1, [pc, #68]	; (8000878 <check_command+0xb4>)
 8000834:	6878      	ldr	r0, [r7, #4]
 8000836:	f003 ff2f 	bl	8004698 <strncmp>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d101      	bne.n	8000844 <check_command+0x80>
		return WD;
 8000840:	2306      	movs	r3, #6
 8000842:	e00a      	b.n	800085a <check_command+0x96>

	else if(!strncmp((char*) message, "RA ", 3))
 8000844:	2203      	movs	r2, #3
 8000846:	490d      	ldr	r1, [pc, #52]	; (800087c <check_command+0xb8>)
 8000848:	6878      	ldr	r0, [r7, #4]
 800084a:	f003 ff25 	bl	8004698 <strncmp>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d101      	bne.n	8000858 <check_command+0x94>
		return RA;
 8000854:	2307      	movs	r3, #7
 8000856:	e000      	b.n	800085a <check_command+0x96>

	else return INV;
 8000858:	2300      	movs	r3, #0
}
 800085a:	4618      	mov	r0, r3
 800085c:	3708      	adds	r7, #8
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	08005840 	.word	0x08005840
 8000868:	08005844 	.word	0x08005844
 800086c:	08005848 	.word	0x08005848
 8000870:	0800584c 	.word	0x0800584c
 8000874:	08005850 	.word	0x08005850
 8000878:	08005854 	.word	0x08005854
 800087c:	08005858 	.word	0x08005858

08000880 <exec_command>:

void exec_command(unsigned char command, char* message)
{
 8000880:	b5b0      	push	{r4, r5, r7, lr}
 8000882:	b08e      	sub	sp, #56	; 0x38
 8000884:	af02      	add	r7, sp, #8
 8000886:	4603      	mov	r3, r0
 8000888:	6039      	str	r1, [r7, #0]
 800088a:	71fb      	strb	r3, [r7, #7]
	unsigned int addr, length, data, port_addr, pin_setting, pin_values;

	switch(command)
 800088c:	79fb      	ldrb	r3, [r7, #7]
 800088e:	2b07      	cmp	r3, #7
 8000890:	f200 8101 	bhi.w	8000a96 <exec_command+0x216>
 8000894:	a201      	add	r2, pc, #4	; (adr r2, 800089c <exec_command+0x1c>)
 8000896:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800089a:	bf00      	nop
 800089c:	080008bd 	.word	0x080008bd
 80008a0:	080008c5 	.word	0x080008c5
 80008a4:	08000987 	.word	0x08000987
 80008a8:	080009cf 	.word	0x080009cf
 80008ac:	08000a0f 	.word	0x08000a0f
 80008b0:	08000a97 	.word	0x08000a97
 80008b4:	08000a4f 	.word	0x08000a4f
 80008b8:	08000a97 	.word	0x08000a97
	{
		case INV:

			send_UART("Invalid instruction.");
 80008bc:	4878      	ldr	r0, [pc, #480]	; (8000aa0 <exec_command+0x220>)
 80008be:	f000 fd09 	bl	80012d4 <send_UART>
			break;
 80008c2:	e0e9      	b.n	8000a98 <exec_command+0x218>

		case MR:

			if(sscanf((char*) message, "%*s %x %x", &addr, &length) == 2)
 80008c4:	f107 031c 	add.w	r3, r7, #28
 80008c8:	f107 0220 	add.w	r2, r7, #32
 80008cc:	4975      	ldr	r1, [pc, #468]	; (8000aa4 <exec_command+0x224>)
 80008ce:	6838      	ldr	r0, [r7, #0]
 80008d0:	f003 feb4 	bl	800463c <siscanf>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b02      	cmp	r3, #2
 80008d8:	d151      	bne.n	800097e <exec_command+0xfe>
			{
 80008da:	466b      	mov	r3, sp
 80008dc:	461d      	mov	r5, r3
				char data[length];
 80008de:	69fc      	ldr	r4, [r7, #28]
 80008e0:	4623      	mov	r3, r4
 80008e2:	3b01      	subs	r3, #1
 80008e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80008e6:	4620      	mov	r0, r4
 80008e8:	f04f 0100 	mov.w	r1, #0
 80008ec:	f04f 0200 	mov.w	r2, #0
 80008f0:	f04f 0300 	mov.w	r3, #0
 80008f4:	00cb      	lsls	r3, r1, #3
 80008f6:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80008fa:	00c2      	lsls	r2, r0, #3
 80008fc:	4620      	mov	r0, r4
 80008fe:	f04f 0100 	mov.w	r1, #0
 8000902:	f04f 0200 	mov.w	r2, #0
 8000906:	f04f 0300 	mov.w	r3, #0
 800090a:	00cb      	lsls	r3, r1, #3
 800090c:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000910:	00c2      	lsls	r2, r0, #3
 8000912:	1de3      	adds	r3, r4, #7
 8000914:	08db      	lsrs	r3, r3, #3
 8000916:	00db      	lsls	r3, r3, #3
 8000918:	ebad 0d03 	sub.w	sp, sp, r3
 800091c:	ab02      	add	r3, sp, #8
 800091e:	3300      	adds	r3, #0
 8000920:	627b      	str	r3, [r7, #36]	; 0x24

				if(memory_read(addr, length, data))
 8000922:	6a3b      	ldr	r3, [r7, #32]
 8000924:	69f9      	ldr	r1, [r7, #28]
 8000926:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000928:	4618      	mov	r0, r3
 800092a:	f000 f8df 	bl	8000aec <memory_read>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d01f      	beq.n	8000974 <exec_command+0xf4>
				{
					sprintf((char*) message, "Memory read: ");
 8000934:	495c      	ldr	r1, [pc, #368]	; (8000aa8 <exec_command+0x228>)
 8000936:	6838      	ldr	r0, [r7, #0]
 8000938:	f003 fe60 	bl	80045fc <siprintf>

					for(int i = 0; i < length; i++)
 800093c:	2300      	movs	r3, #0
 800093e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000940:	e010      	b.n	8000964 <exec_command+0xe4>
					{
						sprintf((char*) message + strlen((char*) message), "%02X ", data[i]);
 8000942:	6838      	ldr	r0, [r7, #0]
 8000944:	f7ff fc7c 	bl	8000240 <strlen>
 8000948:	4602      	mov	r2, r0
 800094a:	683b      	ldr	r3, [r7, #0]
 800094c:	1898      	adds	r0, r3, r2
 800094e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000952:	4413      	add	r3, r2
 8000954:	781b      	ldrb	r3, [r3, #0]
 8000956:	461a      	mov	r2, r3
 8000958:	4954      	ldr	r1, [pc, #336]	; (8000aac <exec_command+0x22c>)
 800095a:	f003 fe4f 	bl	80045fc <siprintf>
					for(int i = 0; i < length; i++)
 800095e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000960:	3301      	adds	r3, #1
 8000962:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000964:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000966:	69fb      	ldr	r3, [r7, #28]
 8000968:	429a      	cmp	r2, r3
 800096a:	d3ea      	bcc.n	8000942 <exec_command+0xc2>
					}

					send_UART((char*) message);
 800096c:	6838      	ldr	r0, [r7, #0]
 800096e:	f000 fcb1 	bl	80012d4 <send_UART>
 8000972:	e002      	b.n	800097a <exec_command+0xfa>
				}
				else
					send_UART("Invalid Memory Read instruction argument values.\r");
 8000974:	484e      	ldr	r0, [pc, #312]	; (8000ab0 <exec_command+0x230>)
 8000976:	f000 fcad 	bl	80012d4 <send_UART>
 800097a:	46ad      	mov	sp, r5
			}
			else
				send_UART("Invalid Memory Read instruction syntax.");

			break;
 800097c:	e08c      	b.n	8000a98 <exec_command+0x218>
				send_UART("Invalid Memory Read instruction syntax.");
 800097e:	484d      	ldr	r0, [pc, #308]	; (8000ab4 <exec_command+0x234>)
 8000980:	f000 fca8 	bl	80012d4 <send_UART>
			break;
 8000984:	e088      	b.n	8000a98 <exec_command+0x218>

		case MW:

			if(sscanf((char*) message, "%*s %x %x %x", &addr, &length, &data) == 3)
 8000986:	f107 011c 	add.w	r1, r7, #28
 800098a:	f107 0220 	add.w	r2, r7, #32
 800098e:	f107 0318 	add.w	r3, r7, #24
 8000992:	9300      	str	r3, [sp, #0]
 8000994:	460b      	mov	r3, r1
 8000996:	4948      	ldr	r1, [pc, #288]	; (8000ab8 <exec_command+0x238>)
 8000998:	6838      	ldr	r0, [r7, #0]
 800099a:	f003 fe4f 	bl	800463c <siscanf>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b03      	cmp	r3, #3
 80009a2:	d110      	bne.n	80009c6 <exec_command+0x146>
			{
				if(memory_write(addr, length, data))
 80009a4:	6a3b      	ldr	r3, [r7, #32]
 80009a6:	69f9      	ldr	r1, [r7, #28]
 80009a8:	69ba      	ldr	r2, [r7, #24]
 80009aa:	4618      	mov	r0, r3
 80009ac:	f000 f8c8 	bl	8000b40 <memory_write>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d003      	beq.n	80009be <exec_command+0x13e>
					send_UART("Memory written with success.");
 80009b6:	4841      	ldr	r0, [pc, #260]	; (8000abc <exec_command+0x23c>)
 80009b8:	f000 fc8c 	bl	80012d4 <send_UART>
					send_UART("Invalid Memory Write instruction argument values.");
			}
			else
				send_UART("Invalid Memory Write instruction syntax.");

			break;
 80009bc:	e06c      	b.n	8000a98 <exec_command+0x218>
					send_UART("Invalid Memory Write instruction argument values.");
 80009be:	4840      	ldr	r0, [pc, #256]	; (8000ac0 <exec_command+0x240>)
 80009c0:	f000 fc88 	bl	80012d4 <send_UART>
			break;
 80009c4:	e068      	b.n	8000a98 <exec_command+0x218>
				send_UART("Invalid Memory Write instruction syntax.");
 80009c6:	483f      	ldr	r0, [pc, #252]	; (8000ac4 <exec_command+0x244>)
 80009c8:	f000 fc84 	bl	80012d4 <send_UART>
			break;
 80009cc:	e064      	b.n	8000a98 <exec_command+0x218>

		case MI:

			if(sscanf((char*) message, "%*s %x %x", &port_addr, &pin_setting) == 2)
 80009ce:	f107 0310 	add.w	r3, r7, #16
 80009d2:	f107 0214 	add.w	r2, r7, #20
 80009d6:	4933      	ldr	r1, [pc, #204]	; (8000aa4 <exec_command+0x224>)
 80009d8:	6838      	ldr	r0, [r7, #0]
 80009da:	f003 fe2f 	bl	800463c <siscanf>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b02      	cmp	r3, #2
 80009e2:	d110      	bne.n	8000a06 <exec_command+0x186>
			{
				if(make_pin_input(port_addr, pin_setting))
 80009e4:	697b      	ldr	r3, [r7, #20]
 80009e6:	693a      	ldr	r2, [r7, #16]
 80009e8:	4611      	mov	r1, r2
 80009ea:	4618      	mov	r0, r3
 80009ec:	f000 f8d0 	bl	8000b90 <make_pin_input>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d003      	beq.n	80009fe <exec_command+0x17e>
					send_UART("Pin(s) set as input with success.");
 80009f6:	4834      	ldr	r0, [pc, #208]	; (8000ac8 <exec_command+0x248>)
 80009f8:	f000 fc6c 	bl	80012d4 <send_UART>
					send_UART("Invalid Make Pin Input instruction argument values.");
			}
			else
			  send_UART("Invalid Make Pin Input instruction syntax.");

			break;
 80009fc:	e04c      	b.n	8000a98 <exec_command+0x218>
					send_UART("Invalid Make Pin Input instruction argument values.");
 80009fe:	4833      	ldr	r0, [pc, #204]	; (8000acc <exec_command+0x24c>)
 8000a00:	f000 fc68 	bl	80012d4 <send_UART>
			break;
 8000a04:	e048      	b.n	8000a98 <exec_command+0x218>
			  send_UART("Invalid Make Pin Input instruction syntax.");
 8000a06:	4832      	ldr	r0, [pc, #200]	; (8000ad0 <exec_command+0x250>)
 8000a08:	f000 fc64 	bl	80012d4 <send_UART>
			break;
 8000a0c:	e044      	b.n	8000a98 <exec_command+0x218>

		case MO:

			if(sscanf((char*) message, "%*s %x %x", &port_addr, &pin_setting) == 2)
 8000a0e:	f107 0310 	add.w	r3, r7, #16
 8000a12:	f107 0214 	add.w	r2, r7, #20
 8000a16:	4923      	ldr	r1, [pc, #140]	; (8000aa4 <exec_command+0x224>)
 8000a18:	6838      	ldr	r0, [r7, #0]
 8000a1a:	f003 fe0f 	bl	800463c <siscanf>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b02      	cmp	r3, #2
 8000a22:	d110      	bne.n	8000a46 <exec_command+0x1c6>
			{
				if(make_pin_output(port_addr, pin_setting))
 8000a24:	697b      	ldr	r3, [r7, #20]
 8000a26:	693a      	ldr	r2, [r7, #16]
 8000a28:	4611      	mov	r1, r2
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f000 f996 	bl	8000d5c <make_pin_output>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d003      	beq.n	8000a3e <exec_command+0x1be>
					send_UART("Pin(s) set as output with success.");
 8000a36:	4827      	ldr	r0, [pc, #156]	; (8000ad4 <exec_command+0x254>)
 8000a38:	f000 fc4c 	bl	80012d4 <send_UART>
					send_UART("Invalid Make Pin Output instruction argument values.");
			}
			else
				send_UART("Invalid Make Pin Output instruction syntax.");

			break;
 8000a3c:	e02c      	b.n	8000a98 <exec_command+0x218>
					send_UART("Invalid Make Pin Output instruction argument values.");
 8000a3e:	4826      	ldr	r0, [pc, #152]	; (8000ad8 <exec_command+0x258>)
 8000a40:	f000 fc48 	bl	80012d4 <send_UART>
			break;
 8000a44:	e028      	b.n	8000a98 <exec_command+0x218>
				send_UART("Invalid Make Pin Output instruction syntax.");
 8000a46:	4825      	ldr	r0, [pc, #148]	; (8000adc <exec_command+0x25c>)
 8000a48:	f000 fc44 	bl	80012d4 <send_UART>
			break;
 8000a4c:	e024      	b.n	8000a98 <exec_command+0x218>

			break;

		case WD:

			if(sscanf((char*) message, "%*s %x %x %x", &port_addr, &pin_setting, &pin_values) == 3)
 8000a4e:	f107 0110 	add.w	r1, r7, #16
 8000a52:	f107 0214 	add.w	r2, r7, #20
 8000a56:	f107 030c 	add.w	r3, r7, #12
 8000a5a:	9300      	str	r3, [sp, #0]
 8000a5c:	460b      	mov	r3, r1
 8000a5e:	4916      	ldr	r1, [pc, #88]	; (8000ab8 <exec_command+0x238>)
 8000a60:	6838      	ldr	r0, [r7, #0]
 8000a62:	f003 fdeb 	bl	800463c <siscanf>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b03      	cmp	r3, #3
 8000a6a:	d110      	bne.n	8000a8e <exec_command+0x20e>
			{
				if(write_dig_output(port_addr, pin_setting, pin_values))
 8000a6c:	697b      	ldr	r3, [r7, #20]
 8000a6e:	6939      	ldr	r1, [r7, #16]
 8000a70:	68fa      	ldr	r2, [r7, #12]
 8000a72:	4618      	mov	r0, r3
 8000a74:	f000 fa5a 	bl	8000f2c <write_dig_output>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d003      	beq.n	8000a86 <exec_command+0x206>
					send_UART("Digital output value wrote with success.");
 8000a7e:	4818      	ldr	r0, [pc, #96]	; (8000ae0 <exec_command+0x260>)
 8000a80:	f000 fc28 	bl	80012d4 <send_UART>
					send_UART("Invalid Write Digital Output instruction argument values.");
			}
			else
				send_UART("Invalid Write Digital Output instruction syntax.");

			break;
 8000a84:	e008      	b.n	8000a98 <exec_command+0x218>
					send_UART("Invalid Write Digital Output instruction argument values.");
 8000a86:	4817      	ldr	r0, [pc, #92]	; (8000ae4 <exec_command+0x264>)
 8000a88:	f000 fc24 	bl	80012d4 <send_UART>
			break;
 8000a8c:	e004      	b.n	8000a98 <exec_command+0x218>
				send_UART("Invalid Write Digital Output instruction syntax.");
 8000a8e:	4816      	ldr	r0, [pc, #88]	; (8000ae8 <exec_command+0x268>)
 8000a90:	f000 fc20 	bl	80012d4 <send_UART>
			break;
 8000a94:	e000      	b.n	8000a98 <exec_command+0x218>

			break;

		default:

			break;
 8000a96:	bf00      	nop
	}

}
 8000a98:	bf00      	nop
 8000a9a:	3730      	adds	r7, #48	; 0x30
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bdb0      	pop	{r4, r5, r7, pc}
 8000aa0:	0800585c 	.word	0x0800585c
 8000aa4:	08005874 	.word	0x08005874
 8000aa8:	08005880 	.word	0x08005880
 8000aac:	08005890 	.word	0x08005890
 8000ab0:	08005898 	.word	0x08005898
 8000ab4:	080058cc 	.word	0x080058cc
 8000ab8:	080058f4 	.word	0x080058f4
 8000abc:	08005904 	.word	0x08005904
 8000ac0:	08005924 	.word	0x08005924
 8000ac4:	08005958 	.word	0x08005958
 8000ac8:	08005984 	.word	0x08005984
 8000acc:	080059a8 	.word	0x080059a8
 8000ad0:	080059dc 	.word	0x080059dc
 8000ad4:	08005a08 	.word	0x08005a08
 8000ad8:	08005a2c 	.word	0x08005a2c
 8000adc:	08005a64 	.word	0x08005a64
 8000ae0:	08005a90 	.word	0x08005a90
 8000ae4:	08005abc 	.word	0x08005abc
 8000ae8:	08005af8 	.word	0x08005af8

08000aec <memory_read>:

bool memory_read(unsigned int addr_r, unsigned int length, char* data)
{
 8000aec:	b480      	push	{r7}
 8000aee:	b087      	sub	sp, #28
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	60f8      	str	r0, [r7, #12]
 8000af4:	60b9      	str	r1, [r7, #8]
 8000af6:	607a      	str	r2, [r7, #4]
	if(addr_r < 0 && addr_r > 0xFFFF && length < 0 && length > 0xFF)
		return false;

	if((0x10000 - addr_r) < length)
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	f5c3 3380 	rsb	r3, r3, #65536	; 0x10000
 8000afe:	68ba      	ldr	r2, [r7, #8]
 8000b00:	429a      	cmp	r2, r3
 8000b02:	d901      	bls.n	8000b08 <memory_read+0x1c>
		return false;
 8000b04:	2300      	movs	r3, #0
 8000b06:	e013      	b.n	8000b30 <memory_read+0x44>

	for(int i = 0; i < length; i++)
 8000b08:	2300      	movs	r3, #0
 8000b0a:	617b      	str	r3, [r7, #20]
 8000b0c:	e00b      	b.n	8000b26 <memory_read+0x3a>
	{
		data[i] = memory[addr_r++];
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	1c5a      	adds	r2, r3, #1
 8000b12:	60fa      	str	r2, [r7, #12]
 8000b14:	697a      	ldr	r2, [r7, #20]
 8000b16:	6879      	ldr	r1, [r7, #4]
 8000b18:	440a      	add	r2, r1
 8000b1a:	4908      	ldr	r1, [pc, #32]	; (8000b3c <memory_read+0x50>)
 8000b1c:	5ccb      	ldrb	r3, [r1, r3]
 8000b1e:	7013      	strb	r3, [r2, #0]
	for(int i = 0; i < length; i++)
 8000b20:	697b      	ldr	r3, [r7, #20]
 8000b22:	3301      	adds	r3, #1
 8000b24:	617b      	str	r3, [r7, #20]
 8000b26:	697b      	ldr	r3, [r7, #20]
 8000b28:	68ba      	ldr	r2, [r7, #8]
 8000b2a:	429a      	cmp	r2, r3
 8000b2c:	d8ef      	bhi.n	8000b0e <memory_read+0x22>
	}

	return true;
 8000b2e:	2301      	movs	r3, #1
}
 8000b30:	4618      	mov	r0, r3
 8000b32:	371c      	adds	r7, #28
 8000b34:	46bd      	mov	sp, r7
 8000b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3a:	4770      	bx	lr
 8000b3c:	20000118 	.word	0x20000118

08000b40 <memory_write>:

bool memory_write(unsigned int addr, unsigned int length, int data)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b087      	sub	sp, #28
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	60f8      	str	r0, [r7, #12]
 8000b48:	60b9      	str	r1, [r7, #8]
 8000b4a:	607a      	str	r2, [r7, #4]
	if(addr < 0 && addr > 0xFFFF && length < 0 && length > 0xFF && data < 0 && data > 0xFF)
		return false;

	if((0x10000 - addr) < length)
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	f5c3 3380 	rsb	r3, r3, #65536	; 0x10000
 8000b52:	68ba      	ldr	r2, [r7, #8]
 8000b54:	429a      	cmp	r2, r3
 8000b56:	d901      	bls.n	8000b5c <memory_write+0x1c>
		return false;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	e011      	b.n	8000b80 <memory_write+0x40>

	for(int i = 0; i < length; i++)
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	617b      	str	r3, [r7, #20]
 8000b60:	e009      	b.n	8000b76 <memory_write+0x36>
	{
		memory[addr++] = data;
 8000b62:	68fb      	ldr	r3, [r7, #12]
 8000b64:	1c5a      	adds	r2, r3, #1
 8000b66:	60fa      	str	r2, [r7, #12]
 8000b68:	687a      	ldr	r2, [r7, #4]
 8000b6a:	b2d1      	uxtb	r1, r2
 8000b6c:	4a07      	ldr	r2, [pc, #28]	; (8000b8c <memory_write+0x4c>)
 8000b6e:	54d1      	strb	r1, [r2, r3]
	for(int i = 0; i < length; i++)
 8000b70:	697b      	ldr	r3, [r7, #20]
 8000b72:	3301      	adds	r3, #1
 8000b74:	617b      	str	r3, [r7, #20]
 8000b76:	697b      	ldr	r3, [r7, #20]
 8000b78:	68ba      	ldr	r2, [r7, #8]
 8000b7a:	429a      	cmp	r2, r3
 8000b7c:	d8f1      	bhi.n	8000b62 <memory_write+0x22>
	}

	return true;
 8000b7e:	2301      	movs	r3, #1
}
 8000b80:	4618      	mov	r0, r3
 8000b82:	371c      	adds	r7, #28
 8000b84:	46bd      	mov	sp, r7
 8000b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8a:	4770      	bx	lr
 8000b8c:	20000118 	.word	0x20000118

08000b90 <make_pin_input>:

bool make_pin_input(unsigned int port_addr, unsigned int pin_setting)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b092      	sub	sp, #72	; 0x48
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
 8000b98:	6039      	str	r1, [r7, #0]
	if(port_addr < 0x01 && port_addr > 0x0B && pin_setting < 0x01 && pin_setting > 0xFFFF)
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d10b      	bne.n	8000bb8 <make_pin_input+0x28>
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	2b0b      	cmp	r3, #11
 8000ba4:	d908      	bls.n	8000bb8 <make_pin_input+0x28>
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d105      	bne.n	8000bb8 <make_pin_input+0x28>
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000bb2:	d301      	bcc.n	8000bb8 <make_pin_input+0x28>
		return false;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	e0c8      	b.n	8000d4a <make_pin_input+0x1ba>
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	3b01      	subs	r3, #1
 8000bbc:	2b0a      	cmp	r3, #10
 8000bbe:	f200 80a8 	bhi.w	8000d12 <make_pin_input+0x182>
 8000bc2:	a201      	add	r2, pc, #4	; (adr r2, 8000bc8 <make_pin_input+0x38>)
 8000bc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bc8:	08000bf5 	.word	0x08000bf5
 8000bcc:	08000c0f 	.word	0x08000c0f
 8000bd0:	08000c29 	.word	0x08000c29
 8000bd4:	08000c43 	.word	0x08000c43
 8000bd8:	08000c5d 	.word	0x08000c5d
 8000bdc:	08000c77 	.word	0x08000c77
 8000be0:	08000c91 	.word	0x08000c91
 8000be4:	08000cab 	.word	0x08000cab
 8000be8:	08000cc5 	.word	0x08000cc5
 8000bec:	08000cdf 	.word	0x08000cdf
 8000bf0:	08000cf9 	.word	0x08000cf9

	switch(port_addr)
	{
	case  1: __HAL_RCC_GPIOA_CLK_ENABLE(); break;
 8000bf4:	4b57      	ldr	r3, [pc, #348]	; (8000d54 <make_pin_input+0x1c4>)
 8000bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf8:	4a56      	ldr	r2, [pc, #344]	; (8000d54 <make_pin_input+0x1c4>)
 8000bfa:	f043 0301 	orr.w	r3, r3, #1
 8000bfe:	6313      	str	r3, [r2, #48]	; 0x30
 8000c00:	4b54      	ldr	r3, [pc, #336]	; (8000d54 <make_pin_input+0x1c4>)
 8000c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c04:	f003 0301 	and.w	r3, r3, #1
 8000c08:	633b      	str	r3, [r7, #48]	; 0x30
 8000c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c0c:	e081      	b.n	8000d12 <make_pin_input+0x182>
	case  2: __HAL_RCC_GPIOB_CLK_ENABLE(); break;
 8000c0e:	4b51      	ldr	r3, [pc, #324]	; (8000d54 <make_pin_input+0x1c4>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c12:	4a50      	ldr	r2, [pc, #320]	; (8000d54 <make_pin_input+0x1c4>)
 8000c14:	f043 0302 	orr.w	r3, r3, #2
 8000c18:	6313      	str	r3, [r2, #48]	; 0x30
 8000c1a:	4b4e      	ldr	r3, [pc, #312]	; (8000d54 <make_pin_input+0x1c4>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1e:	f003 0302 	and.w	r3, r3, #2
 8000c22:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c26:	e074      	b.n	8000d12 <make_pin_input+0x182>
	case  3: __HAL_RCC_GPIOC_CLK_ENABLE(); break;
 8000c28:	4b4a      	ldr	r3, [pc, #296]	; (8000d54 <make_pin_input+0x1c4>)
 8000c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2c:	4a49      	ldr	r2, [pc, #292]	; (8000d54 <make_pin_input+0x1c4>)
 8000c2e:	f043 0304 	orr.w	r3, r3, #4
 8000c32:	6313      	str	r3, [r2, #48]	; 0x30
 8000c34:	4b47      	ldr	r3, [pc, #284]	; (8000d54 <make_pin_input+0x1c4>)
 8000c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c38:	f003 0304 	and.w	r3, r3, #4
 8000c3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8000c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c40:	e067      	b.n	8000d12 <make_pin_input+0x182>
	case  4: __HAL_RCC_GPIOD_CLK_ENABLE(); break;
 8000c42:	4b44      	ldr	r3, [pc, #272]	; (8000d54 <make_pin_input+0x1c4>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c46:	4a43      	ldr	r2, [pc, #268]	; (8000d54 <make_pin_input+0x1c4>)
 8000c48:	f043 0308 	orr.w	r3, r3, #8
 8000c4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c4e:	4b41      	ldr	r3, [pc, #260]	; (8000d54 <make_pin_input+0x1c4>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c52:	f003 0308 	and.w	r3, r3, #8
 8000c56:	627b      	str	r3, [r7, #36]	; 0x24
 8000c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c5a:	e05a      	b.n	8000d12 <make_pin_input+0x182>
	case  5: __HAL_RCC_GPIOE_CLK_ENABLE(); break;
 8000c5c:	4b3d      	ldr	r3, [pc, #244]	; (8000d54 <make_pin_input+0x1c4>)
 8000c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c60:	4a3c      	ldr	r2, [pc, #240]	; (8000d54 <make_pin_input+0x1c4>)
 8000c62:	f043 0310 	orr.w	r3, r3, #16
 8000c66:	6313      	str	r3, [r2, #48]	; 0x30
 8000c68:	4b3a      	ldr	r3, [pc, #232]	; (8000d54 <make_pin_input+0x1c4>)
 8000c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6c:	f003 0310 	and.w	r3, r3, #16
 8000c70:	623b      	str	r3, [r7, #32]
 8000c72:	6a3b      	ldr	r3, [r7, #32]
 8000c74:	e04d      	b.n	8000d12 <make_pin_input+0x182>
	case  6: __HAL_RCC_GPIOF_CLK_ENABLE(); break;
 8000c76:	4b37      	ldr	r3, [pc, #220]	; (8000d54 <make_pin_input+0x1c4>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7a:	4a36      	ldr	r2, [pc, #216]	; (8000d54 <make_pin_input+0x1c4>)
 8000c7c:	f043 0320 	orr.w	r3, r3, #32
 8000c80:	6313      	str	r3, [r2, #48]	; 0x30
 8000c82:	4b34      	ldr	r3, [pc, #208]	; (8000d54 <make_pin_input+0x1c4>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c86:	f003 0320 	and.w	r3, r3, #32
 8000c8a:	61fb      	str	r3, [r7, #28]
 8000c8c:	69fb      	ldr	r3, [r7, #28]
 8000c8e:	e040      	b.n	8000d12 <make_pin_input+0x182>
	case  7: __HAL_RCC_GPIOG_CLK_ENABLE(); break;
 8000c90:	4b30      	ldr	r3, [pc, #192]	; (8000d54 <make_pin_input+0x1c4>)
 8000c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c94:	4a2f      	ldr	r2, [pc, #188]	; (8000d54 <make_pin_input+0x1c4>)
 8000c96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c9a:	6313      	str	r3, [r2, #48]	; 0x30
 8000c9c:	4b2d      	ldr	r3, [pc, #180]	; (8000d54 <make_pin_input+0x1c4>)
 8000c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ca4:	61bb      	str	r3, [r7, #24]
 8000ca6:	69bb      	ldr	r3, [r7, #24]
 8000ca8:	e033      	b.n	8000d12 <make_pin_input+0x182>
	case  8: __HAL_RCC_GPIOH_CLK_ENABLE(); break;
 8000caa:	4b2a      	ldr	r3, [pc, #168]	; (8000d54 <make_pin_input+0x1c4>)
 8000cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cae:	4a29      	ldr	r2, [pc, #164]	; (8000d54 <make_pin_input+0x1c4>)
 8000cb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cb6:	4b27      	ldr	r3, [pc, #156]	; (8000d54 <make_pin_input+0x1c4>)
 8000cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cbe:	617b      	str	r3, [r7, #20]
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	e026      	b.n	8000d12 <make_pin_input+0x182>
	case  9: __HAL_RCC_GPIOI_CLK_ENABLE(); break;
 8000cc4:	4b23      	ldr	r3, [pc, #140]	; (8000d54 <make_pin_input+0x1c4>)
 8000cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc8:	4a22      	ldr	r2, [pc, #136]	; (8000d54 <make_pin_input+0x1c4>)
 8000cca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cce:	6313      	str	r3, [r2, #48]	; 0x30
 8000cd0:	4b20      	ldr	r3, [pc, #128]	; (8000d54 <make_pin_input+0x1c4>)
 8000cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000cd8:	613b      	str	r3, [r7, #16]
 8000cda:	693b      	ldr	r3, [r7, #16]
 8000cdc:	e019      	b.n	8000d12 <make_pin_input+0x182>
	case 10: __HAL_RCC_GPIOJ_CLK_ENABLE(); break;
 8000cde:	4b1d      	ldr	r3, [pc, #116]	; (8000d54 <make_pin_input+0x1c4>)
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce2:	4a1c      	ldr	r2, [pc, #112]	; (8000d54 <make_pin_input+0x1c4>)
 8000ce4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ce8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cea:	4b1a      	ldr	r3, [pc, #104]	; (8000d54 <make_pin_input+0x1c4>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000cf2:	60fb      	str	r3, [r7, #12]
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	e00c      	b.n	8000d12 <make_pin_input+0x182>
	case 11: __HAL_RCC_GPIOK_CLK_ENABLE(); break;
 8000cf8:	4b16      	ldr	r3, [pc, #88]	; (8000d54 <make_pin_input+0x1c4>)
 8000cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfc:	4a15      	ldr	r2, [pc, #84]	; (8000d54 <make_pin_input+0x1c4>)
 8000cfe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d02:	6313      	str	r3, [r2, #48]	; 0x30
 8000d04:	4b13      	ldr	r3, [pc, #76]	; (8000d54 <make_pin_input+0x1c4>)
 8000d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d0c:	60bb      	str	r3, [r7, #8]
 8000d0e:	68bb      	ldr	r3, [r7, #8]
 8000d10:	bf00      	nop
	}

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d12:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000d16:	2200      	movs	r2, #0
 8000d18:	601a      	str	r2, [r3, #0]
 8000d1a:	605a      	str	r2, [r3, #4]
 8000d1c:	609a      	str	r2, [r3, #8]
 8000d1e:	60da      	str	r2, [r3, #12]
 8000d20:	611a      	str	r2, [r3, #16]

	GPIO_InitStruct.Pin |= pin_setting;
 8000d22:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	4313      	orrs	r3, r2
 8000d28:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	63fb      	str	r3, [r7, #60]	; 0x3c

	HAL_GPIO_Init((GPIO_TypeDef *) (AHB1PERIPH_BASE + (0x0400UL * (port_addr-1))), &GPIO_InitStruct);
 8000d32:	687a      	ldr	r2, [r7, #4]
 8000d34:	4b08      	ldr	r3, [pc, #32]	; (8000d58 <make_pin_input+0x1c8>)
 8000d36:	4413      	add	r3, r2
 8000d38:	029b      	lsls	r3, r3, #10
 8000d3a:	461a      	mov	r2, r3
 8000d3c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000d40:	4619      	mov	r1, r3
 8000d42:	4610      	mov	r0, r2
 8000d44:	f000 fd9a 	bl	800187c <HAL_GPIO_Init>

	return true;
 8000d48:	2301      	movs	r3, #1
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	3748      	adds	r7, #72	; 0x48
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	40023800 	.word	0x40023800
 8000d58:	0010007f 	.word	0x0010007f

08000d5c <make_pin_output>:

bool make_pin_output(unsigned int port_addr, unsigned int pin_setting)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b092      	sub	sp, #72	; 0x48
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
 8000d64:	6039      	str	r1, [r7, #0]
	if(port_addr < 0x01 && port_addr > 0x0B && pin_setting < 0x01 && pin_setting > 0xFFFF)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d10b      	bne.n	8000d84 <make_pin_output+0x28>
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	2b0b      	cmp	r3, #11
 8000d70:	d908      	bls.n	8000d84 <make_pin_output+0x28>
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d105      	bne.n	8000d84 <make_pin_output+0x28>
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d7e:	d301      	bcc.n	8000d84 <make_pin_output+0x28>
		return false;
 8000d80:	2300      	movs	r3, #0
 8000d82:	e0ca      	b.n	8000f1a <make_pin_output+0x1be>
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	3b01      	subs	r3, #1
 8000d88:	2b0a      	cmp	r3, #10
 8000d8a:	f200 80a8 	bhi.w	8000ede <make_pin_output+0x182>
 8000d8e:	a201      	add	r2, pc, #4	; (adr r2, 8000d94 <make_pin_output+0x38>)
 8000d90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d94:	08000dc1 	.word	0x08000dc1
 8000d98:	08000ddb 	.word	0x08000ddb
 8000d9c:	08000df5 	.word	0x08000df5
 8000da0:	08000e0f 	.word	0x08000e0f
 8000da4:	08000e29 	.word	0x08000e29
 8000da8:	08000e43 	.word	0x08000e43
 8000dac:	08000e5d 	.word	0x08000e5d
 8000db0:	08000e77 	.word	0x08000e77
 8000db4:	08000e91 	.word	0x08000e91
 8000db8:	08000eab 	.word	0x08000eab
 8000dbc:	08000ec5 	.word	0x08000ec5

	switch(port_addr)
	{
	case  1: __HAL_RCC_GPIOA_CLK_ENABLE(); break;
 8000dc0:	4b58      	ldr	r3, [pc, #352]	; (8000f24 <make_pin_output+0x1c8>)
 8000dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc4:	4a57      	ldr	r2, [pc, #348]	; (8000f24 <make_pin_output+0x1c8>)
 8000dc6:	f043 0301 	orr.w	r3, r3, #1
 8000dca:	6313      	str	r3, [r2, #48]	; 0x30
 8000dcc:	4b55      	ldr	r3, [pc, #340]	; (8000f24 <make_pin_output+0x1c8>)
 8000dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd0:	f003 0301 	and.w	r3, r3, #1
 8000dd4:	633b      	str	r3, [r7, #48]	; 0x30
 8000dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000dd8:	e081      	b.n	8000ede <make_pin_output+0x182>
	case  2: __HAL_RCC_GPIOB_CLK_ENABLE(); break;
 8000dda:	4b52      	ldr	r3, [pc, #328]	; (8000f24 <make_pin_output+0x1c8>)
 8000ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dde:	4a51      	ldr	r2, [pc, #324]	; (8000f24 <make_pin_output+0x1c8>)
 8000de0:	f043 0302 	orr.w	r3, r3, #2
 8000de4:	6313      	str	r3, [r2, #48]	; 0x30
 8000de6:	4b4f      	ldr	r3, [pc, #316]	; (8000f24 <make_pin_output+0x1c8>)
 8000de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dea:	f003 0302 	and.w	r3, r3, #2
 8000dee:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000df2:	e074      	b.n	8000ede <make_pin_output+0x182>
	case  3: __HAL_RCC_GPIOC_CLK_ENABLE(); break;
 8000df4:	4b4b      	ldr	r3, [pc, #300]	; (8000f24 <make_pin_output+0x1c8>)
 8000df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df8:	4a4a      	ldr	r2, [pc, #296]	; (8000f24 <make_pin_output+0x1c8>)
 8000dfa:	f043 0304 	orr.w	r3, r3, #4
 8000dfe:	6313      	str	r3, [r2, #48]	; 0x30
 8000e00:	4b48      	ldr	r3, [pc, #288]	; (8000f24 <make_pin_output+0x1c8>)
 8000e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e04:	f003 0304 	and.w	r3, r3, #4
 8000e08:	62bb      	str	r3, [r7, #40]	; 0x28
 8000e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e0c:	e067      	b.n	8000ede <make_pin_output+0x182>
	case  4: __HAL_RCC_GPIOD_CLK_ENABLE(); break;
 8000e0e:	4b45      	ldr	r3, [pc, #276]	; (8000f24 <make_pin_output+0x1c8>)
 8000e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e12:	4a44      	ldr	r2, [pc, #272]	; (8000f24 <make_pin_output+0x1c8>)
 8000e14:	f043 0308 	orr.w	r3, r3, #8
 8000e18:	6313      	str	r3, [r2, #48]	; 0x30
 8000e1a:	4b42      	ldr	r3, [pc, #264]	; (8000f24 <make_pin_output+0x1c8>)
 8000e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1e:	f003 0308 	and.w	r3, r3, #8
 8000e22:	627b      	str	r3, [r7, #36]	; 0x24
 8000e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e26:	e05a      	b.n	8000ede <make_pin_output+0x182>
	case  5: __HAL_RCC_GPIOE_CLK_ENABLE(); break;
 8000e28:	4b3e      	ldr	r3, [pc, #248]	; (8000f24 <make_pin_output+0x1c8>)
 8000e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2c:	4a3d      	ldr	r2, [pc, #244]	; (8000f24 <make_pin_output+0x1c8>)
 8000e2e:	f043 0310 	orr.w	r3, r3, #16
 8000e32:	6313      	str	r3, [r2, #48]	; 0x30
 8000e34:	4b3b      	ldr	r3, [pc, #236]	; (8000f24 <make_pin_output+0x1c8>)
 8000e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e38:	f003 0310 	and.w	r3, r3, #16
 8000e3c:	623b      	str	r3, [r7, #32]
 8000e3e:	6a3b      	ldr	r3, [r7, #32]
 8000e40:	e04d      	b.n	8000ede <make_pin_output+0x182>
	case  6: __HAL_RCC_GPIOF_CLK_ENABLE(); break;
 8000e42:	4b38      	ldr	r3, [pc, #224]	; (8000f24 <make_pin_output+0x1c8>)
 8000e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e46:	4a37      	ldr	r2, [pc, #220]	; (8000f24 <make_pin_output+0x1c8>)
 8000e48:	f043 0320 	orr.w	r3, r3, #32
 8000e4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e4e:	4b35      	ldr	r3, [pc, #212]	; (8000f24 <make_pin_output+0x1c8>)
 8000e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e52:	f003 0320 	and.w	r3, r3, #32
 8000e56:	61fb      	str	r3, [r7, #28]
 8000e58:	69fb      	ldr	r3, [r7, #28]
 8000e5a:	e040      	b.n	8000ede <make_pin_output+0x182>
	case  7: __HAL_RCC_GPIOG_CLK_ENABLE(); break;
 8000e5c:	4b31      	ldr	r3, [pc, #196]	; (8000f24 <make_pin_output+0x1c8>)
 8000e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e60:	4a30      	ldr	r2, [pc, #192]	; (8000f24 <make_pin_output+0x1c8>)
 8000e62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e66:	6313      	str	r3, [r2, #48]	; 0x30
 8000e68:	4b2e      	ldr	r3, [pc, #184]	; (8000f24 <make_pin_output+0x1c8>)
 8000e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e70:	61bb      	str	r3, [r7, #24]
 8000e72:	69bb      	ldr	r3, [r7, #24]
 8000e74:	e033      	b.n	8000ede <make_pin_output+0x182>
	case  8: __HAL_RCC_GPIOH_CLK_ENABLE(); break;
 8000e76:	4b2b      	ldr	r3, [pc, #172]	; (8000f24 <make_pin_output+0x1c8>)
 8000e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7a:	4a2a      	ldr	r2, [pc, #168]	; (8000f24 <make_pin_output+0x1c8>)
 8000e7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e80:	6313      	str	r3, [r2, #48]	; 0x30
 8000e82:	4b28      	ldr	r3, [pc, #160]	; (8000f24 <make_pin_output+0x1c8>)
 8000e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e8a:	617b      	str	r3, [r7, #20]
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	e026      	b.n	8000ede <make_pin_output+0x182>
	case  9: __HAL_RCC_GPIOI_CLK_ENABLE(); break;
 8000e90:	4b24      	ldr	r3, [pc, #144]	; (8000f24 <make_pin_output+0x1c8>)
 8000e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e94:	4a23      	ldr	r2, [pc, #140]	; (8000f24 <make_pin_output+0x1c8>)
 8000e96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e9a:	6313      	str	r3, [r2, #48]	; 0x30
 8000e9c:	4b21      	ldr	r3, [pc, #132]	; (8000f24 <make_pin_output+0x1c8>)
 8000e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ea4:	613b      	str	r3, [r7, #16]
 8000ea6:	693b      	ldr	r3, [r7, #16]
 8000ea8:	e019      	b.n	8000ede <make_pin_output+0x182>
	case 10: __HAL_RCC_GPIOJ_CLK_ENABLE(); break;
 8000eaa:	4b1e      	ldr	r3, [pc, #120]	; (8000f24 <make_pin_output+0x1c8>)
 8000eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eae:	4a1d      	ldr	r2, [pc, #116]	; (8000f24 <make_pin_output+0x1c8>)
 8000eb0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000eb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000eb6:	4b1b      	ldr	r3, [pc, #108]	; (8000f24 <make_pin_output+0x1c8>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000ebe:	60fb      	str	r3, [r7, #12]
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	e00c      	b.n	8000ede <make_pin_output+0x182>
	case 11: __HAL_RCC_GPIOK_CLK_ENABLE(); break;
 8000ec4:	4b17      	ldr	r3, [pc, #92]	; (8000f24 <make_pin_output+0x1c8>)
 8000ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec8:	4a16      	ldr	r2, [pc, #88]	; (8000f24 <make_pin_output+0x1c8>)
 8000eca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ece:	6313      	str	r3, [r2, #48]	; 0x30
 8000ed0:	4b14      	ldr	r3, [pc, #80]	; (8000f24 <make_pin_output+0x1c8>)
 8000ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ed8:	60bb      	str	r3, [r7, #8]
 8000eda:	68bb      	ldr	r3, [r7, #8]
 8000edc:	bf00      	nop
	}

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ede:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	601a      	str	r2, [r3, #0]
 8000ee6:	605a      	str	r2, [r3, #4]
 8000ee8:	609a      	str	r2, [r3, #8]
 8000eea:	60da      	str	r2, [r3, #12]
 8000eec:	611a      	str	r2, [r3, #16]

	GPIO_InitStruct.Pin |= pin_setting;
 8000eee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	4313      	orrs	r3, r2
 8000ef4:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efa:	2300      	movs	r3, #0
 8000efc:	63fb      	str	r3, [r7, #60]	; 0x3c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000efe:	2300      	movs	r3, #0
 8000f00:	643b      	str	r3, [r7, #64]	; 0x40

//	HAL_GPIO_WritePin(port_addr, GPIO_PIN_0, GPIO_PIN_RESET); reset antes de inicializar, pino a pino

	HAL_GPIO_Init((GPIO_TypeDef *) (AHB1PERIPH_BASE + (0x0400UL * (port_addr - 1))), &GPIO_InitStruct);
 8000f02:	687a      	ldr	r2, [r7, #4]
 8000f04:	4b08      	ldr	r3, [pc, #32]	; (8000f28 <make_pin_output+0x1cc>)
 8000f06:	4413      	add	r3, r2
 8000f08:	029b      	lsls	r3, r3, #10
 8000f0a:	461a      	mov	r2, r3
 8000f0c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000f10:	4619      	mov	r1, r3
 8000f12:	4610      	mov	r0, r2
 8000f14:	f000 fcb2 	bl	800187c <HAL_GPIO_Init>

	return true;
 8000f18:	2301      	movs	r3, #1
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	3748      	adds	r7, #72	; 0x48
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	40023800 	.word	0x40023800
 8000f28:	0010007f 	.word	0x0010007f

08000f2c <write_dig_output>:

}
*/

bool write_dig_output(unsigned int port_addr, unsigned int pin_setting, unsigned int pin_values)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b088      	sub	sp, #32
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	60f8      	str	r0, [r7, #12]
 8000f34:	60b9      	str	r1, [r7, #8]
 8000f36:	607a      	str	r2, [r7, #4]
	if(port_addr < 0x01 && port_addr > 0x0B && pin_setting < 0x01 && pin_setting > 0xFFFF && pin_values < 0x01 && pin_values > 0xFFFF)
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d112      	bne.n	8000f64 <write_dig_output+0x38>
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	2b0b      	cmp	r3, #11
 8000f42:	d90f      	bls.n	8000f64 <write_dig_output+0x38>
 8000f44:	68bb      	ldr	r3, [r7, #8]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d10c      	bne.n	8000f64 <write_dig_output+0x38>
 8000f4a:	68bb      	ldr	r3, [r7, #8]
 8000f4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f50:	d308      	bcc.n	8000f64 <write_dig_output+0x38>
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d105      	bne.n	8000f64 <write_dig_output+0x38>
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f5e:	d301      	bcc.n	8000f64 <write_dig_output+0x38>
		return false;
 8000f60:	2300      	movs	r3, #0
 8000f62:	e02a      	b.n	8000fba <write_dig_output+0x8e>

	int mask = 1;
 8000f64:	2301      	movs	r3, #1
 8000f66:	61fb      	str	r3, [r7, #28]

	for(int pin = 0; pin < 16; pin++)
 8000f68:	2300      	movs	r3, #0
 8000f6a:	61bb      	str	r3, [r7, #24]
 8000f6c:	e021      	b.n	8000fb2 <write_dig_output+0x86>
	{
		bool dummy = pin_setting & mask;
 8000f6e:	69fa      	ldr	r2, [r7, #28]
 8000f70:	68bb      	ldr	r3, [r7, #8]
 8000f72:	4013      	ands	r3, r2
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	bf14      	ite	ne
 8000f78:	2301      	movne	r3, #1
 8000f7a:	2300      	moveq	r3, #0
 8000f7c:	75fb      	strb	r3, [r7, #23]
		if(dummy)
 8000f7e:	7dfb      	ldrb	r3, [r7, #23]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d013      	beq.n	8000fac <write_dig_output+0x80>
		{
			int dummy2 = pin_values & mask;
 8000f84:	69fa      	ldr	r2, [r7, #28]
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	4013      	ands	r3, r2
 8000f8a:	613b      	str	r3, [r7, #16]
			HAL_GPIO_WritePin((GPIO_TypeDef *) (AHB1PERIPH_BASE + (0x0400UL * (port_addr - 1))), (uint16_t) (0x0001U * (pin + 1)), dummy2);
 8000f8c:	68fa      	ldr	r2, [r7, #12]
 8000f8e:	4b0d      	ldr	r3, [pc, #52]	; (8000fc4 <write_dig_output+0x98>)
 8000f90:	4413      	add	r3, r2
 8000f92:	029b      	lsls	r3, r3, #10
 8000f94:	4618      	mov	r0, r3
 8000f96:	69bb      	ldr	r3, [r7, #24]
 8000f98:	3301      	adds	r3, #1
 8000f9a:	b29b      	uxth	r3, r3
 8000f9c:	693a      	ldr	r2, [r7, #16]
 8000f9e:	b2d2      	uxtb	r2, r2
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	f000 fe17 	bl	8001bd4 <HAL_GPIO_WritePin>
			mask <<= 1;
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	005b      	lsls	r3, r3, #1
 8000faa:	61fb      	str	r3, [r7, #28]
	for(int pin = 0; pin < 16; pin++)
 8000fac:	69bb      	ldr	r3, [r7, #24]
 8000fae:	3301      	adds	r3, #1
 8000fb0:	61bb      	str	r3, [r7, #24]
 8000fb2:	69bb      	ldr	r3, [r7, #24]
 8000fb4:	2b0f      	cmp	r3, #15
 8000fb6:	ddda      	ble.n	8000f6e <write_dig_output+0x42>
		}
	}

	return true;
 8000fb8:	2301      	movs	r3, #1

WDβ01β88β80
WD GPIOA
*/

}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	3720      	adds	r7, #32
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	0010007f 	.word	0x0010007f

08000fc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fcc:	b672      	cpsid	i
}
 8000fce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fd0:	e7fe      	b.n	8000fd0 <Error_Handler+0x8>
	...

08000fd4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b083      	sub	sp, #12
 8000fd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000fda:	4b0f      	ldr	r3, [pc, #60]	; (8001018 <HAL_MspInit+0x44>)
 8000fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fde:	4a0e      	ldr	r2, [pc, #56]	; (8001018 <HAL_MspInit+0x44>)
 8000fe0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fe4:	6413      	str	r3, [r2, #64]	; 0x40
 8000fe6:	4b0c      	ldr	r3, [pc, #48]	; (8001018 <HAL_MspInit+0x44>)
 8000fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fee:	607b      	str	r3, [r7, #4]
 8000ff0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ff2:	4b09      	ldr	r3, [pc, #36]	; (8001018 <HAL_MspInit+0x44>)
 8000ff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ff6:	4a08      	ldr	r2, [pc, #32]	; (8001018 <HAL_MspInit+0x44>)
 8000ff8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ffc:	6453      	str	r3, [r2, #68]	; 0x44
 8000ffe:	4b06      	ldr	r3, [pc, #24]	; (8001018 <HAL_MspInit+0x44>)
 8001000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001002:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001006:	603b      	str	r3, [r7, #0]
 8001008:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800100a:	bf00      	nop
 800100c:	370c      	adds	r7, #12
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	40023800 	.word	0x40023800

0800101c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001020:	e7fe      	b.n	8001020 <NMI_Handler+0x4>

08001022 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001022:	b480      	push	{r7}
 8001024:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001026:	e7fe      	b.n	8001026 <HardFault_Handler+0x4>

08001028 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800102c:	e7fe      	b.n	800102c <MemManage_Handler+0x4>

0800102e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800102e:	b480      	push	{r7}
 8001030:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001032:	e7fe      	b.n	8001032 <BusFault_Handler+0x4>

08001034 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001038:	e7fe      	b.n	8001038 <UsageFault_Handler+0x4>

0800103a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800103a:	b480      	push	{r7}
 800103c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800103e:	bf00      	nop
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr

08001048 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800104c:	bf00      	nop
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr

08001056 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001056:	b480      	push	{r7}
 8001058:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800105a:	bf00      	nop
 800105c:	46bd      	mov	sp, r7
 800105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001062:	4770      	bx	lr

08001064 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001068:	f000 fa44 	bl	80014f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800106c:	bf00      	nop
 800106e:	bd80      	pop	{r7, pc}

08001070 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001074:	4802      	ldr	r0, [pc, #8]	; (8001080 <USART3_IRQHandler+0x10>)
 8001076:	f001 fff9 	bl	800306c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800107a:	bf00      	nop
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	200101a8 	.word	0x200101a8

08001084 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b086      	sub	sp, #24
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800108c:	4a14      	ldr	r2, [pc, #80]	; (80010e0 <_sbrk+0x5c>)
 800108e:	4b15      	ldr	r3, [pc, #84]	; (80010e4 <_sbrk+0x60>)
 8001090:	1ad3      	subs	r3, r2, r3
 8001092:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001098:	4b13      	ldr	r3, [pc, #76]	; (80010e8 <_sbrk+0x64>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d102      	bne.n	80010a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010a0:	4b11      	ldr	r3, [pc, #68]	; (80010e8 <_sbrk+0x64>)
 80010a2:	4a12      	ldr	r2, [pc, #72]	; (80010ec <_sbrk+0x68>)
 80010a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010a6:	4b10      	ldr	r3, [pc, #64]	; (80010e8 <_sbrk+0x64>)
 80010a8:	681a      	ldr	r2, [r3, #0]
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4413      	add	r3, r2
 80010ae:	693a      	ldr	r2, [r7, #16]
 80010b0:	429a      	cmp	r2, r3
 80010b2:	d207      	bcs.n	80010c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010b4:	f003 fa70 	bl	8004598 <__errno>
 80010b8:	4603      	mov	r3, r0
 80010ba:	220c      	movs	r2, #12
 80010bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010be:	f04f 33ff 	mov.w	r3, #4294967295
 80010c2:	e009      	b.n	80010d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010c4:	4b08      	ldr	r3, [pc, #32]	; (80010e8 <_sbrk+0x64>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010ca:	4b07      	ldr	r3, [pc, #28]	; (80010e8 <_sbrk+0x64>)
 80010cc:	681a      	ldr	r2, [r3, #0]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4413      	add	r3, r2
 80010d2:	4a05      	ldr	r2, [pc, #20]	; (80010e8 <_sbrk+0x64>)
 80010d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010d6:	68fb      	ldr	r3, [r7, #12]
}
 80010d8:	4618      	mov	r0, r3
 80010da:	3718      	adds	r7, #24
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	20080000 	.word	0x20080000
 80010e4:	00000400 	.word	0x00000400
 80010e8:	2000008c 	.word	0x2000008c
 80010ec:	20010240 	.word	0x20010240

080010f0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010f4:	4b06      	ldr	r3, [pc, #24]	; (8001110 <SystemInit+0x20>)
 80010f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010fa:	4a05      	ldr	r2, [pc, #20]	; (8001110 <SystemInit+0x20>)
 80010fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001100:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001104:	bf00      	nop
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop
 8001110:	e000ed00 	.word	0xe000ed00

08001114 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0

  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  flagCPP = false;
 8001118:	4b1b      	ldr	r3, [pc, #108]	; (8001188 <MX_USART3_UART_Init+0x74>)
 800111a:	2200      	movs	r2, #0
 800111c:	701a      	strb	r2, [r3, #0]
  flagCPE = false;
 800111e:	4b1b      	ldr	r3, [pc, #108]	; (800118c <MX_USART3_UART_Init+0x78>)
 8001120:	2200      	movs	r2, #0
 8001122:	701a      	strb	r2, [r3, #0]
  UART_RX_index = 0;
 8001124:	4b1a      	ldr	r3, [pc, #104]	; (8001190 <MX_USART3_UART_Init+0x7c>)
 8001126:	2200      	movs	r2, #0
 8001128:	601a      	str	r2, [r3, #0]
  UART_TX_index = 0;
 800112a:	4b1a      	ldr	r3, [pc, #104]	; (8001194 <MX_USART3_UART_Init+0x80>)
 800112c:	2200      	movs	r2, #0
 800112e:	601a      	str	r2, [r3, #0]
  UART_TX_buffer[0] = '\r';
 8001130:	4b19      	ldr	r3, [pc, #100]	; (8001198 <MX_USART3_UART_Init+0x84>)
 8001132:	220d      	movs	r2, #13
 8001134:	701a      	strb	r2, [r3, #0]

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001136:	4b19      	ldr	r3, [pc, #100]	; (800119c <MX_USART3_UART_Init+0x88>)
 8001138:	4a19      	ldr	r2, [pc, #100]	; (80011a0 <MX_USART3_UART_Init+0x8c>)
 800113a:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800113c:	4b17      	ldr	r3, [pc, #92]	; (800119c <MX_USART3_UART_Init+0x88>)
 800113e:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001142:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001144:	4b15      	ldr	r3, [pc, #84]	; (800119c <MX_USART3_UART_Init+0x88>)
 8001146:	2200      	movs	r2, #0
 8001148:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800114a:	4b14      	ldr	r3, [pc, #80]	; (800119c <MX_USART3_UART_Init+0x88>)
 800114c:	2200      	movs	r2, #0
 800114e:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001150:	4b12      	ldr	r3, [pc, #72]	; (800119c <MX_USART3_UART_Init+0x88>)
 8001152:	2200      	movs	r2, #0
 8001154:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001156:	4b11      	ldr	r3, [pc, #68]	; (800119c <MX_USART3_UART_Init+0x88>)
 8001158:	220c      	movs	r2, #12
 800115a:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800115c:	4b0f      	ldr	r3, [pc, #60]	; (800119c <MX_USART3_UART_Init+0x88>)
 800115e:	2200      	movs	r2, #0
 8001160:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001162:	4b0e      	ldr	r3, [pc, #56]	; (800119c <MX_USART3_UART_Init+0x88>)
 8001164:	2200      	movs	r2, #0
 8001166:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001168:	4b0c      	ldr	r3, [pc, #48]	; (800119c <MX_USART3_UART_Init+0x88>)
 800116a:	2200      	movs	r2, #0
 800116c:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800116e:	4b0b      	ldr	r3, [pc, #44]	; (800119c <MX_USART3_UART_Init+0x88>)
 8001170:	2200      	movs	r2, #0
 8001172:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001174:	4809      	ldr	r0, [pc, #36]	; (800119c <MX_USART3_UART_Init+0x88>)
 8001176:	f001 fe6f 	bl	8002e58 <HAL_UART_Init>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <MX_USART3_UART_Init+0x70>
  {
    Error_Handler();
 8001180:	f7ff ff22 	bl	8000fc8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001184:	bf00      	nop
 8001186:	bd80      	pop	{r7, pc}
 8001188:	2001011c 	.word	0x2001011c
 800118c:	200101a0 	.word	0x200101a0
 8001190:	20010118 	.word	0x20010118
 8001194:	200101a4 	.word	0x200101a4
 8001198:	20010120 	.word	0x20010120
 800119c:	200101a8 	.word	0x200101a8
 80011a0:	40004800 	.word	0x40004800

080011a4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b0ae      	sub	sp, #184	; 0xb8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ac:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80011b0:	2200      	movs	r2, #0
 80011b2:	601a      	str	r2, [r3, #0]
 80011b4:	605a      	str	r2, [r3, #4]
 80011b6:	609a      	str	r2, [r3, #8]
 80011b8:	60da      	str	r2, [r3, #12]
 80011ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011bc:	f107 0314 	add.w	r3, r7, #20
 80011c0:	2290      	movs	r2, #144	; 0x90
 80011c2:	2100      	movs	r1, #0
 80011c4:	4618      	mov	r0, r3
 80011c6:	f003 fa11 	bl	80045ec <memset>
  if(uartHandle->Instance==USART3)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4a26      	ldr	r2, [pc, #152]	; (8001268 <HAL_UART_MspInit+0xc4>)
 80011d0:	4293      	cmp	r3, r2
 80011d2:	d144      	bne.n	800125e <HAL_UART_MspInit+0xba>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80011d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011d8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80011da:	2300      	movs	r3, #0
 80011dc:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011de:	f107 0314 	add.w	r3, r7, #20
 80011e2:	4618      	mov	r0, r3
 80011e4:	f001 fa10 	bl	8002608 <HAL_RCCEx_PeriphCLKConfig>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80011ee:	f7ff feeb 	bl	8000fc8 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80011f2:	4b1e      	ldr	r3, [pc, #120]	; (800126c <HAL_UART_MspInit+0xc8>)
 80011f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f6:	4a1d      	ldr	r2, [pc, #116]	; (800126c <HAL_UART_MspInit+0xc8>)
 80011f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011fc:	6413      	str	r3, [r2, #64]	; 0x40
 80011fe:	4b1b      	ldr	r3, [pc, #108]	; (800126c <HAL_UART_MspInit+0xc8>)
 8001200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001202:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001206:	613b      	str	r3, [r7, #16]
 8001208:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800120a:	4b18      	ldr	r3, [pc, #96]	; (800126c <HAL_UART_MspInit+0xc8>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120e:	4a17      	ldr	r2, [pc, #92]	; (800126c <HAL_UART_MspInit+0xc8>)
 8001210:	f043 0308 	orr.w	r3, r3, #8
 8001214:	6313      	str	r3, [r2, #48]	; 0x30
 8001216:	4b15      	ldr	r3, [pc, #84]	; (800126c <HAL_UART_MspInit+0xc8>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121a:	f003 0308 	and.w	r3, r3, #8
 800121e:	60fb      	str	r3, [r7, #12]
 8001220:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001222:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001226:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800122a:	2302      	movs	r3, #2
 800122c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001230:	2300      	movs	r3, #0
 8001232:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001236:	2303      	movs	r3, #3
 8001238:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800123c:	2307      	movs	r3, #7
 800123e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001242:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001246:	4619      	mov	r1, r3
 8001248:	4809      	ldr	r0, [pc, #36]	; (8001270 <HAL_UART_MspInit+0xcc>)
 800124a:	f000 fb17 	bl	800187c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800124e:	2200      	movs	r2, #0
 8001250:	2100      	movs	r1, #0
 8001252:	2027      	movs	r0, #39	; 0x27
 8001254:	f000 fa49 	bl	80016ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001258:	2027      	movs	r0, #39	; 0x27
 800125a:	f000 fa62 	bl	8001722 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800125e:	bf00      	nop
 8001260:	37b8      	adds	r7, #184	; 0xb8
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	40004800 	.word	0x40004800
 800126c:	40023800 	.word	0x40023800
 8001270:	40020c00 	.word	0x40020c00

08001274 <has_message_from_UART>:
}

/* USER CODE BEGIN 1 */

bool has_message_from_UART()
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
	return flagCPP;
 8001278:	4b03      	ldr	r3, [pc, #12]	; (8001288 <has_message_from_UART+0x14>)
 800127a:	781b      	ldrb	r3, [r3, #0]
}
 800127c:	4618      	mov	r0, r3
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	2001011c 	.word	0x2001011c

0800128c <is_transmitting_to_UART>:

bool is_transmitting_to_UART()
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
	return flagCPE;
 8001290:	4b03      	ldr	r3, [pc, #12]	; (80012a0 <is_transmitting_to_UART+0x14>)
 8001292:	781b      	ldrb	r3, [r3, #0]
}
 8001294:	4618      	mov	r0, r3
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
 800129e:	bf00      	nop
 80012a0:	200101a0 	.word	0x200101a0

080012a4 <reset_UART>:

void reset_UART()
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
	memset(UART_RX_buffer, 0, BUFFER_SIZE);
 80012a8:	2280      	movs	r2, #128	; 0x80
 80012aa:	2100      	movs	r1, #0
 80012ac:	4806      	ldr	r0, [pc, #24]	; (80012c8 <reset_UART+0x24>)
 80012ae:	f003 f99d 	bl	80045ec <memset>

	HAL_UART_Receive_IT(&huart3, UART_RX_buffer, 1);
 80012b2:	2201      	movs	r2, #1
 80012b4:	4904      	ldr	r1, [pc, #16]	; (80012c8 <reset_UART+0x24>)
 80012b6:	4805      	ldr	r0, [pc, #20]	; (80012cc <reset_UART+0x28>)
 80012b8:	f001 fe8a 	bl	8002fd0 <HAL_UART_Receive_IT>
	flagCPP = false;
 80012bc:	4b04      	ldr	r3, [pc, #16]	; (80012d0 <reset_UART+0x2c>)
 80012be:	2200      	movs	r2, #0
 80012c0:	701a      	strb	r2, [r3, #0]
}
 80012c2:	bf00      	nop
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	20000098 	.word	0x20000098
 80012cc:	200101a8 	.word	0x200101a8
 80012d0:	2001011c 	.word	0x2001011c

080012d4 <send_UART>:

void send_UART(const char* msg_to_send)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
	strncpy((char*) UART_TX_buffer, msg_to_send, 128);
 80012dc:	2280      	movs	r2, #128	; 0x80
 80012de:	6879      	ldr	r1, [r7, #4]
 80012e0:	4812      	ldr	r0, [pc, #72]	; (800132c <send_UART+0x58>)
 80012e2:	f003 f9eb 	bl	80046bc <strncpy>
	strcat((char*) UART_TX_buffer, PROMPT);
 80012e6:	4811      	ldr	r0, [pc, #68]	; (800132c <send_UART+0x58>)
 80012e8:	f7fe ffaa 	bl	8000240 <strlen>
 80012ec:	4603      	mov	r3, r0
 80012ee:	461a      	mov	r2, r3
 80012f0:	4b0e      	ldr	r3, [pc, #56]	; (800132c <send_UART+0x58>)
 80012f2:	4413      	add	r3, r2
 80012f4:	4a0e      	ldr	r2, [pc, #56]	; (8001330 <send_UART+0x5c>)
 80012f6:	6810      	ldr	r0, [r2, #0]
 80012f8:	6018      	str	r0, [r3, #0]
	strcat((char*) UART_TX_buffer, "\r");
 80012fa:	480c      	ldr	r0, [pc, #48]	; (800132c <send_UART+0x58>)
 80012fc:	f7fe ffa0 	bl	8000240 <strlen>
 8001300:	4603      	mov	r3, r0
 8001302:	461a      	mov	r2, r3
 8001304:	4b09      	ldr	r3, [pc, #36]	; (800132c <send_UART+0x58>)
 8001306:	4413      	add	r3, r2
 8001308:	490a      	ldr	r1, [pc, #40]	; (8001334 <send_UART+0x60>)
 800130a:	461a      	mov	r2, r3
 800130c:	460b      	mov	r3, r1
 800130e:	881b      	ldrh	r3, [r3, #0]
 8001310:	8013      	strh	r3, [r2, #0]

	flagCPE = true;
 8001312:	4b09      	ldr	r3, [pc, #36]	; (8001338 <send_UART+0x64>)
 8001314:	2201      	movs	r2, #1
 8001316:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&huart3, UART_TX_buffer, 1);
 8001318:	2201      	movs	r2, #1
 800131a:	4904      	ldr	r1, [pc, #16]	; (800132c <send_UART+0x58>)
 800131c:	4807      	ldr	r0, [pc, #28]	; (800133c <send_UART+0x68>)
 800131e:	f001 fde9 	bl	8002ef4 <HAL_UART_Transmit_IT>

	return;
 8001322:	bf00      	nop
}
 8001324:	3708      	adds	r7, #8
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	20010120 	.word	0x20010120
 8001330:	08005b2c 	.word	0x08005b2c
 8001334:	08005b30 	.word	0x08005b30
 8001338:	200101a0 	.word	0x200101a0
 800133c:	200101a8 	.word	0x200101a8

08001340 <read_UART>:

void read_UART(char* msg_to_read)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
	// formatar backspaces

	strncpy((char*) msg_to_read, (char*) UART_RX_buffer, 128);
 8001348:	2280      	movs	r2, #128	; 0x80
 800134a:	4904      	ldr	r1, [pc, #16]	; (800135c <read_UART+0x1c>)
 800134c:	6878      	ldr	r0, [r7, #4]
 800134e:	f003 f9b5 	bl	80046bc <strncpy>
}
 8001352:	bf00      	nop
 8001354:	3708      	adds	r7, #8
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	20000098 	.word	0x20000098

08001360 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
	if(flagCPP)
 8001368:	4b11      	ldr	r3, [pc, #68]	; (80013b0 <HAL_UART_RxCpltCallback+0x50>)
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d11b      	bne.n	80013a8 <HAL_UART_RxCpltCallback+0x48>
		return;

	if(UART_RX_buffer[UART_RX_index] == '\r')
 8001370:	4b10      	ldr	r3, [pc, #64]	; (80013b4 <HAL_UART_RxCpltCallback+0x54>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a10      	ldr	r2, [pc, #64]	; (80013b8 <HAL_UART_RxCpltCallback+0x58>)
 8001376:	5cd3      	ldrb	r3, [r2, r3]
 8001378:	2b0d      	cmp	r3, #13
 800137a:	d106      	bne.n	800138a <HAL_UART_RxCpltCallback+0x2a>
	{
		UART_RX_index = 0;
 800137c:	4b0d      	ldr	r3, [pc, #52]	; (80013b4 <HAL_UART_RxCpltCallback+0x54>)
 800137e:	2200      	movs	r2, #0
 8001380:	601a      	str	r2, [r3, #0]
		flagCPP = true;
 8001382:	4b0b      	ldr	r3, [pc, #44]	; (80013b0 <HAL_UART_RxCpltCallback+0x50>)
 8001384:	2201      	movs	r2, #1
 8001386:	701a      	strb	r2, [r3, #0]
	else
	{
		HAL_UART_Receive_IT(&huart3, &UART_RX_buffer[++UART_RX_index], 1);
	}

	return;
 8001388:	e00f      	b.n	80013aa <HAL_UART_RxCpltCallback+0x4a>
		HAL_UART_Receive_IT(&huart3, &UART_RX_buffer[++UART_RX_index], 1);
 800138a:	4b0a      	ldr	r3, [pc, #40]	; (80013b4 <HAL_UART_RxCpltCallback+0x54>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	3301      	adds	r3, #1
 8001390:	4a08      	ldr	r2, [pc, #32]	; (80013b4 <HAL_UART_RxCpltCallback+0x54>)
 8001392:	6013      	str	r3, [r2, #0]
 8001394:	4b07      	ldr	r3, [pc, #28]	; (80013b4 <HAL_UART_RxCpltCallback+0x54>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a07      	ldr	r2, [pc, #28]	; (80013b8 <HAL_UART_RxCpltCallback+0x58>)
 800139a:	4413      	add	r3, r2
 800139c:	2201      	movs	r2, #1
 800139e:	4619      	mov	r1, r3
 80013a0:	4806      	ldr	r0, [pc, #24]	; (80013bc <HAL_UART_RxCpltCallback+0x5c>)
 80013a2:	f001 fe15 	bl	8002fd0 <HAL_UART_Receive_IT>
	return;
 80013a6:	e000      	b.n	80013aa <HAL_UART_RxCpltCallback+0x4a>
		return;
 80013a8:	bf00      	nop
}
 80013aa:	3708      	adds	r7, #8
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	2001011c 	.word	0x2001011c
 80013b4:	20010118 	.word	0x20010118
 80013b8:	20000098 	.word	0x20000098
 80013bc:	200101a8 	.word	0x200101a8

080013c0 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef* huart)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
	if(!flagCPE)
 80013c8:	4b13      	ldr	r3, [pc, #76]	; (8001418 <HAL_UART_TxCpltCallback+0x58>)
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	f083 0301 	eor.w	r3, r3, #1
 80013d0:	b2db      	uxtb	r3, r3
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d11b      	bne.n	800140e <HAL_UART_TxCpltCallback+0x4e>
		return;

	if(UART_TX_buffer[UART_TX_index] == '\r')
 80013d6:	4b11      	ldr	r3, [pc, #68]	; (800141c <HAL_UART_TxCpltCallback+0x5c>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4a11      	ldr	r2, [pc, #68]	; (8001420 <HAL_UART_TxCpltCallback+0x60>)
 80013dc:	5cd3      	ldrb	r3, [r2, r3]
 80013de:	2b0d      	cmp	r3, #13
 80013e0:	d106      	bne.n	80013f0 <HAL_UART_TxCpltCallback+0x30>
	{
		UART_TX_index = 0;
 80013e2:	4b0e      	ldr	r3, [pc, #56]	; (800141c <HAL_UART_TxCpltCallback+0x5c>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	601a      	str	r2, [r3, #0]
		flagCPE = false;
 80013e8:	4b0b      	ldr	r3, [pc, #44]	; (8001418 <HAL_UART_TxCpltCallback+0x58>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	701a      	strb	r2, [r3, #0]
	else
	{
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &UART_TX_buffer[++UART_TX_index], 1);
	}

	return;
 80013ee:	e00f      	b.n	8001410 <HAL_UART_TxCpltCallback+0x50>
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &UART_TX_buffer[++UART_TX_index], 1);
 80013f0:	4b0a      	ldr	r3, [pc, #40]	; (800141c <HAL_UART_TxCpltCallback+0x5c>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	3301      	adds	r3, #1
 80013f6:	4a09      	ldr	r2, [pc, #36]	; (800141c <HAL_UART_TxCpltCallback+0x5c>)
 80013f8:	6013      	str	r3, [r2, #0]
 80013fa:	4b08      	ldr	r3, [pc, #32]	; (800141c <HAL_UART_TxCpltCallback+0x5c>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4a08      	ldr	r2, [pc, #32]	; (8001420 <HAL_UART_TxCpltCallback+0x60>)
 8001400:	4413      	add	r3, r2
 8001402:	2201      	movs	r2, #1
 8001404:	4619      	mov	r1, r3
 8001406:	4807      	ldr	r0, [pc, #28]	; (8001424 <HAL_UART_TxCpltCallback+0x64>)
 8001408:	f001 fd74 	bl	8002ef4 <HAL_UART_Transmit_IT>
	return;
 800140c:	e000      	b.n	8001410 <HAL_UART_TxCpltCallback+0x50>
		return;
 800140e:	bf00      	nop
}
 8001410:	3708      	adds	r7, #8
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	200101a0 	.word	0x200101a0
 800141c:	200101a4 	.word	0x200101a4
 8001420:	20010120 	.word	0x20010120
 8001424:	200101a8 	.word	0x200101a8

08001428 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001428:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001460 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800142c:	480d      	ldr	r0, [pc, #52]	; (8001464 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800142e:	490e      	ldr	r1, [pc, #56]	; (8001468 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001430:	4a0e      	ldr	r2, [pc, #56]	; (800146c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001432:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001434:	e002      	b.n	800143c <LoopCopyDataInit>

08001436 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001436:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001438:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800143a:	3304      	adds	r3, #4

0800143c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800143c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800143e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001440:	d3f9      	bcc.n	8001436 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001442:	4a0b      	ldr	r2, [pc, #44]	; (8001470 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001444:	4c0b      	ldr	r4, [pc, #44]	; (8001474 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001446:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001448:	e001      	b.n	800144e <LoopFillZerobss>

0800144a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800144a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800144c:	3204      	adds	r2, #4

0800144e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800144e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001450:	d3fb      	bcc.n	800144a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001452:	f7ff fe4d 	bl	80010f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001456:	f003 f8a5 	bl	80045a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800145a:	f7ff f90f 	bl	800067c <main>
  bx  lr    
 800145e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001460:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001464:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001468:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800146c:	08005d18 	.word	0x08005d18
  ldr r2, =_sbss
 8001470:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001474:	20010240 	.word	0x20010240

08001478 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001478:	e7fe      	b.n	8001478 <ADC_IRQHandler>

0800147a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800147a:	b580      	push	{r7, lr}
 800147c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800147e:	2003      	movs	r0, #3
 8001480:	f000 f928 	bl	80016d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001484:	2000      	movs	r0, #0
 8001486:	f000 f805 	bl	8001494 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800148a:	f7ff fda3 	bl	8000fd4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800148e:	2300      	movs	r3, #0
}
 8001490:	4618      	mov	r0, r3
 8001492:	bd80      	pop	{r7, pc}

08001494 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800149c:	4b12      	ldr	r3, [pc, #72]	; (80014e8 <HAL_InitTick+0x54>)
 800149e:	681a      	ldr	r2, [r3, #0]
 80014a0:	4b12      	ldr	r3, [pc, #72]	; (80014ec <HAL_InitTick+0x58>)
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	4619      	mov	r1, r3
 80014a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80014ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80014b2:	4618      	mov	r0, r3
 80014b4:	f000 f943 	bl	800173e <HAL_SYSTICK_Config>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014be:	2301      	movs	r3, #1
 80014c0:	e00e      	b.n	80014e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2b0f      	cmp	r3, #15
 80014c6:	d80a      	bhi.n	80014de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014c8:	2200      	movs	r2, #0
 80014ca:	6879      	ldr	r1, [r7, #4]
 80014cc:	f04f 30ff 	mov.w	r0, #4294967295
 80014d0:	f000 f90b 	bl	80016ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014d4:	4a06      	ldr	r2, [pc, #24]	; (80014f0 <HAL_InitTick+0x5c>)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014da:	2300      	movs	r3, #0
 80014dc:	e000      	b.n	80014e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014de:	2301      	movs	r3, #1
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	3708      	adds	r7, #8
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	20000000 	.word	0x20000000
 80014ec:	20000008 	.word	0x20000008
 80014f0:	20000004 	.word	0x20000004

080014f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014f8:	4b06      	ldr	r3, [pc, #24]	; (8001514 <HAL_IncTick+0x20>)
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	461a      	mov	r2, r3
 80014fe:	4b06      	ldr	r3, [pc, #24]	; (8001518 <HAL_IncTick+0x24>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4413      	add	r3, r2
 8001504:	4a04      	ldr	r2, [pc, #16]	; (8001518 <HAL_IncTick+0x24>)
 8001506:	6013      	str	r3, [r2, #0]
}
 8001508:	bf00      	nop
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	20000008 	.word	0x20000008
 8001518:	2001022c 	.word	0x2001022c

0800151c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
  return uwTick;
 8001520:	4b03      	ldr	r3, [pc, #12]	; (8001530 <HAL_GetTick+0x14>)
 8001522:	681b      	ldr	r3, [r3, #0]
}
 8001524:	4618      	mov	r0, r3
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr
 800152e:	bf00      	nop
 8001530:	2001022c 	.word	0x2001022c

08001534 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001534:	b480      	push	{r7}
 8001536:	b085      	sub	sp, #20
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	f003 0307 	and.w	r3, r3, #7
 8001542:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001544:	4b0b      	ldr	r3, [pc, #44]	; (8001574 <__NVIC_SetPriorityGrouping+0x40>)
 8001546:	68db      	ldr	r3, [r3, #12]
 8001548:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800154a:	68ba      	ldr	r2, [r7, #8]
 800154c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001550:	4013      	ands	r3, r2
 8001552:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001558:	68bb      	ldr	r3, [r7, #8]
 800155a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800155c:	4b06      	ldr	r3, [pc, #24]	; (8001578 <__NVIC_SetPriorityGrouping+0x44>)
 800155e:	4313      	orrs	r3, r2
 8001560:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001562:	4a04      	ldr	r2, [pc, #16]	; (8001574 <__NVIC_SetPriorityGrouping+0x40>)
 8001564:	68bb      	ldr	r3, [r7, #8]
 8001566:	60d3      	str	r3, [r2, #12]
}
 8001568:	bf00      	nop
 800156a:	3714      	adds	r7, #20
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr
 8001574:	e000ed00 	.word	0xe000ed00
 8001578:	05fa0000 	.word	0x05fa0000

0800157c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001580:	4b04      	ldr	r3, [pc, #16]	; (8001594 <__NVIC_GetPriorityGrouping+0x18>)
 8001582:	68db      	ldr	r3, [r3, #12]
 8001584:	0a1b      	lsrs	r3, r3, #8
 8001586:	f003 0307 	and.w	r3, r3, #7
}
 800158a:	4618      	mov	r0, r3
 800158c:	46bd      	mov	sp, r7
 800158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001592:	4770      	bx	lr
 8001594:	e000ed00 	.word	0xe000ed00

08001598 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001598:	b480      	push	{r7}
 800159a:	b083      	sub	sp, #12
 800159c:	af00      	add	r7, sp, #0
 800159e:	4603      	mov	r3, r0
 80015a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	db0b      	blt.n	80015c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015aa:	79fb      	ldrb	r3, [r7, #7]
 80015ac:	f003 021f 	and.w	r2, r3, #31
 80015b0:	4907      	ldr	r1, [pc, #28]	; (80015d0 <__NVIC_EnableIRQ+0x38>)
 80015b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015b6:	095b      	lsrs	r3, r3, #5
 80015b8:	2001      	movs	r0, #1
 80015ba:	fa00 f202 	lsl.w	r2, r0, r2
 80015be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015c2:	bf00      	nop
 80015c4:	370c      	adds	r7, #12
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr
 80015ce:	bf00      	nop
 80015d0:	e000e100 	.word	0xe000e100

080015d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b083      	sub	sp, #12
 80015d8:	af00      	add	r7, sp, #0
 80015da:	4603      	mov	r3, r0
 80015dc:	6039      	str	r1, [r7, #0]
 80015de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	db0a      	blt.n	80015fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	b2da      	uxtb	r2, r3
 80015ec:	490c      	ldr	r1, [pc, #48]	; (8001620 <__NVIC_SetPriority+0x4c>)
 80015ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f2:	0112      	lsls	r2, r2, #4
 80015f4:	b2d2      	uxtb	r2, r2
 80015f6:	440b      	add	r3, r1
 80015f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015fc:	e00a      	b.n	8001614 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	b2da      	uxtb	r2, r3
 8001602:	4908      	ldr	r1, [pc, #32]	; (8001624 <__NVIC_SetPriority+0x50>)
 8001604:	79fb      	ldrb	r3, [r7, #7]
 8001606:	f003 030f 	and.w	r3, r3, #15
 800160a:	3b04      	subs	r3, #4
 800160c:	0112      	lsls	r2, r2, #4
 800160e:	b2d2      	uxtb	r2, r2
 8001610:	440b      	add	r3, r1
 8001612:	761a      	strb	r2, [r3, #24]
}
 8001614:	bf00      	nop
 8001616:	370c      	adds	r7, #12
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr
 8001620:	e000e100 	.word	0xe000e100
 8001624:	e000ed00 	.word	0xe000ed00

08001628 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001628:	b480      	push	{r7}
 800162a:	b089      	sub	sp, #36	; 0x24
 800162c:	af00      	add	r7, sp, #0
 800162e:	60f8      	str	r0, [r7, #12]
 8001630:	60b9      	str	r1, [r7, #8]
 8001632:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	f003 0307 	and.w	r3, r3, #7
 800163a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800163c:	69fb      	ldr	r3, [r7, #28]
 800163e:	f1c3 0307 	rsb	r3, r3, #7
 8001642:	2b04      	cmp	r3, #4
 8001644:	bf28      	it	cs
 8001646:	2304      	movcs	r3, #4
 8001648:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	3304      	adds	r3, #4
 800164e:	2b06      	cmp	r3, #6
 8001650:	d902      	bls.n	8001658 <NVIC_EncodePriority+0x30>
 8001652:	69fb      	ldr	r3, [r7, #28]
 8001654:	3b03      	subs	r3, #3
 8001656:	e000      	b.n	800165a <NVIC_EncodePriority+0x32>
 8001658:	2300      	movs	r3, #0
 800165a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800165c:	f04f 32ff 	mov.w	r2, #4294967295
 8001660:	69bb      	ldr	r3, [r7, #24]
 8001662:	fa02 f303 	lsl.w	r3, r2, r3
 8001666:	43da      	mvns	r2, r3
 8001668:	68bb      	ldr	r3, [r7, #8]
 800166a:	401a      	ands	r2, r3
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001670:	f04f 31ff 	mov.w	r1, #4294967295
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	fa01 f303 	lsl.w	r3, r1, r3
 800167a:	43d9      	mvns	r1, r3
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001680:	4313      	orrs	r3, r2
         );
}
 8001682:	4618      	mov	r0, r3
 8001684:	3724      	adds	r7, #36	; 0x24
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr
	...

08001690 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	3b01      	subs	r3, #1
 800169c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016a0:	d301      	bcc.n	80016a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016a2:	2301      	movs	r3, #1
 80016a4:	e00f      	b.n	80016c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016a6:	4a0a      	ldr	r2, [pc, #40]	; (80016d0 <SysTick_Config+0x40>)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	3b01      	subs	r3, #1
 80016ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016ae:	210f      	movs	r1, #15
 80016b0:	f04f 30ff 	mov.w	r0, #4294967295
 80016b4:	f7ff ff8e 	bl	80015d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016b8:	4b05      	ldr	r3, [pc, #20]	; (80016d0 <SysTick_Config+0x40>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016be:	4b04      	ldr	r3, [pc, #16]	; (80016d0 <SysTick_Config+0x40>)
 80016c0:	2207      	movs	r2, #7
 80016c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016c4:	2300      	movs	r3, #0
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	3708      	adds	r7, #8
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	e000e010 	.word	0xe000e010

080016d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016dc:	6878      	ldr	r0, [r7, #4]
 80016de:	f7ff ff29 	bl	8001534 <__NVIC_SetPriorityGrouping>
}
 80016e2:	bf00      	nop
 80016e4:	3708      	adds	r7, #8
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}

080016ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016ea:	b580      	push	{r7, lr}
 80016ec:	b086      	sub	sp, #24
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	4603      	mov	r3, r0
 80016f2:	60b9      	str	r1, [r7, #8]
 80016f4:	607a      	str	r2, [r7, #4]
 80016f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80016f8:	2300      	movs	r3, #0
 80016fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016fc:	f7ff ff3e 	bl	800157c <__NVIC_GetPriorityGrouping>
 8001700:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001702:	687a      	ldr	r2, [r7, #4]
 8001704:	68b9      	ldr	r1, [r7, #8]
 8001706:	6978      	ldr	r0, [r7, #20]
 8001708:	f7ff ff8e 	bl	8001628 <NVIC_EncodePriority>
 800170c:	4602      	mov	r2, r0
 800170e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001712:	4611      	mov	r1, r2
 8001714:	4618      	mov	r0, r3
 8001716:	f7ff ff5d 	bl	80015d4 <__NVIC_SetPriority>
}
 800171a:	bf00      	nop
 800171c:	3718      	adds	r7, #24
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}

08001722 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001722:	b580      	push	{r7, lr}
 8001724:	b082      	sub	sp, #8
 8001726:	af00      	add	r7, sp, #0
 8001728:	4603      	mov	r3, r0
 800172a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800172c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001730:	4618      	mov	r0, r3
 8001732:	f7ff ff31 	bl	8001598 <__NVIC_EnableIRQ>
}
 8001736:	bf00      	nop
 8001738:	3708      	adds	r7, #8
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}

0800173e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800173e:	b580      	push	{r7, lr}
 8001740:	b082      	sub	sp, #8
 8001742:	af00      	add	r7, sp, #0
 8001744:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	f7ff ffa2 	bl	8001690 <SysTick_Config>
 800174c:	4603      	mov	r3, r0
}
 800174e:	4618      	mov	r0, r3
 8001750:	3708      	adds	r7, #8
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}

08001756 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001756:	b580      	push	{r7, lr}
 8001758:	b084      	sub	sp, #16
 800175a:	af00      	add	r7, sp, #0
 800175c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001762:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001764:	f7ff feda 	bl	800151c <HAL_GetTick>
 8001768:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001770:	b2db      	uxtb	r3, r3
 8001772:	2b02      	cmp	r3, #2
 8001774:	d008      	beq.n	8001788 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2280      	movs	r2, #128	; 0x80
 800177a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2200      	movs	r2, #0
 8001780:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001784:	2301      	movs	r3, #1
 8001786:	e052      	b.n	800182e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f022 0216 	bic.w	r2, r2, #22
 8001796:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	695a      	ldr	r2, [r3, #20]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80017a6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d103      	bne.n	80017b8 <HAL_DMA_Abort+0x62>
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d007      	beq.n	80017c8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f022 0208 	bic.w	r2, r2, #8
 80017c6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f022 0201 	bic.w	r2, r2, #1
 80017d6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017d8:	e013      	b.n	8001802 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80017da:	f7ff fe9f 	bl	800151c <HAL_GetTick>
 80017de:	4602      	mov	r2, r0
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	1ad3      	subs	r3, r2, r3
 80017e4:	2b05      	cmp	r3, #5
 80017e6:	d90c      	bls.n	8001802 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2220      	movs	r2, #32
 80017ec:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2203      	movs	r2, #3
 80017f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2200      	movs	r2, #0
 80017fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80017fe:	2303      	movs	r3, #3
 8001800:	e015      	b.n	800182e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f003 0301 	and.w	r3, r3, #1
 800180c:	2b00      	cmp	r3, #0
 800180e:	d1e4      	bne.n	80017da <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001814:	223f      	movs	r2, #63	; 0x3f
 8001816:	409a      	lsls	r2, r3
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2201      	movs	r2, #1
 8001820:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2200      	movs	r2, #0
 8001828:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 800182c:	2300      	movs	r3, #0
}
 800182e:	4618      	mov	r0, r3
 8001830:	3710      	adds	r7, #16
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}

08001836 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001836:	b480      	push	{r7}
 8001838:	b083      	sub	sp, #12
 800183a:	af00      	add	r7, sp, #0
 800183c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001844:	b2db      	uxtb	r3, r3
 8001846:	2b02      	cmp	r3, #2
 8001848:	d004      	beq.n	8001854 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2280      	movs	r2, #128	; 0x80
 800184e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001850:	2301      	movs	r3, #1
 8001852:	e00c      	b.n	800186e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2205      	movs	r2, #5
 8001858:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	681a      	ldr	r2, [r3, #0]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f022 0201 	bic.w	r2, r2, #1
 800186a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800186c:	2300      	movs	r3, #0
}
 800186e:	4618      	mov	r0, r3
 8001870:	370c      	adds	r7, #12
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr
	...

0800187c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800187c:	b480      	push	{r7}
 800187e:	b089      	sub	sp, #36	; 0x24
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
 8001884:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001886:	2300      	movs	r3, #0
 8001888:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800188a:	2300      	movs	r3, #0
 800188c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800188e:	2300      	movs	r3, #0
 8001890:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001892:	2300      	movs	r3, #0
 8001894:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001896:	2300      	movs	r3, #0
 8001898:	61fb      	str	r3, [r7, #28]
 800189a:	e175      	b.n	8001b88 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800189c:	2201      	movs	r2, #1
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	fa02 f303 	lsl.w	r3, r2, r3
 80018a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	697a      	ldr	r2, [r7, #20]
 80018ac:	4013      	ands	r3, r2
 80018ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80018b0:	693a      	ldr	r2, [r7, #16]
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	429a      	cmp	r2, r3
 80018b6:	f040 8164 	bne.w	8001b82 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	f003 0303 	and.w	r3, r3, #3
 80018c2:	2b01      	cmp	r3, #1
 80018c4:	d005      	beq.n	80018d2 <HAL_GPIO_Init+0x56>
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	f003 0303 	and.w	r3, r3, #3
 80018ce:	2b02      	cmp	r3, #2
 80018d0:	d130      	bne.n	8001934 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	689b      	ldr	r3, [r3, #8]
 80018d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80018d8:	69fb      	ldr	r3, [r7, #28]
 80018da:	005b      	lsls	r3, r3, #1
 80018dc:	2203      	movs	r2, #3
 80018de:	fa02 f303 	lsl.w	r3, r2, r3
 80018e2:	43db      	mvns	r3, r3
 80018e4:	69ba      	ldr	r2, [r7, #24]
 80018e6:	4013      	ands	r3, r2
 80018e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	68da      	ldr	r2, [r3, #12]
 80018ee:	69fb      	ldr	r3, [r7, #28]
 80018f0:	005b      	lsls	r3, r3, #1
 80018f2:	fa02 f303 	lsl.w	r3, r2, r3
 80018f6:	69ba      	ldr	r2, [r7, #24]
 80018f8:	4313      	orrs	r3, r2
 80018fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	69ba      	ldr	r2, [r7, #24]
 8001900:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001908:	2201      	movs	r2, #1
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	fa02 f303 	lsl.w	r3, r2, r3
 8001910:	43db      	mvns	r3, r3
 8001912:	69ba      	ldr	r2, [r7, #24]
 8001914:	4013      	ands	r3, r2
 8001916:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	091b      	lsrs	r3, r3, #4
 800191e:	f003 0201 	and.w	r2, r3, #1
 8001922:	69fb      	ldr	r3, [r7, #28]
 8001924:	fa02 f303 	lsl.w	r3, r2, r3
 8001928:	69ba      	ldr	r2, [r7, #24]
 800192a:	4313      	orrs	r3, r2
 800192c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	69ba      	ldr	r2, [r7, #24]
 8001932:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	f003 0303 	and.w	r3, r3, #3
 800193c:	2b03      	cmp	r3, #3
 800193e:	d017      	beq.n	8001970 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	68db      	ldr	r3, [r3, #12]
 8001944:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001946:	69fb      	ldr	r3, [r7, #28]
 8001948:	005b      	lsls	r3, r3, #1
 800194a:	2203      	movs	r2, #3
 800194c:	fa02 f303 	lsl.w	r3, r2, r3
 8001950:	43db      	mvns	r3, r3
 8001952:	69ba      	ldr	r2, [r7, #24]
 8001954:	4013      	ands	r3, r2
 8001956:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	689a      	ldr	r2, [r3, #8]
 800195c:	69fb      	ldr	r3, [r7, #28]
 800195e:	005b      	lsls	r3, r3, #1
 8001960:	fa02 f303 	lsl.w	r3, r2, r3
 8001964:	69ba      	ldr	r2, [r7, #24]
 8001966:	4313      	orrs	r3, r2
 8001968:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	69ba      	ldr	r2, [r7, #24]
 800196e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	f003 0303 	and.w	r3, r3, #3
 8001978:	2b02      	cmp	r3, #2
 800197a:	d123      	bne.n	80019c4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800197c:	69fb      	ldr	r3, [r7, #28]
 800197e:	08da      	lsrs	r2, r3, #3
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	3208      	adds	r2, #8
 8001984:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001988:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	f003 0307 	and.w	r3, r3, #7
 8001990:	009b      	lsls	r3, r3, #2
 8001992:	220f      	movs	r2, #15
 8001994:	fa02 f303 	lsl.w	r3, r2, r3
 8001998:	43db      	mvns	r3, r3
 800199a:	69ba      	ldr	r2, [r7, #24]
 800199c:	4013      	ands	r3, r2
 800199e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	691a      	ldr	r2, [r3, #16]
 80019a4:	69fb      	ldr	r3, [r7, #28]
 80019a6:	f003 0307 	and.w	r3, r3, #7
 80019aa:	009b      	lsls	r3, r3, #2
 80019ac:	fa02 f303 	lsl.w	r3, r2, r3
 80019b0:	69ba      	ldr	r2, [r7, #24]
 80019b2:	4313      	orrs	r3, r2
 80019b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80019b6:	69fb      	ldr	r3, [r7, #28]
 80019b8:	08da      	lsrs	r2, r3, #3
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	3208      	adds	r2, #8
 80019be:	69b9      	ldr	r1, [r7, #24]
 80019c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80019ca:	69fb      	ldr	r3, [r7, #28]
 80019cc:	005b      	lsls	r3, r3, #1
 80019ce:	2203      	movs	r2, #3
 80019d0:	fa02 f303 	lsl.w	r3, r2, r3
 80019d4:	43db      	mvns	r3, r3
 80019d6:	69ba      	ldr	r2, [r7, #24]
 80019d8:	4013      	ands	r3, r2
 80019da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	f003 0203 	and.w	r2, r3, #3
 80019e4:	69fb      	ldr	r3, [r7, #28]
 80019e6:	005b      	lsls	r3, r3, #1
 80019e8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ec:	69ba      	ldr	r2, [r7, #24]
 80019ee:	4313      	orrs	r3, r2
 80019f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	69ba      	ldr	r2, [r7, #24]
 80019f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	f000 80be 	beq.w	8001b82 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a06:	4b66      	ldr	r3, [pc, #408]	; (8001ba0 <HAL_GPIO_Init+0x324>)
 8001a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a0a:	4a65      	ldr	r2, [pc, #404]	; (8001ba0 <HAL_GPIO_Init+0x324>)
 8001a0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a10:	6453      	str	r3, [r2, #68]	; 0x44
 8001a12:	4b63      	ldr	r3, [pc, #396]	; (8001ba0 <HAL_GPIO_Init+0x324>)
 8001a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a1a:	60fb      	str	r3, [r7, #12]
 8001a1c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001a1e:	4a61      	ldr	r2, [pc, #388]	; (8001ba4 <HAL_GPIO_Init+0x328>)
 8001a20:	69fb      	ldr	r3, [r7, #28]
 8001a22:	089b      	lsrs	r3, r3, #2
 8001a24:	3302      	adds	r3, #2
 8001a26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001a2c:	69fb      	ldr	r3, [r7, #28]
 8001a2e:	f003 0303 	and.w	r3, r3, #3
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	220f      	movs	r2, #15
 8001a36:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3a:	43db      	mvns	r3, r3
 8001a3c:	69ba      	ldr	r2, [r7, #24]
 8001a3e:	4013      	ands	r3, r2
 8001a40:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	4a58      	ldr	r2, [pc, #352]	; (8001ba8 <HAL_GPIO_Init+0x32c>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d037      	beq.n	8001aba <HAL_GPIO_Init+0x23e>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	4a57      	ldr	r2, [pc, #348]	; (8001bac <HAL_GPIO_Init+0x330>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d031      	beq.n	8001ab6 <HAL_GPIO_Init+0x23a>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	4a56      	ldr	r2, [pc, #344]	; (8001bb0 <HAL_GPIO_Init+0x334>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d02b      	beq.n	8001ab2 <HAL_GPIO_Init+0x236>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	4a55      	ldr	r2, [pc, #340]	; (8001bb4 <HAL_GPIO_Init+0x338>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d025      	beq.n	8001aae <HAL_GPIO_Init+0x232>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	4a54      	ldr	r2, [pc, #336]	; (8001bb8 <HAL_GPIO_Init+0x33c>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d01f      	beq.n	8001aaa <HAL_GPIO_Init+0x22e>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	4a53      	ldr	r2, [pc, #332]	; (8001bbc <HAL_GPIO_Init+0x340>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d019      	beq.n	8001aa6 <HAL_GPIO_Init+0x22a>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	4a52      	ldr	r2, [pc, #328]	; (8001bc0 <HAL_GPIO_Init+0x344>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d013      	beq.n	8001aa2 <HAL_GPIO_Init+0x226>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	4a51      	ldr	r2, [pc, #324]	; (8001bc4 <HAL_GPIO_Init+0x348>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d00d      	beq.n	8001a9e <HAL_GPIO_Init+0x222>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	4a50      	ldr	r2, [pc, #320]	; (8001bc8 <HAL_GPIO_Init+0x34c>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d007      	beq.n	8001a9a <HAL_GPIO_Init+0x21e>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	4a4f      	ldr	r2, [pc, #316]	; (8001bcc <HAL_GPIO_Init+0x350>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d101      	bne.n	8001a96 <HAL_GPIO_Init+0x21a>
 8001a92:	2309      	movs	r3, #9
 8001a94:	e012      	b.n	8001abc <HAL_GPIO_Init+0x240>
 8001a96:	230a      	movs	r3, #10
 8001a98:	e010      	b.n	8001abc <HAL_GPIO_Init+0x240>
 8001a9a:	2308      	movs	r3, #8
 8001a9c:	e00e      	b.n	8001abc <HAL_GPIO_Init+0x240>
 8001a9e:	2307      	movs	r3, #7
 8001aa0:	e00c      	b.n	8001abc <HAL_GPIO_Init+0x240>
 8001aa2:	2306      	movs	r3, #6
 8001aa4:	e00a      	b.n	8001abc <HAL_GPIO_Init+0x240>
 8001aa6:	2305      	movs	r3, #5
 8001aa8:	e008      	b.n	8001abc <HAL_GPIO_Init+0x240>
 8001aaa:	2304      	movs	r3, #4
 8001aac:	e006      	b.n	8001abc <HAL_GPIO_Init+0x240>
 8001aae:	2303      	movs	r3, #3
 8001ab0:	e004      	b.n	8001abc <HAL_GPIO_Init+0x240>
 8001ab2:	2302      	movs	r3, #2
 8001ab4:	e002      	b.n	8001abc <HAL_GPIO_Init+0x240>
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e000      	b.n	8001abc <HAL_GPIO_Init+0x240>
 8001aba:	2300      	movs	r3, #0
 8001abc:	69fa      	ldr	r2, [r7, #28]
 8001abe:	f002 0203 	and.w	r2, r2, #3
 8001ac2:	0092      	lsls	r2, r2, #2
 8001ac4:	4093      	lsls	r3, r2
 8001ac6:	69ba      	ldr	r2, [r7, #24]
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001acc:	4935      	ldr	r1, [pc, #212]	; (8001ba4 <HAL_GPIO_Init+0x328>)
 8001ace:	69fb      	ldr	r3, [r7, #28]
 8001ad0:	089b      	lsrs	r3, r3, #2
 8001ad2:	3302      	adds	r3, #2
 8001ad4:	69ba      	ldr	r2, [r7, #24]
 8001ad6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ada:	4b3d      	ldr	r3, [pc, #244]	; (8001bd0 <HAL_GPIO_Init+0x354>)
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	43db      	mvns	r3, r3
 8001ae4:	69ba      	ldr	r2, [r7, #24]
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d003      	beq.n	8001afe <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001af6:	69ba      	ldr	r2, [r7, #24]
 8001af8:	693b      	ldr	r3, [r7, #16]
 8001afa:	4313      	orrs	r3, r2
 8001afc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001afe:	4a34      	ldr	r2, [pc, #208]	; (8001bd0 <HAL_GPIO_Init+0x354>)
 8001b00:	69bb      	ldr	r3, [r7, #24]
 8001b02:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b04:	4b32      	ldr	r3, [pc, #200]	; (8001bd0 <HAL_GPIO_Init+0x354>)
 8001b06:	68db      	ldr	r3, [r3, #12]
 8001b08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	43db      	mvns	r3, r3
 8001b0e:	69ba      	ldr	r2, [r7, #24]
 8001b10:	4013      	ands	r3, r2
 8001b12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d003      	beq.n	8001b28 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001b20:	69ba      	ldr	r2, [r7, #24]
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	4313      	orrs	r3, r2
 8001b26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b28:	4a29      	ldr	r2, [pc, #164]	; (8001bd0 <HAL_GPIO_Init+0x354>)
 8001b2a:	69bb      	ldr	r3, [r7, #24]
 8001b2c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b2e:	4b28      	ldr	r3, [pc, #160]	; (8001bd0 <HAL_GPIO_Init+0x354>)
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b34:	693b      	ldr	r3, [r7, #16]
 8001b36:	43db      	mvns	r3, r3
 8001b38:	69ba      	ldr	r2, [r7, #24]
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d003      	beq.n	8001b52 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001b4a:	69ba      	ldr	r2, [r7, #24]
 8001b4c:	693b      	ldr	r3, [r7, #16]
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b52:	4a1f      	ldr	r2, [pc, #124]	; (8001bd0 <HAL_GPIO_Init+0x354>)
 8001b54:	69bb      	ldr	r3, [r7, #24]
 8001b56:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b58:	4b1d      	ldr	r3, [pc, #116]	; (8001bd0 <HAL_GPIO_Init+0x354>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	43db      	mvns	r3, r3
 8001b62:	69ba      	ldr	r2, [r7, #24]
 8001b64:	4013      	ands	r3, r2
 8001b66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d003      	beq.n	8001b7c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001b74:	69ba      	ldr	r2, [r7, #24]
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b7c:	4a14      	ldr	r2, [pc, #80]	; (8001bd0 <HAL_GPIO_Init+0x354>)
 8001b7e:	69bb      	ldr	r3, [r7, #24]
 8001b80:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	3301      	adds	r3, #1
 8001b86:	61fb      	str	r3, [r7, #28]
 8001b88:	69fb      	ldr	r3, [r7, #28]
 8001b8a:	2b0f      	cmp	r3, #15
 8001b8c:	f67f ae86 	bls.w	800189c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001b90:	bf00      	nop
 8001b92:	bf00      	nop
 8001b94:	3724      	adds	r7, #36	; 0x24
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr
 8001b9e:	bf00      	nop
 8001ba0:	40023800 	.word	0x40023800
 8001ba4:	40013800 	.word	0x40013800
 8001ba8:	40020000 	.word	0x40020000
 8001bac:	40020400 	.word	0x40020400
 8001bb0:	40020800 	.word	0x40020800
 8001bb4:	40020c00 	.word	0x40020c00
 8001bb8:	40021000 	.word	0x40021000
 8001bbc:	40021400 	.word	0x40021400
 8001bc0:	40021800 	.word	0x40021800
 8001bc4:	40021c00 	.word	0x40021c00
 8001bc8:	40022000 	.word	0x40022000
 8001bcc:	40022400 	.word	0x40022400
 8001bd0:	40013c00 	.word	0x40013c00

08001bd4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b083      	sub	sp, #12
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
 8001bdc:	460b      	mov	r3, r1
 8001bde:	807b      	strh	r3, [r7, #2]
 8001be0:	4613      	mov	r3, r2
 8001be2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001be4:	787b      	ldrb	r3, [r7, #1]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d003      	beq.n	8001bf2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bea:	887a      	ldrh	r2, [r7, #2]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001bf0:	e003      	b.n	8001bfa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001bf2:	887b      	ldrh	r3, [r7, #2]
 8001bf4:	041a      	lsls	r2, r3, #16
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	619a      	str	r2, [r3, #24]
}
 8001bfa:	bf00      	nop
 8001bfc:	370c      	adds	r7, #12
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
	...

08001c08 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001c12:	4b23      	ldr	r3, [pc, #140]	; (8001ca0 <HAL_PWREx_EnableOverDrive+0x98>)
 8001c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c16:	4a22      	ldr	r2, [pc, #136]	; (8001ca0 <HAL_PWREx_EnableOverDrive+0x98>)
 8001c18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c1c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c1e:	4b20      	ldr	r3, [pc, #128]	; (8001ca0 <HAL_PWREx_EnableOverDrive+0x98>)
 8001c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c26:	603b      	str	r3, [r7, #0]
 8001c28:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001c2a:	4b1e      	ldr	r3, [pc, #120]	; (8001ca4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a1d      	ldr	r2, [pc, #116]	; (8001ca4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001c30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c34:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c36:	f7ff fc71 	bl	800151c <HAL_GetTick>
 8001c3a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001c3c:	e009      	b.n	8001c52 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001c3e:	f7ff fc6d 	bl	800151c <HAL_GetTick>
 8001c42:	4602      	mov	r2, r0
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	1ad3      	subs	r3, r2, r3
 8001c48:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001c4c:	d901      	bls.n	8001c52 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001c4e:	2303      	movs	r3, #3
 8001c50:	e022      	b.n	8001c98 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001c52:	4b14      	ldr	r3, [pc, #80]	; (8001ca4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c5e:	d1ee      	bne.n	8001c3e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001c60:	4b10      	ldr	r3, [pc, #64]	; (8001ca4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a0f      	ldr	r2, [pc, #60]	; (8001ca4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001c66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c6a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c6c:	f7ff fc56 	bl	800151c <HAL_GetTick>
 8001c70:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001c72:	e009      	b.n	8001c88 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001c74:	f7ff fc52 	bl	800151c <HAL_GetTick>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	1ad3      	subs	r3, r2, r3
 8001c7e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001c82:	d901      	bls.n	8001c88 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001c84:	2303      	movs	r3, #3
 8001c86:	e007      	b.n	8001c98 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001c88:	4b06      	ldr	r3, [pc, #24]	; (8001ca4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c90:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001c94:	d1ee      	bne.n	8001c74 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001c96:	2300      	movs	r3, #0
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	3708      	adds	r7, #8
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	40023800 	.word	0x40023800
 8001ca4:	40007000 	.word	0x40007000

08001ca8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b086      	sub	sp, #24
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d101      	bne.n	8001cbe <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e29b      	b.n	80021f6 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 0301 	and.w	r3, r3, #1
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	f000 8087 	beq.w	8001dda <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ccc:	4b96      	ldr	r3, [pc, #600]	; (8001f28 <HAL_RCC_OscConfig+0x280>)
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	f003 030c 	and.w	r3, r3, #12
 8001cd4:	2b04      	cmp	r3, #4
 8001cd6:	d00c      	beq.n	8001cf2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001cd8:	4b93      	ldr	r3, [pc, #588]	; (8001f28 <HAL_RCC_OscConfig+0x280>)
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	f003 030c 	and.w	r3, r3, #12
 8001ce0:	2b08      	cmp	r3, #8
 8001ce2:	d112      	bne.n	8001d0a <HAL_RCC_OscConfig+0x62>
 8001ce4:	4b90      	ldr	r3, [pc, #576]	; (8001f28 <HAL_RCC_OscConfig+0x280>)
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001cf0:	d10b      	bne.n	8001d0a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cf2:	4b8d      	ldr	r3, [pc, #564]	; (8001f28 <HAL_RCC_OscConfig+0x280>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d06c      	beq.n	8001dd8 <HAL_RCC_OscConfig+0x130>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d168      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	e275      	b.n	80021f6 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d12:	d106      	bne.n	8001d22 <HAL_RCC_OscConfig+0x7a>
 8001d14:	4b84      	ldr	r3, [pc, #528]	; (8001f28 <HAL_RCC_OscConfig+0x280>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a83      	ldr	r2, [pc, #524]	; (8001f28 <HAL_RCC_OscConfig+0x280>)
 8001d1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d1e:	6013      	str	r3, [r2, #0]
 8001d20:	e02e      	b.n	8001d80 <HAL_RCC_OscConfig+0xd8>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d10c      	bne.n	8001d44 <HAL_RCC_OscConfig+0x9c>
 8001d2a:	4b7f      	ldr	r3, [pc, #508]	; (8001f28 <HAL_RCC_OscConfig+0x280>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a7e      	ldr	r2, [pc, #504]	; (8001f28 <HAL_RCC_OscConfig+0x280>)
 8001d30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d34:	6013      	str	r3, [r2, #0]
 8001d36:	4b7c      	ldr	r3, [pc, #496]	; (8001f28 <HAL_RCC_OscConfig+0x280>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a7b      	ldr	r2, [pc, #492]	; (8001f28 <HAL_RCC_OscConfig+0x280>)
 8001d3c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d40:	6013      	str	r3, [r2, #0]
 8001d42:	e01d      	b.n	8001d80 <HAL_RCC_OscConfig+0xd8>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d4c:	d10c      	bne.n	8001d68 <HAL_RCC_OscConfig+0xc0>
 8001d4e:	4b76      	ldr	r3, [pc, #472]	; (8001f28 <HAL_RCC_OscConfig+0x280>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a75      	ldr	r2, [pc, #468]	; (8001f28 <HAL_RCC_OscConfig+0x280>)
 8001d54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d58:	6013      	str	r3, [r2, #0]
 8001d5a:	4b73      	ldr	r3, [pc, #460]	; (8001f28 <HAL_RCC_OscConfig+0x280>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a72      	ldr	r2, [pc, #456]	; (8001f28 <HAL_RCC_OscConfig+0x280>)
 8001d60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d64:	6013      	str	r3, [r2, #0]
 8001d66:	e00b      	b.n	8001d80 <HAL_RCC_OscConfig+0xd8>
 8001d68:	4b6f      	ldr	r3, [pc, #444]	; (8001f28 <HAL_RCC_OscConfig+0x280>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a6e      	ldr	r2, [pc, #440]	; (8001f28 <HAL_RCC_OscConfig+0x280>)
 8001d6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d72:	6013      	str	r3, [r2, #0]
 8001d74:	4b6c      	ldr	r3, [pc, #432]	; (8001f28 <HAL_RCC_OscConfig+0x280>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a6b      	ldr	r2, [pc, #428]	; (8001f28 <HAL_RCC_OscConfig+0x280>)
 8001d7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d013      	beq.n	8001db0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d88:	f7ff fbc8 	bl	800151c <HAL_GetTick>
 8001d8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d8e:	e008      	b.n	8001da2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d90:	f7ff fbc4 	bl	800151c <HAL_GetTick>
 8001d94:	4602      	mov	r2, r0
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	1ad3      	subs	r3, r2, r3
 8001d9a:	2b64      	cmp	r3, #100	; 0x64
 8001d9c:	d901      	bls.n	8001da2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001d9e:	2303      	movs	r3, #3
 8001da0:	e229      	b.n	80021f6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001da2:	4b61      	ldr	r3, [pc, #388]	; (8001f28 <HAL_RCC_OscConfig+0x280>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d0f0      	beq.n	8001d90 <HAL_RCC_OscConfig+0xe8>
 8001dae:	e014      	b.n	8001dda <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001db0:	f7ff fbb4 	bl	800151c <HAL_GetTick>
 8001db4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001db6:	e008      	b.n	8001dca <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001db8:	f7ff fbb0 	bl	800151c <HAL_GetTick>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	1ad3      	subs	r3, r2, r3
 8001dc2:	2b64      	cmp	r3, #100	; 0x64
 8001dc4:	d901      	bls.n	8001dca <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001dc6:	2303      	movs	r3, #3
 8001dc8:	e215      	b.n	80021f6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dca:	4b57      	ldr	r3, [pc, #348]	; (8001f28 <HAL_RCC_OscConfig+0x280>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d1f0      	bne.n	8001db8 <HAL_RCC_OscConfig+0x110>
 8001dd6:	e000      	b.n	8001dda <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f003 0302 	and.w	r3, r3, #2
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d069      	beq.n	8001eba <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001de6:	4b50      	ldr	r3, [pc, #320]	; (8001f28 <HAL_RCC_OscConfig+0x280>)
 8001de8:	689b      	ldr	r3, [r3, #8]
 8001dea:	f003 030c 	and.w	r3, r3, #12
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d00b      	beq.n	8001e0a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001df2:	4b4d      	ldr	r3, [pc, #308]	; (8001f28 <HAL_RCC_OscConfig+0x280>)
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	f003 030c 	and.w	r3, r3, #12
 8001dfa:	2b08      	cmp	r3, #8
 8001dfc:	d11c      	bne.n	8001e38 <HAL_RCC_OscConfig+0x190>
 8001dfe:	4b4a      	ldr	r3, [pc, #296]	; (8001f28 <HAL_RCC_OscConfig+0x280>)
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d116      	bne.n	8001e38 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e0a:	4b47      	ldr	r3, [pc, #284]	; (8001f28 <HAL_RCC_OscConfig+0x280>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 0302 	and.w	r3, r3, #2
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d005      	beq.n	8001e22 <HAL_RCC_OscConfig+0x17a>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	68db      	ldr	r3, [r3, #12]
 8001e1a:	2b01      	cmp	r3, #1
 8001e1c:	d001      	beq.n	8001e22 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e1e9      	b.n	80021f6 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e22:	4b41      	ldr	r3, [pc, #260]	; (8001f28 <HAL_RCC_OscConfig+0x280>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	691b      	ldr	r3, [r3, #16]
 8001e2e:	00db      	lsls	r3, r3, #3
 8001e30:	493d      	ldr	r1, [pc, #244]	; (8001f28 <HAL_RCC_OscConfig+0x280>)
 8001e32:	4313      	orrs	r3, r2
 8001e34:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e36:	e040      	b.n	8001eba <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	68db      	ldr	r3, [r3, #12]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d023      	beq.n	8001e88 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e40:	4b39      	ldr	r3, [pc, #228]	; (8001f28 <HAL_RCC_OscConfig+0x280>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a38      	ldr	r2, [pc, #224]	; (8001f28 <HAL_RCC_OscConfig+0x280>)
 8001e46:	f043 0301 	orr.w	r3, r3, #1
 8001e4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e4c:	f7ff fb66 	bl	800151c <HAL_GetTick>
 8001e50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e52:	e008      	b.n	8001e66 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e54:	f7ff fb62 	bl	800151c <HAL_GetTick>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	2b02      	cmp	r3, #2
 8001e60:	d901      	bls.n	8001e66 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001e62:	2303      	movs	r3, #3
 8001e64:	e1c7      	b.n	80021f6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e66:	4b30      	ldr	r3, [pc, #192]	; (8001f28 <HAL_RCC_OscConfig+0x280>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 0302 	and.w	r3, r3, #2
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d0f0      	beq.n	8001e54 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e72:	4b2d      	ldr	r3, [pc, #180]	; (8001f28 <HAL_RCC_OscConfig+0x280>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	691b      	ldr	r3, [r3, #16]
 8001e7e:	00db      	lsls	r3, r3, #3
 8001e80:	4929      	ldr	r1, [pc, #164]	; (8001f28 <HAL_RCC_OscConfig+0x280>)
 8001e82:	4313      	orrs	r3, r2
 8001e84:	600b      	str	r3, [r1, #0]
 8001e86:	e018      	b.n	8001eba <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e88:	4b27      	ldr	r3, [pc, #156]	; (8001f28 <HAL_RCC_OscConfig+0x280>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a26      	ldr	r2, [pc, #152]	; (8001f28 <HAL_RCC_OscConfig+0x280>)
 8001e8e:	f023 0301 	bic.w	r3, r3, #1
 8001e92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e94:	f7ff fb42 	bl	800151c <HAL_GetTick>
 8001e98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e9a:	e008      	b.n	8001eae <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e9c:	f7ff fb3e 	bl	800151c <HAL_GetTick>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	1ad3      	subs	r3, r2, r3
 8001ea6:	2b02      	cmp	r3, #2
 8001ea8:	d901      	bls.n	8001eae <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001eaa:	2303      	movs	r3, #3
 8001eac:	e1a3      	b.n	80021f6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001eae:	4b1e      	ldr	r3, [pc, #120]	; (8001f28 <HAL_RCC_OscConfig+0x280>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 0302 	and.w	r3, r3, #2
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d1f0      	bne.n	8001e9c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 0308 	and.w	r3, r3, #8
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d038      	beq.n	8001f38 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	695b      	ldr	r3, [r3, #20]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d019      	beq.n	8001f02 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ece:	4b16      	ldr	r3, [pc, #88]	; (8001f28 <HAL_RCC_OscConfig+0x280>)
 8001ed0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ed2:	4a15      	ldr	r2, [pc, #84]	; (8001f28 <HAL_RCC_OscConfig+0x280>)
 8001ed4:	f043 0301 	orr.w	r3, r3, #1
 8001ed8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001eda:	f7ff fb1f 	bl	800151c <HAL_GetTick>
 8001ede:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ee0:	e008      	b.n	8001ef4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ee2:	f7ff fb1b 	bl	800151c <HAL_GetTick>
 8001ee6:	4602      	mov	r2, r0
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	1ad3      	subs	r3, r2, r3
 8001eec:	2b02      	cmp	r3, #2
 8001eee:	d901      	bls.n	8001ef4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001ef0:	2303      	movs	r3, #3
 8001ef2:	e180      	b.n	80021f6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ef4:	4b0c      	ldr	r3, [pc, #48]	; (8001f28 <HAL_RCC_OscConfig+0x280>)
 8001ef6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ef8:	f003 0302 	and.w	r3, r3, #2
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d0f0      	beq.n	8001ee2 <HAL_RCC_OscConfig+0x23a>
 8001f00:	e01a      	b.n	8001f38 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f02:	4b09      	ldr	r3, [pc, #36]	; (8001f28 <HAL_RCC_OscConfig+0x280>)
 8001f04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f06:	4a08      	ldr	r2, [pc, #32]	; (8001f28 <HAL_RCC_OscConfig+0x280>)
 8001f08:	f023 0301 	bic.w	r3, r3, #1
 8001f0c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f0e:	f7ff fb05 	bl	800151c <HAL_GetTick>
 8001f12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f14:	e00a      	b.n	8001f2c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f16:	f7ff fb01 	bl	800151c <HAL_GetTick>
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	1ad3      	subs	r3, r2, r3
 8001f20:	2b02      	cmp	r3, #2
 8001f22:	d903      	bls.n	8001f2c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001f24:	2303      	movs	r3, #3
 8001f26:	e166      	b.n	80021f6 <HAL_RCC_OscConfig+0x54e>
 8001f28:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f2c:	4b92      	ldr	r3, [pc, #584]	; (8002178 <HAL_RCC_OscConfig+0x4d0>)
 8001f2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f30:	f003 0302 	and.w	r3, r3, #2
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d1ee      	bne.n	8001f16 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f003 0304 	and.w	r3, r3, #4
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	f000 80a4 	beq.w	800208e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f46:	4b8c      	ldr	r3, [pc, #560]	; (8002178 <HAL_RCC_OscConfig+0x4d0>)
 8001f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d10d      	bne.n	8001f6e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f52:	4b89      	ldr	r3, [pc, #548]	; (8002178 <HAL_RCC_OscConfig+0x4d0>)
 8001f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f56:	4a88      	ldr	r2, [pc, #544]	; (8002178 <HAL_RCC_OscConfig+0x4d0>)
 8001f58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f5c:	6413      	str	r3, [r2, #64]	; 0x40
 8001f5e:	4b86      	ldr	r3, [pc, #536]	; (8002178 <HAL_RCC_OscConfig+0x4d0>)
 8001f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f66:	60bb      	str	r3, [r7, #8]
 8001f68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f6e:	4b83      	ldr	r3, [pc, #524]	; (800217c <HAL_RCC_OscConfig+0x4d4>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d118      	bne.n	8001fac <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001f7a:	4b80      	ldr	r3, [pc, #512]	; (800217c <HAL_RCC_OscConfig+0x4d4>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a7f      	ldr	r2, [pc, #508]	; (800217c <HAL_RCC_OscConfig+0x4d4>)
 8001f80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f86:	f7ff fac9 	bl	800151c <HAL_GetTick>
 8001f8a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f8c:	e008      	b.n	8001fa0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f8e:	f7ff fac5 	bl	800151c <HAL_GetTick>
 8001f92:	4602      	mov	r2, r0
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	1ad3      	subs	r3, r2, r3
 8001f98:	2b64      	cmp	r3, #100	; 0x64
 8001f9a:	d901      	bls.n	8001fa0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001f9c:	2303      	movs	r3, #3
 8001f9e:	e12a      	b.n	80021f6 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fa0:	4b76      	ldr	r3, [pc, #472]	; (800217c <HAL_RCC_OscConfig+0x4d4>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d0f0      	beq.n	8001f8e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d106      	bne.n	8001fc2 <HAL_RCC_OscConfig+0x31a>
 8001fb4:	4b70      	ldr	r3, [pc, #448]	; (8002178 <HAL_RCC_OscConfig+0x4d0>)
 8001fb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fb8:	4a6f      	ldr	r2, [pc, #444]	; (8002178 <HAL_RCC_OscConfig+0x4d0>)
 8001fba:	f043 0301 	orr.w	r3, r3, #1
 8001fbe:	6713      	str	r3, [r2, #112]	; 0x70
 8001fc0:	e02d      	b.n	800201e <HAL_RCC_OscConfig+0x376>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d10c      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x33c>
 8001fca:	4b6b      	ldr	r3, [pc, #428]	; (8002178 <HAL_RCC_OscConfig+0x4d0>)
 8001fcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fce:	4a6a      	ldr	r2, [pc, #424]	; (8002178 <HAL_RCC_OscConfig+0x4d0>)
 8001fd0:	f023 0301 	bic.w	r3, r3, #1
 8001fd4:	6713      	str	r3, [r2, #112]	; 0x70
 8001fd6:	4b68      	ldr	r3, [pc, #416]	; (8002178 <HAL_RCC_OscConfig+0x4d0>)
 8001fd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fda:	4a67      	ldr	r2, [pc, #412]	; (8002178 <HAL_RCC_OscConfig+0x4d0>)
 8001fdc:	f023 0304 	bic.w	r3, r3, #4
 8001fe0:	6713      	str	r3, [r2, #112]	; 0x70
 8001fe2:	e01c      	b.n	800201e <HAL_RCC_OscConfig+0x376>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	2b05      	cmp	r3, #5
 8001fea:	d10c      	bne.n	8002006 <HAL_RCC_OscConfig+0x35e>
 8001fec:	4b62      	ldr	r3, [pc, #392]	; (8002178 <HAL_RCC_OscConfig+0x4d0>)
 8001fee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ff0:	4a61      	ldr	r2, [pc, #388]	; (8002178 <HAL_RCC_OscConfig+0x4d0>)
 8001ff2:	f043 0304 	orr.w	r3, r3, #4
 8001ff6:	6713      	str	r3, [r2, #112]	; 0x70
 8001ff8:	4b5f      	ldr	r3, [pc, #380]	; (8002178 <HAL_RCC_OscConfig+0x4d0>)
 8001ffa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ffc:	4a5e      	ldr	r2, [pc, #376]	; (8002178 <HAL_RCC_OscConfig+0x4d0>)
 8001ffe:	f043 0301 	orr.w	r3, r3, #1
 8002002:	6713      	str	r3, [r2, #112]	; 0x70
 8002004:	e00b      	b.n	800201e <HAL_RCC_OscConfig+0x376>
 8002006:	4b5c      	ldr	r3, [pc, #368]	; (8002178 <HAL_RCC_OscConfig+0x4d0>)
 8002008:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800200a:	4a5b      	ldr	r2, [pc, #364]	; (8002178 <HAL_RCC_OscConfig+0x4d0>)
 800200c:	f023 0301 	bic.w	r3, r3, #1
 8002010:	6713      	str	r3, [r2, #112]	; 0x70
 8002012:	4b59      	ldr	r3, [pc, #356]	; (8002178 <HAL_RCC_OscConfig+0x4d0>)
 8002014:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002016:	4a58      	ldr	r2, [pc, #352]	; (8002178 <HAL_RCC_OscConfig+0x4d0>)
 8002018:	f023 0304 	bic.w	r3, r3, #4
 800201c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d015      	beq.n	8002052 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002026:	f7ff fa79 	bl	800151c <HAL_GetTick>
 800202a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800202c:	e00a      	b.n	8002044 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800202e:	f7ff fa75 	bl	800151c <HAL_GetTick>
 8002032:	4602      	mov	r2, r0
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	1ad3      	subs	r3, r2, r3
 8002038:	f241 3288 	movw	r2, #5000	; 0x1388
 800203c:	4293      	cmp	r3, r2
 800203e:	d901      	bls.n	8002044 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002040:	2303      	movs	r3, #3
 8002042:	e0d8      	b.n	80021f6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002044:	4b4c      	ldr	r3, [pc, #304]	; (8002178 <HAL_RCC_OscConfig+0x4d0>)
 8002046:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002048:	f003 0302 	and.w	r3, r3, #2
 800204c:	2b00      	cmp	r3, #0
 800204e:	d0ee      	beq.n	800202e <HAL_RCC_OscConfig+0x386>
 8002050:	e014      	b.n	800207c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002052:	f7ff fa63 	bl	800151c <HAL_GetTick>
 8002056:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002058:	e00a      	b.n	8002070 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800205a:	f7ff fa5f 	bl	800151c <HAL_GetTick>
 800205e:	4602      	mov	r2, r0
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	1ad3      	subs	r3, r2, r3
 8002064:	f241 3288 	movw	r2, #5000	; 0x1388
 8002068:	4293      	cmp	r3, r2
 800206a:	d901      	bls.n	8002070 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800206c:	2303      	movs	r3, #3
 800206e:	e0c2      	b.n	80021f6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002070:	4b41      	ldr	r3, [pc, #260]	; (8002178 <HAL_RCC_OscConfig+0x4d0>)
 8002072:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002074:	f003 0302 	and.w	r3, r3, #2
 8002078:	2b00      	cmp	r3, #0
 800207a:	d1ee      	bne.n	800205a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800207c:	7dfb      	ldrb	r3, [r7, #23]
 800207e:	2b01      	cmp	r3, #1
 8002080:	d105      	bne.n	800208e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002082:	4b3d      	ldr	r3, [pc, #244]	; (8002178 <HAL_RCC_OscConfig+0x4d0>)
 8002084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002086:	4a3c      	ldr	r2, [pc, #240]	; (8002178 <HAL_RCC_OscConfig+0x4d0>)
 8002088:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800208c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	699b      	ldr	r3, [r3, #24]
 8002092:	2b00      	cmp	r3, #0
 8002094:	f000 80ae 	beq.w	80021f4 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002098:	4b37      	ldr	r3, [pc, #220]	; (8002178 <HAL_RCC_OscConfig+0x4d0>)
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	f003 030c 	and.w	r3, r3, #12
 80020a0:	2b08      	cmp	r3, #8
 80020a2:	d06d      	beq.n	8002180 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	699b      	ldr	r3, [r3, #24]
 80020a8:	2b02      	cmp	r3, #2
 80020aa:	d14b      	bne.n	8002144 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020ac:	4b32      	ldr	r3, [pc, #200]	; (8002178 <HAL_RCC_OscConfig+0x4d0>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a31      	ldr	r2, [pc, #196]	; (8002178 <HAL_RCC_OscConfig+0x4d0>)
 80020b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80020b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020b8:	f7ff fa30 	bl	800151c <HAL_GetTick>
 80020bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020be:	e008      	b.n	80020d2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020c0:	f7ff fa2c 	bl	800151c <HAL_GetTick>
 80020c4:	4602      	mov	r2, r0
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	1ad3      	subs	r3, r2, r3
 80020ca:	2b02      	cmp	r3, #2
 80020cc:	d901      	bls.n	80020d2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80020ce:	2303      	movs	r3, #3
 80020d0:	e091      	b.n	80021f6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020d2:	4b29      	ldr	r3, [pc, #164]	; (8002178 <HAL_RCC_OscConfig+0x4d0>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d1f0      	bne.n	80020c0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	69da      	ldr	r2, [r3, #28]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6a1b      	ldr	r3, [r3, #32]
 80020e6:	431a      	orrs	r2, r3
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ec:	019b      	lsls	r3, r3, #6
 80020ee:	431a      	orrs	r2, r3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020f4:	085b      	lsrs	r3, r3, #1
 80020f6:	3b01      	subs	r3, #1
 80020f8:	041b      	lsls	r3, r3, #16
 80020fa:	431a      	orrs	r2, r3
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002100:	061b      	lsls	r3, r3, #24
 8002102:	431a      	orrs	r2, r3
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002108:	071b      	lsls	r3, r3, #28
 800210a:	491b      	ldr	r1, [pc, #108]	; (8002178 <HAL_RCC_OscConfig+0x4d0>)
 800210c:	4313      	orrs	r3, r2
 800210e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002110:	4b19      	ldr	r3, [pc, #100]	; (8002178 <HAL_RCC_OscConfig+0x4d0>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a18      	ldr	r2, [pc, #96]	; (8002178 <HAL_RCC_OscConfig+0x4d0>)
 8002116:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800211a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800211c:	f7ff f9fe 	bl	800151c <HAL_GetTick>
 8002120:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002122:	e008      	b.n	8002136 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002124:	f7ff f9fa 	bl	800151c <HAL_GetTick>
 8002128:	4602      	mov	r2, r0
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	2b02      	cmp	r3, #2
 8002130:	d901      	bls.n	8002136 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002132:	2303      	movs	r3, #3
 8002134:	e05f      	b.n	80021f6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002136:	4b10      	ldr	r3, [pc, #64]	; (8002178 <HAL_RCC_OscConfig+0x4d0>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800213e:	2b00      	cmp	r3, #0
 8002140:	d0f0      	beq.n	8002124 <HAL_RCC_OscConfig+0x47c>
 8002142:	e057      	b.n	80021f4 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002144:	4b0c      	ldr	r3, [pc, #48]	; (8002178 <HAL_RCC_OscConfig+0x4d0>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a0b      	ldr	r2, [pc, #44]	; (8002178 <HAL_RCC_OscConfig+0x4d0>)
 800214a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800214e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002150:	f7ff f9e4 	bl	800151c <HAL_GetTick>
 8002154:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002156:	e008      	b.n	800216a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002158:	f7ff f9e0 	bl	800151c <HAL_GetTick>
 800215c:	4602      	mov	r2, r0
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	2b02      	cmp	r3, #2
 8002164:	d901      	bls.n	800216a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002166:	2303      	movs	r3, #3
 8002168:	e045      	b.n	80021f6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800216a:	4b03      	ldr	r3, [pc, #12]	; (8002178 <HAL_RCC_OscConfig+0x4d0>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002172:	2b00      	cmp	r3, #0
 8002174:	d1f0      	bne.n	8002158 <HAL_RCC_OscConfig+0x4b0>
 8002176:	e03d      	b.n	80021f4 <HAL_RCC_OscConfig+0x54c>
 8002178:	40023800 	.word	0x40023800
 800217c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002180:	4b1f      	ldr	r3, [pc, #124]	; (8002200 <HAL_RCC_OscConfig+0x558>)
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	699b      	ldr	r3, [r3, #24]
 800218a:	2b01      	cmp	r3, #1
 800218c:	d030      	beq.n	80021f0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002198:	429a      	cmp	r2, r3
 800219a:	d129      	bne.n	80021f0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021a6:	429a      	cmp	r2, r3
 80021a8:	d122      	bne.n	80021f0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80021aa:	68fa      	ldr	r2, [r7, #12]
 80021ac:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80021b0:	4013      	ands	r3, r2
 80021b2:	687a      	ldr	r2, [r7, #4]
 80021b4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80021b6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d119      	bne.n	80021f0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021c6:	085b      	lsrs	r3, r3, #1
 80021c8:	3b01      	subs	r3, #1
 80021ca:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d10f      	bne.n	80021f0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021da:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80021dc:	429a      	cmp	r2, r3
 80021de:	d107      	bne.n	80021f0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ea:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d001      	beq.n	80021f4 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80021f0:	2301      	movs	r3, #1
 80021f2:	e000      	b.n	80021f6 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80021f4:	2300      	movs	r3, #0
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3718      	adds	r7, #24
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	40023800 	.word	0x40023800

08002204 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b084      	sub	sp, #16
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
 800220c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800220e:	2300      	movs	r3, #0
 8002210:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d101      	bne.n	800221c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	e0d0      	b.n	80023be <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800221c:	4b6a      	ldr	r3, [pc, #424]	; (80023c8 <HAL_RCC_ClockConfig+0x1c4>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f003 030f 	and.w	r3, r3, #15
 8002224:	683a      	ldr	r2, [r7, #0]
 8002226:	429a      	cmp	r2, r3
 8002228:	d910      	bls.n	800224c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800222a:	4b67      	ldr	r3, [pc, #412]	; (80023c8 <HAL_RCC_ClockConfig+0x1c4>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f023 020f 	bic.w	r2, r3, #15
 8002232:	4965      	ldr	r1, [pc, #404]	; (80023c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	4313      	orrs	r3, r2
 8002238:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800223a:	4b63      	ldr	r3, [pc, #396]	; (80023c8 <HAL_RCC_ClockConfig+0x1c4>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 030f 	and.w	r3, r3, #15
 8002242:	683a      	ldr	r2, [r7, #0]
 8002244:	429a      	cmp	r2, r3
 8002246:	d001      	beq.n	800224c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	e0b8      	b.n	80023be <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 0302 	and.w	r3, r3, #2
 8002254:	2b00      	cmp	r3, #0
 8002256:	d020      	beq.n	800229a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 0304 	and.w	r3, r3, #4
 8002260:	2b00      	cmp	r3, #0
 8002262:	d005      	beq.n	8002270 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002264:	4b59      	ldr	r3, [pc, #356]	; (80023cc <HAL_RCC_ClockConfig+0x1c8>)
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	4a58      	ldr	r2, [pc, #352]	; (80023cc <HAL_RCC_ClockConfig+0x1c8>)
 800226a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800226e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 0308 	and.w	r3, r3, #8
 8002278:	2b00      	cmp	r3, #0
 800227a:	d005      	beq.n	8002288 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800227c:	4b53      	ldr	r3, [pc, #332]	; (80023cc <HAL_RCC_ClockConfig+0x1c8>)
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	4a52      	ldr	r2, [pc, #328]	; (80023cc <HAL_RCC_ClockConfig+0x1c8>)
 8002282:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002286:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002288:	4b50      	ldr	r3, [pc, #320]	; (80023cc <HAL_RCC_ClockConfig+0x1c8>)
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	494d      	ldr	r1, [pc, #308]	; (80023cc <HAL_RCC_ClockConfig+0x1c8>)
 8002296:	4313      	orrs	r3, r2
 8002298:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 0301 	and.w	r3, r3, #1
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d040      	beq.n	8002328 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d107      	bne.n	80022be <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022ae:	4b47      	ldr	r3, [pc, #284]	; (80023cc <HAL_RCC_ClockConfig+0x1c8>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d115      	bne.n	80022e6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	e07f      	b.n	80023be <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	2b02      	cmp	r3, #2
 80022c4:	d107      	bne.n	80022d6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022c6:	4b41      	ldr	r3, [pc, #260]	; (80023cc <HAL_RCC_ClockConfig+0x1c8>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d109      	bne.n	80022e6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e073      	b.n	80023be <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022d6:	4b3d      	ldr	r3, [pc, #244]	; (80023cc <HAL_RCC_ClockConfig+0x1c8>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 0302 	and.w	r3, r3, #2
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d101      	bne.n	80022e6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e06b      	b.n	80023be <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022e6:	4b39      	ldr	r3, [pc, #228]	; (80023cc <HAL_RCC_ClockConfig+0x1c8>)
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	f023 0203 	bic.w	r2, r3, #3
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	4936      	ldr	r1, [pc, #216]	; (80023cc <HAL_RCC_ClockConfig+0x1c8>)
 80022f4:	4313      	orrs	r3, r2
 80022f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80022f8:	f7ff f910 	bl	800151c <HAL_GetTick>
 80022fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022fe:	e00a      	b.n	8002316 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002300:	f7ff f90c 	bl	800151c <HAL_GetTick>
 8002304:	4602      	mov	r2, r0
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	1ad3      	subs	r3, r2, r3
 800230a:	f241 3288 	movw	r2, #5000	; 0x1388
 800230e:	4293      	cmp	r3, r2
 8002310:	d901      	bls.n	8002316 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002312:	2303      	movs	r3, #3
 8002314:	e053      	b.n	80023be <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002316:	4b2d      	ldr	r3, [pc, #180]	; (80023cc <HAL_RCC_ClockConfig+0x1c8>)
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	f003 020c 	and.w	r2, r3, #12
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	009b      	lsls	r3, r3, #2
 8002324:	429a      	cmp	r2, r3
 8002326:	d1eb      	bne.n	8002300 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002328:	4b27      	ldr	r3, [pc, #156]	; (80023c8 <HAL_RCC_ClockConfig+0x1c4>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f003 030f 	and.w	r3, r3, #15
 8002330:	683a      	ldr	r2, [r7, #0]
 8002332:	429a      	cmp	r2, r3
 8002334:	d210      	bcs.n	8002358 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002336:	4b24      	ldr	r3, [pc, #144]	; (80023c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f023 020f 	bic.w	r2, r3, #15
 800233e:	4922      	ldr	r1, [pc, #136]	; (80023c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	4313      	orrs	r3, r2
 8002344:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002346:	4b20      	ldr	r3, [pc, #128]	; (80023c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f003 030f 	and.w	r3, r3, #15
 800234e:	683a      	ldr	r2, [r7, #0]
 8002350:	429a      	cmp	r2, r3
 8002352:	d001      	beq.n	8002358 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002354:	2301      	movs	r3, #1
 8002356:	e032      	b.n	80023be <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f003 0304 	and.w	r3, r3, #4
 8002360:	2b00      	cmp	r3, #0
 8002362:	d008      	beq.n	8002376 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002364:	4b19      	ldr	r3, [pc, #100]	; (80023cc <HAL_RCC_ClockConfig+0x1c8>)
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	68db      	ldr	r3, [r3, #12]
 8002370:	4916      	ldr	r1, [pc, #88]	; (80023cc <HAL_RCC_ClockConfig+0x1c8>)
 8002372:	4313      	orrs	r3, r2
 8002374:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 0308 	and.w	r3, r3, #8
 800237e:	2b00      	cmp	r3, #0
 8002380:	d009      	beq.n	8002396 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002382:	4b12      	ldr	r3, [pc, #72]	; (80023cc <HAL_RCC_ClockConfig+0x1c8>)
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	691b      	ldr	r3, [r3, #16]
 800238e:	00db      	lsls	r3, r3, #3
 8002390:	490e      	ldr	r1, [pc, #56]	; (80023cc <HAL_RCC_ClockConfig+0x1c8>)
 8002392:	4313      	orrs	r3, r2
 8002394:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002396:	f000 f821 	bl	80023dc <HAL_RCC_GetSysClockFreq>
 800239a:	4602      	mov	r2, r0
 800239c:	4b0b      	ldr	r3, [pc, #44]	; (80023cc <HAL_RCC_ClockConfig+0x1c8>)
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	091b      	lsrs	r3, r3, #4
 80023a2:	f003 030f 	and.w	r3, r3, #15
 80023a6:	490a      	ldr	r1, [pc, #40]	; (80023d0 <HAL_RCC_ClockConfig+0x1cc>)
 80023a8:	5ccb      	ldrb	r3, [r1, r3]
 80023aa:	fa22 f303 	lsr.w	r3, r2, r3
 80023ae:	4a09      	ldr	r2, [pc, #36]	; (80023d4 <HAL_RCC_ClockConfig+0x1d0>)
 80023b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80023b2:	4b09      	ldr	r3, [pc, #36]	; (80023d8 <HAL_RCC_ClockConfig+0x1d4>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4618      	mov	r0, r3
 80023b8:	f7ff f86c 	bl	8001494 <HAL_InitTick>

  return HAL_OK;
 80023bc:	2300      	movs	r3, #0
}
 80023be:	4618      	mov	r0, r3
 80023c0:	3710      	adds	r7, #16
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	40023c00 	.word	0x40023c00
 80023cc:	40023800 	.word	0x40023800
 80023d0:	08005b40 	.word	0x08005b40
 80023d4:	20000000 	.word	0x20000000
 80023d8:	20000004 	.word	0x20000004

080023dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023dc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80023e0:	b084      	sub	sp, #16
 80023e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80023e4:	2300      	movs	r3, #0
 80023e6:	607b      	str	r3, [r7, #4]
 80023e8:	2300      	movs	r3, #0
 80023ea:	60fb      	str	r3, [r7, #12]
 80023ec:	2300      	movs	r3, #0
 80023ee:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80023f0:	2300      	movs	r3, #0
 80023f2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80023f4:	4b67      	ldr	r3, [pc, #412]	; (8002594 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	f003 030c 	and.w	r3, r3, #12
 80023fc:	2b08      	cmp	r3, #8
 80023fe:	d00d      	beq.n	800241c <HAL_RCC_GetSysClockFreq+0x40>
 8002400:	2b08      	cmp	r3, #8
 8002402:	f200 80bd 	bhi.w	8002580 <HAL_RCC_GetSysClockFreq+0x1a4>
 8002406:	2b00      	cmp	r3, #0
 8002408:	d002      	beq.n	8002410 <HAL_RCC_GetSysClockFreq+0x34>
 800240a:	2b04      	cmp	r3, #4
 800240c:	d003      	beq.n	8002416 <HAL_RCC_GetSysClockFreq+0x3a>
 800240e:	e0b7      	b.n	8002580 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002410:	4b61      	ldr	r3, [pc, #388]	; (8002598 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002412:	60bb      	str	r3, [r7, #8]
      break;
 8002414:	e0b7      	b.n	8002586 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002416:	4b61      	ldr	r3, [pc, #388]	; (800259c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002418:	60bb      	str	r3, [r7, #8]
      break;
 800241a:	e0b4      	b.n	8002586 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800241c:	4b5d      	ldr	r3, [pc, #372]	; (8002594 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002424:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002426:	4b5b      	ldr	r3, [pc, #364]	; (8002594 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800242e:	2b00      	cmp	r3, #0
 8002430:	d04d      	beq.n	80024ce <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002432:	4b58      	ldr	r3, [pc, #352]	; (8002594 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	099b      	lsrs	r3, r3, #6
 8002438:	461a      	mov	r2, r3
 800243a:	f04f 0300 	mov.w	r3, #0
 800243e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002442:	f04f 0100 	mov.w	r1, #0
 8002446:	ea02 0800 	and.w	r8, r2, r0
 800244a:	ea03 0901 	and.w	r9, r3, r1
 800244e:	4640      	mov	r0, r8
 8002450:	4649      	mov	r1, r9
 8002452:	f04f 0200 	mov.w	r2, #0
 8002456:	f04f 0300 	mov.w	r3, #0
 800245a:	014b      	lsls	r3, r1, #5
 800245c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002460:	0142      	lsls	r2, r0, #5
 8002462:	4610      	mov	r0, r2
 8002464:	4619      	mov	r1, r3
 8002466:	ebb0 0008 	subs.w	r0, r0, r8
 800246a:	eb61 0109 	sbc.w	r1, r1, r9
 800246e:	f04f 0200 	mov.w	r2, #0
 8002472:	f04f 0300 	mov.w	r3, #0
 8002476:	018b      	lsls	r3, r1, #6
 8002478:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800247c:	0182      	lsls	r2, r0, #6
 800247e:	1a12      	subs	r2, r2, r0
 8002480:	eb63 0301 	sbc.w	r3, r3, r1
 8002484:	f04f 0000 	mov.w	r0, #0
 8002488:	f04f 0100 	mov.w	r1, #0
 800248c:	00d9      	lsls	r1, r3, #3
 800248e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002492:	00d0      	lsls	r0, r2, #3
 8002494:	4602      	mov	r2, r0
 8002496:	460b      	mov	r3, r1
 8002498:	eb12 0208 	adds.w	r2, r2, r8
 800249c:	eb43 0309 	adc.w	r3, r3, r9
 80024a0:	f04f 0000 	mov.w	r0, #0
 80024a4:	f04f 0100 	mov.w	r1, #0
 80024a8:	0259      	lsls	r1, r3, #9
 80024aa:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80024ae:	0250      	lsls	r0, r2, #9
 80024b0:	4602      	mov	r2, r0
 80024b2:	460b      	mov	r3, r1
 80024b4:	4610      	mov	r0, r2
 80024b6:	4619      	mov	r1, r3
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	461a      	mov	r2, r3
 80024bc:	f04f 0300 	mov.w	r3, #0
 80024c0:	f7fd ff16 	bl	80002f0 <__aeabi_uldivmod>
 80024c4:	4602      	mov	r2, r0
 80024c6:	460b      	mov	r3, r1
 80024c8:	4613      	mov	r3, r2
 80024ca:	60fb      	str	r3, [r7, #12]
 80024cc:	e04a      	b.n	8002564 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024ce:	4b31      	ldr	r3, [pc, #196]	; (8002594 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	099b      	lsrs	r3, r3, #6
 80024d4:	461a      	mov	r2, r3
 80024d6:	f04f 0300 	mov.w	r3, #0
 80024da:	f240 10ff 	movw	r0, #511	; 0x1ff
 80024de:	f04f 0100 	mov.w	r1, #0
 80024e2:	ea02 0400 	and.w	r4, r2, r0
 80024e6:	ea03 0501 	and.w	r5, r3, r1
 80024ea:	4620      	mov	r0, r4
 80024ec:	4629      	mov	r1, r5
 80024ee:	f04f 0200 	mov.w	r2, #0
 80024f2:	f04f 0300 	mov.w	r3, #0
 80024f6:	014b      	lsls	r3, r1, #5
 80024f8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80024fc:	0142      	lsls	r2, r0, #5
 80024fe:	4610      	mov	r0, r2
 8002500:	4619      	mov	r1, r3
 8002502:	1b00      	subs	r0, r0, r4
 8002504:	eb61 0105 	sbc.w	r1, r1, r5
 8002508:	f04f 0200 	mov.w	r2, #0
 800250c:	f04f 0300 	mov.w	r3, #0
 8002510:	018b      	lsls	r3, r1, #6
 8002512:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002516:	0182      	lsls	r2, r0, #6
 8002518:	1a12      	subs	r2, r2, r0
 800251a:	eb63 0301 	sbc.w	r3, r3, r1
 800251e:	f04f 0000 	mov.w	r0, #0
 8002522:	f04f 0100 	mov.w	r1, #0
 8002526:	00d9      	lsls	r1, r3, #3
 8002528:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800252c:	00d0      	lsls	r0, r2, #3
 800252e:	4602      	mov	r2, r0
 8002530:	460b      	mov	r3, r1
 8002532:	1912      	adds	r2, r2, r4
 8002534:	eb45 0303 	adc.w	r3, r5, r3
 8002538:	f04f 0000 	mov.w	r0, #0
 800253c:	f04f 0100 	mov.w	r1, #0
 8002540:	0299      	lsls	r1, r3, #10
 8002542:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002546:	0290      	lsls	r0, r2, #10
 8002548:	4602      	mov	r2, r0
 800254a:	460b      	mov	r3, r1
 800254c:	4610      	mov	r0, r2
 800254e:	4619      	mov	r1, r3
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	461a      	mov	r2, r3
 8002554:	f04f 0300 	mov.w	r3, #0
 8002558:	f7fd feca 	bl	80002f0 <__aeabi_uldivmod>
 800255c:	4602      	mov	r2, r0
 800255e:	460b      	mov	r3, r1
 8002560:	4613      	mov	r3, r2
 8002562:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002564:	4b0b      	ldr	r3, [pc, #44]	; (8002594 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	0c1b      	lsrs	r3, r3, #16
 800256a:	f003 0303 	and.w	r3, r3, #3
 800256e:	3301      	adds	r3, #1
 8002570:	005b      	lsls	r3, r3, #1
 8002572:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8002574:	68fa      	ldr	r2, [r7, #12]
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	fbb2 f3f3 	udiv	r3, r2, r3
 800257c:	60bb      	str	r3, [r7, #8]
      break;
 800257e:	e002      	b.n	8002586 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002580:	4b05      	ldr	r3, [pc, #20]	; (8002598 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002582:	60bb      	str	r3, [r7, #8]
      break;
 8002584:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002586:	68bb      	ldr	r3, [r7, #8]
}
 8002588:	4618      	mov	r0, r3
 800258a:	3710      	adds	r7, #16
 800258c:	46bd      	mov	sp, r7
 800258e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002592:	bf00      	nop
 8002594:	40023800 	.word	0x40023800
 8002598:	00f42400 	.word	0x00f42400
 800259c:	007a1200 	.word	0x007a1200

080025a0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025a0:	b480      	push	{r7}
 80025a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025a4:	4b03      	ldr	r3, [pc, #12]	; (80025b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80025a6:	681b      	ldr	r3, [r3, #0]
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	46bd      	mov	sp, r7
 80025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b0:	4770      	bx	lr
 80025b2:	bf00      	nop
 80025b4:	20000000 	.word	0x20000000

080025b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80025bc:	f7ff fff0 	bl	80025a0 <HAL_RCC_GetHCLKFreq>
 80025c0:	4602      	mov	r2, r0
 80025c2:	4b05      	ldr	r3, [pc, #20]	; (80025d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	0a9b      	lsrs	r3, r3, #10
 80025c8:	f003 0307 	and.w	r3, r3, #7
 80025cc:	4903      	ldr	r1, [pc, #12]	; (80025dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80025ce:	5ccb      	ldrb	r3, [r1, r3]
 80025d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	bd80      	pop	{r7, pc}
 80025d8:	40023800 	.word	0x40023800
 80025dc:	08005b50 	.word	0x08005b50

080025e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80025e4:	f7ff ffdc 	bl	80025a0 <HAL_RCC_GetHCLKFreq>
 80025e8:	4602      	mov	r2, r0
 80025ea:	4b05      	ldr	r3, [pc, #20]	; (8002600 <HAL_RCC_GetPCLK2Freq+0x20>)
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	0b5b      	lsrs	r3, r3, #13
 80025f0:	f003 0307 	and.w	r3, r3, #7
 80025f4:	4903      	ldr	r1, [pc, #12]	; (8002604 <HAL_RCC_GetPCLK2Freq+0x24>)
 80025f6:	5ccb      	ldrb	r3, [r1, r3]
 80025f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	40023800 	.word	0x40023800
 8002604:	08005b50 	.word	0x08005b50

08002608 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b088      	sub	sp, #32
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002610:	2300      	movs	r3, #0
 8002612:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002614:	2300      	movs	r3, #0
 8002616:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002618:	2300      	movs	r3, #0
 800261a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800261c:	2300      	movs	r3, #0
 800261e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002620:	2300      	movs	r3, #0
 8002622:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f003 0301 	and.w	r3, r3, #1
 800262c:	2b00      	cmp	r3, #0
 800262e:	d012      	beq.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002630:	4b69      	ldr	r3, [pc, #420]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	4a68      	ldr	r2, [pc, #416]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002636:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800263a:	6093      	str	r3, [r2, #8]
 800263c:	4b66      	ldr	r3, [pc, #408]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800263e:	689a      	ldr	r2, [r3, #8]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002644:	4964      	ldr	r1, [pc, #400]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002646:	4313      	orrs	r3, r2
 8002648:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800264e:	2b00      	cmp	r3, #0
 8002650:	d101      	bne.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002652:	2301      	movs	r3, #1
 8002654:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800265e:	2b00      	cmp	r3, #0
 8002660:	d017      	beq.n	8002692 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002662:	4b5d      	ldr	r3, [pc, #372]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002664:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002668:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002670:	4959      	ldr	r1, [pc, #356]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002672:	4313      	orrs	r3, r2
 8002674:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800267c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002680:	d101      	bne.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002682:	2301      	movs	r3, #1
 8002684:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800268a:	2b00      	cmp	r3, #0
 800268c:	d101      	bne.n	8002692 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800268e:	2301      	movs	r3, #1
 8002690:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800269a:	2b00      	cmp	r3, #0
 800269c:	d017      	beq.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800269e:	4b4e      	ldr	r3, [pc, #312]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80026a4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ac:	494a      	ldr	r1, [pc, #296]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026ae:	4313      	orrs	r3, r2
 80026b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026bc:	d101      	bne.n	80026c2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80026be:	2301      	movs	r3, #1
 80026c0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d101      	bne.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80026ca:	2301      	movs	r3, #1
 80026cc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d001      	beq.n	80026de <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80026da:	2301      	movs	r3, #1
 80026dc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 0320 	and.w	r3, r3, #32
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	f000 808b 	beq.w	8002802 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80026ec:	4b3a      	ldr	r3, [pc, #232]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f0:	4a39      	ldr	r2, [pc, #228]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026f6:	6413      	str	r3, [r2, #64]	; 0x40
 80026f8:	4b37      	ldr	r3, [pc, #220]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002700:	60bb      	str	r3, [r7, #8]
 8002702:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002704:	4b35      	ldr	r3, [pc, #212]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a34      	ldr	r2, [pc, #208]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800270a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800270e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002710:	f7fe ff04 	bl	800151c <HAL_GetTick>
 8002714:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002716:	e008      	b.n	800272a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002718:	f7fe ff00 	bl	800151c <HAL_GetTick>
 800271c:	4602      	mov	r2, r0
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	1ad3      	subs	r3, r2, r3
 8002722:	2b64      	cmp	r3, #100	; 0x64
 8002724:	d901      	bls.n	800272a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002726:	2303      	movs	r3, #3
 8002728:	e38f      	b.n	8002e4a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800272a:	4b2c      	ldr	r3, [pc, #176]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002732:	2b00      	cmp	r3, #0
 8002734:	d0f0      	beq.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002736:	4b28      	ldr	r3, [pc, #160]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002738:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800273a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800273e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d035      	beq.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800274a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800274e:	693a      	ldr	r2, [r7, #16]
 8002750:	429a      	cmp	r2, r3
 8002752:	d02e      	beq.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002754:	4b20      	ldr	r3, [pc, #128]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002756:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002758:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800275c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800275e:	4b1e      	ldr	r3, [pc, #120]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002760:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002762:	4a1d      	ldr	r2, [pc, #116]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002764:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002768:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800276a:	4b1b      	ldr	r3, [pc, #108]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800276c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800276e:	4a1a      	ldr	r2, [pc, #104]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002770:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002774:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002776:	4a18      	ldr	r2, [pc, #96]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800277c:	4b16      	ldr	r3, [pc, #88]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800277e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002780:	f003 0301 	and.w	r3, r3, #1
 8002784:	2b01      	cmp	r3, #1
 8002786:	d114      	bne.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002788:	f7fe fec8 	bl	800151c <HAL_GetTick>
 800278c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800278e:	e00a      	b.n	80027a6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002790:	f7fe fec4 	bl	800151c <HAL_GetTick>
 8002794:	4602      	mov	r2, r0
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	1ad3      	subs	r3, r2, r3
 800279a:	f241 3288 	movw	r2, #5000	; 0x1388
 800279e:	4293      	cmp	r3, r2
 80027a0:	d901      	bls.n	80027a6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80027a2:	2303      	movs	r3, #3
 80027a4:	e351      	b.n	8002e4a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027a6:	4b0c      	ldr	r3, [pc, #48]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027aa:	f003 0302 	and.w	r3, r3, #2
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d0ee      	beq.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80027be:	d111      	bne.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80027c0:	4b05      	ldr	r3, [pc, #20]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80027cc:	4b04      	ldr	r3, [pc, #16]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80027ce:	400b      	ands	r3, r1
 80027d0:	4901      	ldr	r1, [pc, #4]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027d2:	4313      	orrs	r3, r2
 80027d4:	608b      	str	r3, [r1, #8]
 80027d6:	e00b      	b.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80027d8:	40023800 	.word	0x40023800
 80027dc:	40007000 	.word	0x40007000
 80027e0:	0ffffcff 	.word	0x0ffffcff
 80027e4:	4bb3      	ldr	r3, [pc, #716]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	4ab2      	ldr	r2, [pc, #712]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80027ea:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80027ee:	6093      	str	r3, [r2, #8]
 80027f0:	4bb0      	ldr	r3, [pc, #704]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80027f2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027fc:	49ad      	ldr	r1, [pc, #692]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80027fe:	4313      	orrs	r3, r2
 8002800:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 0310 	and.w	r3, r3, #16
 800280a:	2b00      	cmp	r3, #0
 800280c:	d010      	beq.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800280e:	4ba9      	ldr	r3, [pc, #676]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002810:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002814:	4aa7      	ldr	r2, [pc, #668]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002816:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800281a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800281e:	4ba5      	ldr	r3, [pc, #660]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002820:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002828:	49a2      	ldr	r1, [pc, #648]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800282a:	4313      	orrs	r3, r2
 800282c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002838:	2b00      	cmp	r3, #0
 800283a:	d00a      	beq.n	8002852 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800283c:	4b9d      	ldr	r3, [pc, #628]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800283e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002842:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800284a:	499a      	ldr	r1, [pc, #616]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800284c:	4313      	orrs	r3, r2
 800284e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800285a:	2b00      	cmp	r3, #0
 800285c:	d00a      	beq.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800285e:	4b95      	ldr	r3, [pc, #596]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002860:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002864:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800286c:	4991      	ldr	r1, [pc, #580]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800286e:	4313      	orrs	r3, r2
 8002870:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800287c:	2b00      	cmp	r3, #0
 800287e:	d00a      	beq.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002880:	4b8c      	ldr	r3, [pc, #560]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002882:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002886:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800288e:	4989      	ldr	r1, [pc, #548]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002890:	4313      	orrs	r3, r2
 8002892:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d00a      	beq.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80028a2:	4b84      	ldr	r3, [pc, #528]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80028a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028a8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028b0:	4980      	ldr	r1, [pc, #512]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80028b2:	4313      	orrs	r3, r2
 80028b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d00a      	beq.n	80028da <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80028c4:	4b7b      	ldr	r3, [pc, #492]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80028c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028ca:	f023 0203 	bic.w	r2, r3, #3
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028d2:	4978      	ldr	r1, [pc, #480]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80028d4:	4313      	orrs	r3, r2
 80028d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d00a      	beq.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80028e6:	4b73      	ldr	r3, [pc, #460]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80028e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028ec:	f023 020c 	bic.w	r2, r3, #12
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028f4:	496f      	ldr	r1, [pc, #444]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80028f6:	4313      	orrs	r3, r2
 80028f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002904:	2b00      	cmp	r3, #0
 8002906:	d00a      	beq.n	800291e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002908:	4b6a      	ldr	r3, [pc, #424]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800290a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800290e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002916:	4967      	ldr	r1, [pc, #412]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002918:	4313      	orrs	r3, r2
 800291a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002926:	2b00      	cmp	r3, #0
 8002928:	d00a      	beq.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800292a:	4b62      	ldr	r3, [pc, #392]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800292c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002930:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002938:	495e      	ldr	r1, [pc, #376]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800293a:	4313      	orrs	r3, r2
 800293c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002948:	2b00      	cmp	r3, #0
 800294a:	d00a      	beq.n	8002962 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800294c:	4b59      	ldr	r3, [pc, #356]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800294e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002952:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800295a:	4956      	ldr	r1, [pc, #344]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800295c:	4313      	orrs	r3, r2
 800295e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800296a:	2b00      	cmp	r3, #0
 800296c:	d00a      	beq.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800296e:	4b51      	ldr	r3, [pc, #324]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002970:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002974:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800297c:	494d      	ldr	r1, [pc, #308]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800297e:	4313      	orrs	r3, r2
 8002980:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800298c:	2b00      	cmp	r3, #0
 800298e:	d00a      	beq.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002990:	4b48      	ldr	r3, [pc, #288]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002992:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002996:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800299e:	4945      	ldr	r1, [pc, #276]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80029a0:	4313      	orrs	r3, r2
 80029a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d00a      	beq.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80029b2:	4b40      	ldr	r3, [pc, #256]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80029b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029b8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029c0:	493c      	ldr	r1, [pc, #240]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80029c2:	4313      	orrs	r3, r2
 80029c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d00a      	beq.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80029d4:	4b37      	ldr	r3, [pc, #220]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80029d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029da:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80029e2:	4934      	ldr	r1, [pc, #208]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80029e4:	4313      	orrs	r3, r2
 80029e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d011      	beq.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80029f6:	4b2f      	ldr	r3, [pc, #188]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80029f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029fc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a04:	492b      	ldr	r1, [pc, #172]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a06:	4313      	orrs	r3, r2
 8002a08:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a10:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a14:	d101      	bne.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002a16:	2301      	movs	r3, #1
 8002a18:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 0308 	and.w	r3, r3, #8
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d001      	beq.n	8002a2a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002a26:	2301      	movs	r3, #1
 8002a28:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d00a      	beq.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002a36:	4b1f      	ldr	r3, [pc, #124]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a3c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a44:	491b      	ldr	r1, [pc, #108]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a46:	4313      	orrs	r3, r2
 8002a48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d00b      	beq.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002a58:	4b16      	ldr	r3, [pc, #88]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a5e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a68:	4912      	ldr	r1, [pc, #72]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d00b      	beq.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002a7c:	4b0d      	ldr	r3, [pc, #52]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a82:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a8c:	4909      	ldr	r1, [pc, #36]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d00f      	beq.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002aa0:	4b04      	ldr	r3, [pc, #16]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002aa2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002aa6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ab0:	e002      	b.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8002ab2:	bf00      	nop
 8002ab4:	40023800 	.word	0x40023800
 8002ab8:	4986      	ldr	r1, [pc, #536]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002aba:	4313      	orrs	r3, r2
 8002abc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d00b      	beq.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002acc:	4b81      	ldr	r3, [pc, #516]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ace:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ad2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002adc:	497d      	ldr	r1, [pc, #500]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002ae4:	69fb      	ldr	r3, [r7, #28]
 8002ae6:	2b01      	cmp	r3, #1
 8002ae8:	d006      	beq.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	f000 80d6 	beq.w	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002af8:	4b76      	ldr	r3, [pc, #472]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a75      	ldr	r2, [pc, #468]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002afe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002b02:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b04:	f7fe fd0a 	bl	800151c <HAL_GetTick>
 8002b08:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002b0a:	e008      	b.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002b0c:	f7fe fd06 	bl	800151c <HAL_GetTick>
 8002b10:	4602      	mov	r2, r0
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	1ad3      	subs	r3, r2, r3
 8002b16:	2b64      	cmp	r3, #100	; 0x64
 8002b18:	d901      	bls.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	e195      	b.n	8002e4a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002b1e:	4b6d      	ldr	r3, [pc, #436]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d1f0      	bne.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 0301 	and.w	r3, r3, #1
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d021      	beq.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d11d      	bne.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002b3e:	4b65      	ldr	r3, [pc, #404]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b44:	0c1b      	lsrs	r3, r3, #16
 8002b46:	f003 0303 	and.w	r3, r3, #3
 8002b4a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002b4c:	4b61      	ldr	r3, [pc, #388]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b52:	0e1b      	lsrs	r3, r3, #24
 8002b54:	f003 030f 	and.w	r3, r3, #15
 8002b58:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	019a      	lsls	r2, r3, #6
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	041b      	lsls	r3, r3, #16
 8002b64:	431a      	orrs	r2, r3
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	061b      	lsls	r3, r3, #24
 8002b6a:	431a      	orrs	r2, r3
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	071b      	lsls	r3, r3, #28
 8002b72:	4958      	ldr	r1, [pc, #352]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b74:	4313      	orrs	r3, r2
 8002b76:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d004      	beq.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b8e:	d00a      	beq.n	8002ba6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d02e      	beq.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ba4:	d129      	bne.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002ba6:	4b4b      	ldr	r3, [pc, #300]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ba8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002bac:	0c1b      	lsrs	r3, r3, #16
 8002bae:	f003 0303 	and.w	r3, r3, #3
 8002bb2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002bb4:	4b47      	ldr	r3, [pc, #284]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002bb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002bba:	0f1b      	lsrs	r3, r3, #28
 8002bbc:	f003 0307 	and.w	r3, r3, #7
 8002bc0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	019a      	lsls	r2, r3, #6
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	041b      	lsls	r3, r3, #16
 8002bcc:	431a      	orrs	r2, r3
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	68db      	ldr	r3, [r3, #12]
 8002bd2:	061b      	lsls	r3, r3, #24
 8002bd4:	431a      	orrs	r2, r3
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	071b      	lsls	r3, r3, #28
 8002bda:	493e      	ldr	r1, [pc, #248]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002be2:	4b3c      	ldr	r3, [pc, #240]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002be4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002be8:	f023 021f 	bic.w	r2, r3, #31
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf0:	3b01      	subs	r3, #1
 8002bf2:	4938      	ldr	r1, [pc, #224]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d01d      	beq.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002c06:	4b33      	ldr	r3, [pc, #204]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c0c:	0e1b      	lsrs	r3, r3, #24
 8002c0e:	f003 030f 	and.w	r3, r3, #15
 8002c12:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002c14:	4b2f      	ldr	r3, [pc, #188]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c1a:	0f1b      	lsrs	r3, r3, #28
 8002c1c:	f003 0307 	and.w	r3, r3, #7
 8002c20:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	019a      	lsls	r2, r3, #6
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	691b      	ldr	r3, [r3, #16]
 8002c2c:	041b      	lsls	r3, r3, #16
 8002c2e:	431a      	orrs	r2, r3
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	061b      	lsls	r3, r3, #24
 8002c34:	431a      	orrs	r2, r3
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	071b      	lsls	r3, r3, #28
 8002c3a:	4926      	ldr	r1, [pc, #152]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d011      	beq.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	019a      	lsls	r2, r3, #6
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	691b      	ldr	r3, [r3, #16]
 8002c58:	041b      	lsls	r3, r3, #16
 8002c5a:	431a      	orrs	r2, r3
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	061b      	lsls	r3, r3, #24
 8002c62:	431a      	orrs	r2, r3
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	071b      	lsls	r3, r3, #28
 8002c6a:	491a      	ldr	r1, [pc, #104]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002c72:	4b18      	ldr	r3, [pc, #96]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a17      	ldr	r2, [pc, #92]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c78:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002c7c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c7e:	f7fe fc4d 	bl	800151c <HAL_GetTick>
 8002c82:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002c84:	e008      	b.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002c86:	f7fe fc49 	bl	800151c <HAL_GetTick>
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	1ad3      	subs	r3, r2, r3
 8002c90:	2b64      	cmp	r3, #100	; 0x64
 8002c92:	d901      	bls.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002c94:	2303      	movs	r3, #3
 8002c96:	e0d8      	b.n	8002e4a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002c98:	4b0e      	ldr	r3, [pc, #56]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d0f0      	beq.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002ca4:	69bb      	ldr	r3, [r7, #24]
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	f040 80ce 	bne.w	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002cac:	4b09      	ldr	r3, [pc, #36]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a08      	ldr	r2, [pc, #32]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002cb2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cb6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cb8:	f7fe fc30 	bl	800151c <HAL_GetTick>
 8002cbc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002cbe:	e00b      	b.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002cc0:	f7fe fc2c 	bl	800151c <HAL_GetTick>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	1ad3      	subs	r3, r2, r3
 8002cca:	2b64      	cmp	r3, #100	; 0x64
 8002ccc:	d904      	bls.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002cce:	2303      	movs	r3, #3
 8002cd0:	e0bb      	b.n	8002e4a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002cd2:	bf00      	nop
 8002cd4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002cd8:	4b5e      	ldr	r3, [pc, #376]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ce0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ce4:	d0ec      	beq.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d003      	beq.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d009      	beq.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d02e      	beq.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d12a      	bne.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002d0e:	4b51      	ldr	r3, [pc, #324]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d14:	0c1b      	lsrs	r3, r3, #16
 8002d16:	f003 0303 	and.w	r3, r3, #3
 8002d1a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002d1c:	4b4d      	ldr	r3, [pc, #308]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d22:	0f1b      	lsrs	r3, r3, #28
 8002d24:	f003 0307 	and.w	r3, r3, #7
 8002d28:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	695b      	ldr	r3, [r3, #20]
 8002d2e:	019a      	lsls	r2, r3, #6
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	041b      	lsls	r3, r3, #16
 8002d34:	431a      	orrs	r2, r3
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	699b      	ldr	r3, [r3, #24]
 8002d3a:	061b      	lsls	r3, r3, #24
 8002d3c:	431a      	orrs	r2, r3
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	071b      	lsls	r3, r3, #28
 8002d42:	4944      	ldr	r1, [pc, #272]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d44:	4313      	orrs	r3, r2
 8002d46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002d4a:	4b42      	ldr	r3, [pc, #264]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d50:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d58:	3b01      	subs	r3, #1
 8002d5a:	021b      	lsls	r3, r3, #8
 8002d5c:	493d      	ldr	r1, [pc, #244]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d022      	beq.n	8002db6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d74:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d78:	d11d      	bne.n	8002db6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002d7a:	4b36      	ldr	r3, [pc, #216]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d80:	0e1b      	lsrs	r3, r3, #24
 8002d82:	f003 030f 	and.w	r3, r3, #15
 8002d86:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002d88:	4b32      	ldr	r3, [pc, #200]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d8e:	0f1b      	lsrs	r3, r3, #28
 8002d90:	f003 0307 	and.w	r3, r3, #7
 8002d94:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	695b      	ldr	r3, [r3, #20]
 8002d9a:	019a      	lsls	r2, r3, #6
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6a1b      	ldr	r3, [r3, #32]
 8002da0:	041b      	lsls	r3, r3, #16
 8002da2:	431a      	orrs	r2, r3
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	061b      	lsls	r3, r3, #24
 8002da8:	431a      	orrs	r2, r3
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	071b      	lsls	r3, r3, #28
 8002dae:	4929      	ldr	r1, [pc, #164]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002db0:	4313      	orrs	r3, r2
 8002db2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 0308 	and.w	r3, r3, #8
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d028      	beq.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002dc2:	4b24      	ldr	r3, [pc, #144]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002dc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dc8:	0e1b      	lsrs	r3, r3, #24
 8002dca:	f003 030f 	and.w	r3, r3, #15
 8002dce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002dd0:	4b20      	ldr	r3, [pc, #128]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002dd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dd6:	0c1b      	lsrs	r3, r3, #16
 8002dd8:	f003 0303 	and.w	r3, r3, #3
 8002ddc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	695b      	ldr	r3, [r3, #20]
 8002de2:	019a      	lsls	r2, r3, #6
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	041b      	lsls	r3, r3, #16
 8002de8:	431a      	orrs	r2, r3
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	061b      	lsls	r3, r3, #24
 8002dee:	431a      	orrs	r2, r3
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	69db      	ldr	r3, [r3, #28]
 8002df4:	071b      	lsls	r3, r3, #28
 8002df6:	4917      	ldr	r1, [pc, #92]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002dfe:	4b15      	ldr	r3, [pc, #84]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e04:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e0c:	4911      	ldr	r1, [pc, #68]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002e14:	4b0f      	ldr	r3, [pc, #60]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a0e      	ldr	r2, [pc, #56]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e1e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e20:	f7fe fb7c 	bl	800151c <HAL_GetTick>
 8002e24:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002e26:	e008      	b.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002e28:	f7fe fb78 	bl	800151c <HAL_GetTick>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	1ad3      	subs	r3, r2, r3
 8002e32:	2b64      	cmp	r3, #100	; 0x64
 8002e34:	d901      	bls.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002e36:	2303      	movs	r3, #3
 8002e38:	e007      	b.n	8002e4a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002e3a:	4b06      	ldr	r3, [pc, #24]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e42:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e46:	d1ef      	bne.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8002e48:	2300      	movs	r3, #0
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	3720      	adds	r7, #32
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}
 8002e52:	bf00      	nop
 8002e54:	40023800 	.word	0x40023800

08002e58 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b082      	sub	sp, #8
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d101      	bne.n	8002e6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	e040      	b.n	8002eec <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d106      	bne.n	8002e80 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2200      	movs	r2, #0
 8002e76:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e7a:	6878      	ldr	r0, [r7, #4]
 8002e7c:	f7fe f992 	bl	80011a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2224      	movs	r2, #36	; 0x24
 8002e84:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f022 0201 	bic.w	r2, r2, #1
 8002e94:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	f000 fbe8 	bl	800366c <UART_SetConfig>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	d101      	bne.n	8002ea6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e022      	b.n	8002eec <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d002      	beq.n	8002eb4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002eae:	6878      	ldr	r0, [r7, #4]
 8002eb0:	f000 fe3e 	bl	8003b30 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	685a      	ldr	r2, [r3, #4]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002ec2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	689a      	ldr	r2, [r3, #8]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002ed2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f042 0201 	orr.w	r2, r2, #1
 8002ee2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002ee4:	6878      	ldr	r0, [r7, #4]
 8002ee6:	f000 fec5 	bl	8003c74 <UART_CheckIdleState>
 8002eea:	4603      	mov	r3, r0
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	3708      	adds	r7, #8
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}

08002ef4 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b08b      	sub	sp, #44	; 0x2c
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	60f8      	str	r0, [r7, #12]
 8002efc:	60b9      	str	r1, [r7, #8]
 8002efe:	4613      	mov	r3, r2
 8002f00:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f06:	2b20      	cmp	r3, #32
 8002f08:	d156      	bne.n	8002fb8 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d002      	beq.n	8002f16 <HAL_UART_Transmit_IT+0x22>
 8002f10:	88fb      	ldrh	r3, [r7, #6]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d101      	bne.n	8002f1a <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e04f      	b.n	8002fba <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002f20:	2b01      	cmp	r3, #1
 8002f22:	d101      	bne.n	8002f28 <HAL_UART_Transmit_IT+0x34>
 8002f24:	2302      	movs	r3, #2
 8002f26:	e048      	b.n	8002fba <HAL_UART_Transmit_IT+0xc6>
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	68ba      	ldr	r2, [r7, #8]
 8002f34:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	88fa      	ldrh	r2, [r7, #6]
 8002f3a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	88fa      	ldrh	r2, [r7, #6]
 8002f42:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2221      	movs	r2, #33	; 0x21
 8002f58:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f62:	d107      	bne.n	8002f74 <HAL_UART_Transmit_IT+0x80>
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	691b      	ldr	r3, [r3, #16]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d103      	bne.n	8002f74 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	4a16      	ldr	r2, [pc, #88]	; (8002fc8 <HAL_UART_Transmit_IT+0xd4>)
 8002f70:	669a      	str	r2, [r3, #104]	; 0x68
 8002f72:	e002      	b.n	8002f7a <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	4a15      	ldr	r2, [pc, #84]	; (8002fcc <HAL_UART_Transmit_IT+0xd8>)
 8002f78:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	e853 3f00 	ldrex	r3, [r3]
 8002f8e:	613b      	str	r3, [r7, #16]
   return(result);
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f96:	627b      	str	r3, [r7, #36]	; 0x24
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	461a      	mov	r2, r3
 8002f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa0:	623b      	str	r3, [r7, #32]
 8002fa2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fa4:	69f9      	ldr	r1, [r7, #28]
 8002fa6:	6a3a      	ldr	r2, [r7, #32]
 8002fa8:	e841 2300 	strex	r3, r2, [r1]
 8002fac:	61bb      	str	r3, [r7, #24]
   return(result);
 8002fae:	69bb      	ldr	r3, [r7, #24]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d1e6      	bne.n	8002f82 <HAL_UART_Transmit_IT+0x8e>

    return HAL_OK;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	e000      	b.n	8002fba <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 8002fb8:	2302      	movs	r3, #2
  }
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	372c      	adds	r7, #44	; 0x2c
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc4:	4770      	bx	lr
 8002fc6:	bf00      	nop
 8002fc8:	080041cd 	.word	0x080041cd
 8002fcc:	08004117 	.word	0x08004117

08002fd0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b08a      	sub	sp, #40	; 0x28
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	60f8      	str	r0, [r7, #12]
 8002fd8:	60b9      	str	r1, [r7, #8]
 8002fda:	4613      	mov	r3, r2
 8002fdc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002fe2:	2b20      	cmp	r3, #32
 8002fe4:	d13d      	bne.n	8003062 <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d002      	beq.n	8002ff2 <HAL_UART_Receive_IT+0x22>
 8002fec:	88fb      	ldrh	r3, [r7, #6]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d101      	bne.n	8002ff6 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e036      	b.n	8003064 <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d101      	bne.n	8003004 <HAL_UART_Receive_IT+0x34>
 8003000:	2302      	movs	r3, #2
 8003002:	e02f      	b.n	8003064 <HAL_UART_Receive_IT+0x94>
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2201      	movs	r2, #1
 8003008:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2200      	movs	r2, #0
 8003010:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800301c:	2b00      	cmp	r3, #0
 800301e:	d018      	beq.n	8003052 <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	e853 3f00 	ldrex	r3, [r3]
 800302c:	613b      	str	r3, [r7, #16]
   return(result);
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003034:	627b      	str	r3, [r7, #36]	; 0x24
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	461a      	mov	r2, r3
 800303c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800303e:	623b      	str	r3, [r7, #32]
 8003040:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003042:	69f9      	ldr	r1, [r7, #28]
 8003044:	6a3a      	ldr	r2, [r7, #32]
 8003046:	e841 2300 	strex	r3, r2, [r1]
 800304a:	61bb      	str	r3, [r7, #24]
   return(result);
 800304c:	69bb      	ldr	r3, [r7, #24]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d1e6      	bne.n	8003020 <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003052:	88fb      	ldrh	r3, [r7, #6]
 8003054:	461a      	mov	r2, r3
 8003056:	68b9      	ldr	r1, [r7, #8]
 8003058:	68f8      	ldr	r0, [r7, #12]
 800305a:	f000 ff19 	bl	8003e90 <UART_Start_Receive_IT>
 800305e:	4603      	mov	r3, r0
 8003060:	e000      	b.n	8003064 <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003062:	2302      	movs	r3, #2
  }
}
 8003064:	4618      	mov	r0, r3
 8003066:	3728      	adds	r7, #40	; 0x28
 8003068:	46bd      	mov	sp, r7
 800306a:	bd80      	pop	{r7, pc}

0800306c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b0ba      	sub	sp, #232	; 0xe8
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	69db      	ldr	r3, [r3, #28]
 800307a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003092:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003096:	f640 030f 	movw	r3, #2063	; 0x80f
 800309a:	4013      	ands	r3, r2
 800309c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80030a0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d115      	bne.n	80030d4 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80030a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030ac:	f003 0320 	and.w	r3, r3, #32
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d00f      	beq.n	80030d4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80030b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030b8:	f003 0320 	and.w	r3, r3, #32
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d009      	beq.n	80030d4 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	f000 82a4 	beq.w	8003612 <HAL_UART_IRQHandler+0x5a6>
      {
        huart->RxISR(huart);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	4798      	blx	r3
      }
      return;
 80030d2:	e29e      	b.n	8003612 <HAL_UART_IRQHandler+0x5a6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80030d4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80030d8:	2b00      	cmp	r3, #0
 80030da:	f000 8117 	beq.w	800330c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80030de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80030e2:	f003 0301 	and.w	r3, r3, #1
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d106      	bne.n	80030f8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80030ea:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80030ee:	4b85      	ldr	r3, [pc, #532]	; (8003304 <HAL_UART_IRQHandler+0x298>)
 80030f0:	4013      	ands	r3, r2
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	f000 810a 	beq.w	800330c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80030f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030fc:	f003 0301 	and.w	r3, r3, #1
 8003100:	2b00      	cmp	r3, #0
 8003102:	d011      	beq.n	8003128 <HAL_UART_IRQHandler+0xbc>
 8003104:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003108:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800310c:	2b00      	cmp	r3, #0
 800310e:	d00b      	beq.n	8003128 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	2201      	movs	r2, #1
 8003116:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800311e:	f043 0201 	orr.w	r2, r3, #1
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003128:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800312c:	f003 0302 	and.w	r3, r3, #2
 8003130:	2b00      	cmp	r3, #0
 8003132:	d011      	beq.n	8003158 <HAL_UART_IRQHandler+0xec>
 8003134:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003138:	f003 0301 	and.w	r3, r3, #1
 800313c:	2b00      	cmp	r3, #0
 800313e:	d00b      	beq.n	8003158 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	2202      	movs	r2, #2
 8003146:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800314e:	f043 0204 	orr.w	r2, r3, #4
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003158:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800315c:	f003 0304 	and.w	r3, r3, #4
 8003160:	2b00      	cmp	r3, #0
 8003162:	d011      	beq.n	8003188 <HAL_UART_IRQHandler+0x11c>
 8003164:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003168:	f003 0301 	and.w	r3, r3, #1
 800316c:	2b00      	cmp	r3, #0
 800316e:	d00b      	beq.n	8003188 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	2204      	movs	r2, #4
 8003176:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800317e:	f043 0202 	orr.w	r2, r3, #2
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003188:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800318c:	f003 0308 	and.w	r3, r3, #8
 8003190:	2b00      	cmp	r3, #0
 8003192:	d017      	beq.n	80031c4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003194:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003198:	f003 0320 	and.w	r3, r3, #32
 800319c:	2b00      	cmp	r3, #0
 800319e:	d105      	bne.n	80031ac <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80031a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80031a4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d00b      	beq.n	80031c4 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	2208      	movs	r2, #8
 80031b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80031ba:	f043 0208 	orr.w	r2, r3, #8
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80031c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d012      	beq.n	80031f6 <HAL_UART_IRQHandler+0x18a>
 80031d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031d4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d00c      	beq.n	80031f6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80031e4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80031ec:	f043 0220 	orr.w	r2, r3, #32
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	f000 820a 	beq.w	8003616 <HAL_UART_IRQHandler+0x5aa>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003202:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003206:	f003 0320 	and.w	r3, r3, #32
 800320a:	2b00      	cmp	r3, #0
 800320c:	d00d      	beq.n	800322a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800320e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003212:	f003 0320 	and.w	r3, r3, #32
 8003216:	2b00      	cmp	r3, #0
 8003218:	d007      	beq.n	800322a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800321e:	2b00      	cmp	r3, #0
 8003220:	d003      	beq.n	800322a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003230:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800323e:	2b40      	cmp	r3, #64	; 0x40
 8003240:	d005      	beq.n	800324e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003242:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003246:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800324a:	2b00      	cmp	r3, #0
 800324c:	d04f      	beq.n	80032ee <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	f000 fee8 	bl	8004024 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800325e:	2b40      	cmp	r3, #64	; 0x40
 8003260:	d141      	bne.n	80032e6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	3308      	adds	r3, #8
 8003268:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800326c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003270:	e853 3f00 	ldrex	r3, [r3]
 8003274:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003278:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800327c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003280:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	3308      	adds	r3, #8
 800328a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800328e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003292:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003296:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800329a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800329e:	e841 2300 	strex	r3, r2, [r1]
 80032a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80032a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d1d9      	bne.n	8003262 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d013      	beq.n	80032de <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032ba:	4a13      	ldr	r2, [pc, #76]	; (8003308 <HAL_UART_IRQHandler+0x29c>)
 80032bc:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032c2:	4618      	mov	r0, r3
 80032c4:	f7fe fab7 	bl	8001836 <HAL_DMA_Abort_IT>
 80032c8:	4603      	mov	r3, r0
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d017      	beq.n	80032fe <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032d4:	687a      	ldr	r2, [r7, #4]
 80032d6:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80032d8:	4610      	mov	r0, r2
 80032da:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032dc:	e00f      	b.n	80032fe <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	f000 f9a4 	bl	800362c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032e4:	e00b      	b.n	80032fe <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	f000 f9a0 	bl	800362c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032ec:	e007      	b.n	80032fe <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80032ee:	6878      	ldr	r0, [r7, #4]
 80032f0:	f000 f99c 	bl	800362c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2200      	movs	r2, #0
 80032f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80032fc:	e18b      	b.n	8003616 <HAL_UART_IRQHandler+0x5aa>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032fe:	bf00      	nop
    return;
 8003300:	e189      	b.n	8003616 <HAL_UART_IRQHandler+0x5aa>
 8003302:	bf00      	nop
 8003304:	04000120 	.word	0x04000120
 8003308:	080040eb 	.word	0x080040eb

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003310:	2b01      	cmp	r3, #1
 8003312:	f040 8144 	bne.w	800359e <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003316:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800331a:	f003 0310 	and.w	r3, r3, #16
 800331e:	2b00      	cmp	r3, #0
 8003320:	f000 813d 	beq.w	800359e <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003324:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003328:	f003 0310 	and.w	r3, r3, #16
 800332c:	2b00      	cmp	r3, #0
 800332e:	f000 8136 	beq.w	800359e <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	2210      	movs	r2, #16
 8003338:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003344:	2b40      	cmp	r3, #64	; 0x40
 8003346:	f040 80b2 	bne.w	80034ae <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003356:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800335a:	2b00      	cmp	r3, #0
 800335c:	f000 815d 	beq.w	800361a <HAL_UART_IRQHandler+0x5ae>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003366:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800336a:	429a      	cmp	r2, r3
 800336c:	f080 8155 	bcs.w	800361a <HAL_UART_IRQHandler+0x5ae>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003376:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800337e:	69db      	ldr	r3, [r3, #28]
 8003380:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003384:	f000 8085 	beq.w	8003492 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003390:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003394:	e853 3f00 	ldrex	r3, [r3]
 8003398:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800339c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80033a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80033a4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	461a      	mov	r2, r3
 80033ae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80033b2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80033b6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033ba:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80033be:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80033c2:	e841 2300 	strex	r3, r2, [r1]
 80033c6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80033ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d1da      	bne.n	8003388 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	3308      	adds	r3, #8
 80033d8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033dc:	e853 3f00 	ldrex	r3, [r3]
 80033e0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80033e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80033e4:	f023 0301 	bic.w	r3, r3, #1
 80033e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	3308      	adds	r3, #8
 80033f2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80033f6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80033fa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033fc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80033fe:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003402:	e841 2300 	strex	r3, r2, [r1]
 8003406:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003408:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800340a:	2b00      	cmp	r3, #0
 800340c:	d1e1      	bne.n	80033d2 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	3308      	adds	r3, #8
 8003414:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003416:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003418:	e853 3f00 	ldrex	r3, [r3]
 800341c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800341e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003420:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003424:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	3308      	adds	r3, #8
 800342e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003432:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003434:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003436:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003438:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800343a:	e841 2300 	strex	r3, r2, [r1]
 800343e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003440:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003442:	2b00      	cmp	r3, #0
 8003444:	d1e3      	bne.n	800340e <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2220      	movs	r2, #32
 800344a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2200      	movs	r2, #0
 8003450:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003458:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800345a:	e853 3f00 	ldrex	r3, [r3]
 800345e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003460:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003462:	f023 0310 	bic.w	r3, r3, #16
 8003466:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	461a      	mov	r2, r3
 8003470:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003474:	65bb      	str	r3, [r7, #88]	; 0x58
 8003476:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003478:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800347a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800347c:	e841 2300 	strex	r3, r2, [r1]
 8003480:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003482:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003484:	2b00      	cmp	r3, #0
 8003486:	d1e4      	bne.n	8003452 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800348c:	4618      	mov	r0, r3
 800348e:	f7fe f962 	bl	8001756 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800349e:	b29b      	uxth	r3, r3
 80034a0:	1ad3      	subs	r3, r2, r3
 80034a2:	b29b      	uxth	r3, r3
 80034a4:	4619      	mov	r1, r3
 80034a6:	6878      	ldr	r0, [r7, #4]
 80034a8:	f000 f8ca 	bl	8003640 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80034ac:	e0b5      	b.n	800361a <HAL_UART_IRQHandler+0x5ae>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80034ba:	b29b      	uxth	r3, r3
 80034bc:	1ad3      	subs	r3, r2, r3
 80034be:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80034c8:	b29b      	uxth	r3, r3
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	f000 80a7 	beq.w	800361e <HAL_UART_IRQHandler+0x5b2>
          && (nb_rx_data > 0U))
 80034d0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	f000 80a2 	beq.w	800361e <HAL_UART_IRQHandler+0x5b2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034e2:	e853 3f00 	ldrex	r3, [r3]
 80034e6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80034e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034ea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80034ee:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	461a      	mov	r2, r3
 80034f8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80034fc:	647b      	str	r3, [r7, #68]	; 0x44
 80034fe:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003500:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003502:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003504:	e841 2300 	strex	r3, r2, [r1]
 8003508:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800350a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800350c:	2b00      	cmp	r3, #0
 800350e:	d1e4      	bne.n	80034da <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	3308      	adds	r3, #8
 8003516:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800351a:	e853 3f00 	ldrex	r3, [r3]
 800351e:	623b      	str	r3, [r7, #32]
   return(result);
 8003520:	6a3b      	ldr	r3, [r7, #32]
 8003522:	f023 0301 	bic.w	r3, r3, #1
 8003526:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	3308      	adds	r3, #8
 8003530:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003534:	633a      	str	r2, [r7, #48]	; 0x30
 8003536:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003538:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800353a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800353c:	e841 2300 	strex	r3, r2, [r1]
 8003540:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003544:	2b00      	cmp	r3, #0
 8003546:	d1e3      	bne.n	8003510 <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2220      	movs	r2, #32
 800354c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2200      	movs	r2, #0
 8003552:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2200      	movs	r2, #0
 8003558:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	e853 3f00 	ldrex	r3, [r3]
 8003566:	60fb      	str	r3, [r7, #12]
   return(result);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	f023 0310 	bic.w	r3, r3, #16
 800356e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	461a      	mov	r2, r3
 8003578:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800357c:	61fb      	str	r3, [r7, #28]
 800357e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003580:	69b9      	ldr	r1, [r7, #24]
 8003582:	69fa      	ldr	r2, [r7, #28]
 8003584:	e841 2300 	strex	r3, r2, [r1]
 8003588:	617b      	str	r3, [r7, #20]
   return(result);
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d1e4      	bne.n	800355a <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003590:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003594:	4619      	mov	r1, r3
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f000 f852 	bl	8003640 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800359c:	e03f      	b.n	800361e <HAL_UART_IRQHandler+0x5b2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800359e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d00e      	beq.n	80035c8 <HAL_UART_IRQHandler+0x55c>
 80035aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80035ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d008      	beq.n	80035c8 <HAL_UART_IRQHandler+0x55c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80035be:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80035c0:	6878      	ldr	r0, [r7, #4]
 80035c2:	f000 f849 	bl	8003658 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80035c6:	e02d      	b.n	8003624 <HAL_UART_IRQHandler+0x5b8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80035c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d00e      	beq.n	80035f2 <HAL_UART_IRQHandler+0x586>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80035d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d008      	beq.n	80035f2 <HAL_UART_IRQHandler+0x586>
  {
    if (huart->TxISR != NULL)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d01c      	beq.n	8003622 <HAL_UART_IRQHandler+0x5b6>
    {
      huart->TxISR(huart);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80035ec:	6878      	ldr	r0, [r7, #4]
 80035ee:	4798      	blx	r3
    }
    return;
 80035f0:	e017      	b.n	8003622 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80035f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d012      	beq.n	8003624 <HAL_UART_IRQHandler+0x5b8>
 80035fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003602:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003606:	2b00      	cmp	r3, #0
 8003608:	d00c      	beq.n	8003624 <HAL_UART_IRQHandler+0x5b8>
  {
    UART_EndTransmit_IT(huart);
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f000 fe3e 	bl	800428c <UART_EndTransmit_IT>
    return;
 8003610:	e008      	b.n	8003624 <HAL_UART_IRQHandler+0x5b8>
      return;
 8003612:	bf00      	nop
 8003614:	e006      	b.n	8003624 <HAL_UART_IRQHandler+0x5b8>
    return;
 8003616:	bf00      	nop
 8003618:	e004      	b.n	8003624 <HAL_UART_IRQHandler+0x5b8>
      return;
 800361a:	bf00      	nop
 800361c:	e002      	b.n	8003624 <HAL_UART_IRQHandler+0x5b8>
      return;
 800361e:	bf00      	nop
 8003620:	e000      	b.n	8003624 <HAL_UART_IRQHandler+0x5b8>
    return;
 8003622:	bf00      	nop
  }

}
 8003624:	37e8      	adds	r7, #232	; 0xe8
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}
 800362a:	bf00      	nop

0800362c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800362c:	b480      	push	{r7}
 800362e:	b083      	sub	sp, #12
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003634:	bf00      	nop
 8003636:	370c      	adds	r7, #12
 8003638:	46bd      	mov	sp, r7
 800363a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363e:	4770      	bx	lr

08003640 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003640:	b480      	push	{r7}
 8003642:	b083      	sub	sp, #12
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
 8003648:	460b      	mov	r3, r1
 800364a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800364c:	bf00      	nop
 800364e:	370c      	adds	r7, #12
 8003650:	46bd      	mov	sp, r7
 8003652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003656:	4770      	bx	lr

08003658 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003658:	b480      	push	{r7}
 800365a:	b083      	sub	sp, #12
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003660:	bf00      	nop
 8003662:	370c      	adds	r7, #12
 8003664:	46bd      	mov	sp, r7
 8003666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366a:	4770      	bx	lr

0800366c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b088      	sub	sp, #32
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003674:	2300      	movs	r3, #0
 8003676:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	689a      	ldr	r2, [r3, #8]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	691b      	ldr	r3, [r3, #16]
 8003680:	431a      	orrs	r2, r3
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	695b      	ldr	r3, [r3, #20]
 8003686:	431a      	orrs	r2, r3
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	69db      	ldr	r3, [r3, #28]
 800368c:	4313      	orrs	r3, r2
 800368e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	4ba7      	ldr	r3, [pc, #668]	; (8003934 <UART_SetConfig+0x2c8>)
 8003698:	4013      	ands	r3, r2
 800369a:	687a      	ldr	r2, [r7, #4]
 800369c:	6812      	ldr	r2, [r2, #0]
 800369e:	6979      	ldr	r1, [r7, #20]
 80036a0:	430b      	orrs	r3, r1
 80036a2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	68da      	ldr	r2, [r3, #12]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	430a      	orrs	r2, r1
 80036b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	699b      	ldr	r3, [r3, #24]
 80036be:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6a1b      	ldr	r3, [r3, #32]
 80036c4:	697a      	ldr	r2, [r7, #20]
 80036c6:	4313      	orrs	r3, r2
 80036c8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	697a      	ldr	r2, [r7, #20]
 80036da:	430a      	orrs	r2, r1
 80036dc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a95      	ldr	r2, [pc, #596]	; (8003938 <UART_SetConfig+0x2cc>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d120      	bne.n	800372a <UART_SetConfig+0xbe>
 80036e8:	4b94      	ldr	r3, [pc, #592]	; (800393c <UART_SetConfig+0x2d0>)
 80036ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036ee:	f003 0303 	and.w	r3, r3, #3
 80036f2:	2b03      	cmp	r3, #3
 80036f4:	d816      	bhi.n	8003724 <UART_SetConfig+0xb8>
 80036f6:	a201      	add	r2, pc, #4	; (adr r2, 80036fc <UART_SetConfig+0x90>)
 80036f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036fc:	0800370d 	.word	0x0800370d
 8003700:	08003719 	.word	0x08003719
 8003704:	08003713 	.word	0x08003713
 8003708:	0800371f 	.word	0x0800371f
 800370c:	2301      	movs	r3, #1
 800370e:	77fb      	strb	r3, [r7, #31]
 8003710:	e14f      	b.n	80039b2 <UART_SetConfig+0x346>
 8003712:	2302      	movs	r3, #2
 8003714:	77fb      	strb	r3, [r7, #31]
 8003716:	e14c      	b.n	80039b2 <UART_SetConfig+0x346>
 8003718:	2304      	movs	r3, #4
 800371a:	77fb      	strb	r3, [r7, #31]
 800371c:	e149      	b.n	80039b2 <UART_SetConfig+0x346>
 800371e:	2308      	movs	r3, #8
 8003720:	77fb      	strb	r3, [r7, #31]
 8003722:	e146      	b.n	80039b2 <UART_SetConfig+0x346>
 8003724:	2310      	movs	r3, #16
 8003726:	77fb      	strb	r3, [r7, #31]
 8003728:	e143      	b.n	80039b2 <UART_SetConfig+0x346>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a84      	ldr	r2, [pc, #528]	; (8003940 <UART_SetConfig+0x2d4>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d132      	bne.n	800379a <UART_SetConfig+0x12e>
 8003734:	4b81      	ldr	r3, [pc, #516]	; (800393c <UART_SetConfig+0x2d0>)
 8003736:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800373a:	f003 030c 	and.w	r3, r3, #12
 800373e:	2b0c      	cmp	r3, #12
 8003740:	d828      	bhi.n	8003794 <UART_SetConfig+0x128>
 8003742:	a201      	add	r2, pc, #4	; (adr r2, 8003748 <UART_SetConfig+0xdc>)
 8003744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003748:	0800377d 	.word	0x0800377d
 800374c:	08003795 	.word	0x08003795
 8003750:	08003795 	.word	0x08003795
 8003754:	08003795 	.word	0x08003795
 8003758:	08003789 	.word	0x08003789
 800375c:	08003795 	.word	0x08003795
 8003760:	08003795 	.word	0x08003795
 8003764:	08003795 	.word	0x08003795
 8003768:	08003783 	.word	0x08003783
 800376c:	08003795 	.word	0x08003795
 8003770:	08003795 	.word	0x08003795
 8003774:	08003795 	.word	0x08003795
 8003778:	0800378f 	.word	0x0800378f
 800377c:	2300      	movs	r3, #0
 800377e:	77fb      	strb	r3, [r7, #31]
 8003780:	e117      	b.n	80039b2 <UART_SetConfig+0x346>
 8003782:	2302      	movs	r3, #2
 8003784:	77fb      	strb	r3, [r7, #31]
 8003786:	e114      	b.n	80039b2 <UART_SetConfig+0x346>
 8003788:	2304      	movs	r3, #4
 800378a:	77fb      	strb	r3, [r7, #31]
 800378c:	e111      	b.n	80039b2 <UART_SetConfig+0x346>
 800378e:	2308      	movs	r3, #8
 8003790:	77fb      	strb	r3, [r7, #31]
 8003792:	e10e      	b.n	80039b2 <UART_SetConfig+0x346>
 8003794:	2310      	movs	r3, #16
 8003796:	77fb      	strb	r3, [r7, #31]
 8003798:	e10b      	b.n	80039b2 <UART_SetConfig+0x346>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a69      	ldr	r2, [pc, #420]	; (8003944 <UART_SetConfig+0x2d8>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d120      	bne.n	80037e6 <UART_SetConfig+0x17a>
 80037a4:	4b65      	ldr	r3, [pc, #404]	; (800393c <UART_SetConfig+0x2d0>)
 80037a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037aa:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80037ae:	2b30      	cmp	r3, #48	; 0x30
 80037b0:	d013      	beq.n	80037da <UART_SetConfig+0x16e>
 80037b2:	2b30      	cmp	r3, #48	; 0x30
 80037b4:	d814      	bhi.n	80037e0 <UART_SetConfig+0x174>
 80037b6:	2b20      	cmp	r3, #32
 80037b8:	d009      	beq.n	80037ce <UART_SetConfig+0x162>
 80037ba:	2b20      	cmp	r3, #32
 80037bc:	d810      	bhi.n	80037e0 <UART_SetConfig+0x174>
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d002      	beq.n	80037c8 <UART_SetConfig+0x15c>
 80037c2:	2b10      	cmp	r3, #16
 80037c4:	d006      	beq.n	80037d4 <UART_SetConfig+0x168>
 80037c6:	e00b      	b.n	80037e0 <UART_SetConfig+0x174>
 80037c8:	2300      	movs	r3, #0
 80037ca:	77fb      	strb	r3, [r7, #31]
 80037cc:	e0f1      	b.n	80039b2 <UART_SetConfig+0x346>
 80037ce:	2302      	movs	r3, #2
 80037d0:	77fb      	strb	r3, [r7, #31]
 80037d2:	e0ee      	b.n	80039b2 <UART_SetConfig+0x346>
 80037d4:	2304      	movs	r3, #4
 80037d6:	77fb      	strb	r3, [r7, #31]
 80037d8:	e0eb      	b.n	80039b2 <UART_SetConfig+0x346>
 80037da:	2308      	movs	r3, #8
 80037dc:	77fb      	strb	r3, [r7, #31]
 80037de:	e0e8      	b.n	80039b2 <UART_SetConfig+0x346>
 80037e0:	2310      	movs	r3, #16
 80037e2:	77fb      	strb	r3, [r7, #31]
 80037e4:	e0e5      	b.n	80039b2 <UART_SetConfig+0x346>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a57      	ldr	r2, [pc, #348]	; (8003948 <UART_SetConfig+0x2dc>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d120      	bne.n	8003832 <UART_SetConfig+0x1c6>
 80037f0:	4b52      	ldr	r3, [pc, #328]	; (800393c <UART_SetConfig+0x2d0>)
 80037f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037f6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80037fa:	2bc0      	cmp	r3, #192	; 0xc0
 80037fc:	d013      	beq.n	8003826 <UART_SetConfig+0x1ba>
 80037fe:	2bc0      	cmp	r3, #192	; 0xc0
 8003800:	d814      	bhi.n	800382c <UART_SetConfig+0x1c0>
 8003802:	2b80      	cmp	r3, #128	; 0x80
 8003804:	d009      	beq.n	800381a <UART_SetConfig+0x1ae>
 8003806:	2b80      	cmp	r3, #128	; 0x80
 8003808:	d810      	bhi.n	800382c <UART_SetConfig+0x1c0>
 800380a:	2b00      	cmp	r3, #0
 800380c:	d002      	beq.n	8003814 <UART_SetConfig+0x1a8>
 800380e:	2b40      	cmp	r3, #64	; 0x40
 8003810:	d006      	beq.n	8003820 <UART_SetConfig+0x1b4>
 8003812:	e00b      	b.n	800382c <UART_SetConfig+0x1c0>
 8003814:	2300      	movs	r3, #0
 8003816:	77fb      	strb	r3, [r7, #31]
 8003818:	e0cb      	b.n	80039b2 <UART_SetConfig+0x346>
 800381a:	2302      	movs	r3, #2
 800381c:	77fb      	strb	r3, [r7, #31]
 800381e:	e0c8      	b.n	80039b2 <UART_SetConfig+0x346>
 8003820:	2304      	movs	r3, #4
 8003822:	77fb      	strb	r3, [r7, #31]
 8003824:	e0c5      	b.n	80039b2 <UART_SetConfig+0x346>
 8003826:	2308      	movs	r3, #8
 8003828:	77fb      	strb	r3, [r7, #31]
 800382a:	e0c2      	b.n	80039b2 <UART_SetConfig+0x346>
 800382c:	2310      	movs	r3, #16
 800382e:	77fb      	strb	r3, [r7, #31]
 8003830:	e0bf      	b.n	80039b2 <UART_SetConfig+0x346>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a45      	ldr	r2, [pc, #276]	; (800394c <UART_SetConfig+0x2e0>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d125      	bne.n	8003888 <UART_SetConfig+0x21c>
 800383c:	4b3f      	ldr	r3, [pc, #252]	; (800393c <UART_SetConfig+0x2d0>)
 800383e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003842:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003846:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800384a:	d017      	beq.n	800387c <UART_SetConfig+0x210>
 800384c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003850:	d817      	bhi.n	8003882 <UART_SetConfig+0x216>
 8003852:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003856:	d00b      	beq.n	8003870 <UART_SetConfig+0x204>
 8003858:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800385c:	d811      	bhi.n	8003882 <UART_SetConfig+0x216>
 800385e:	2b00      	cmp	r3, #0
 8003860:	d003      	beq.n	800386a <UART_SetConfig+0x1fe>
 8003862:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003866:	d006      	beq.n	8003876 <UART_SetConfig+0x20a>
 8003868:	e00b      	b.n	8003882 <UART_SetConfig+0x216>
 800386a:	2300      	movs	r3, #0
 800386c:	77fb      	strb	r3, [r7, #31]
 800386e:	e0a0      	b.n	80039b2 <UART_SetConfig+0x346>
 8003870:	2302      	movs	r3, #2
 8003872:	77fb      	strb	r3, [r7, #31]
 8003874:	e09d      	b.n	80039b2 <UART_SetConfig+0x346>
 8003876:	2304      	movs	r3, #4
 8003878:	77fb      	strb	r3, [r7, #31]
 800387a:	e09a      	b.n	80039b2 <UART_SetConfig+0x346>
 800387c:	2308      	movs	r3, #8
 800387e:	77fb      	strb	r3, [r7, #31]
 8003880:	e097      	b.n	80039b2 <UART_SetConfig+0x346>
 8003882:	2310      	movs	r3, #16
 8003884:	77fb      	strb	r3, [r7, #31]
 8003886:	e094      	b.n	80039b2 <UART_SetConfig+0x346>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a30      	ldr	r2, [pc, #192]	; (8003950 <UART_SetConfig+0x2e4>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d125      	bne.n	80038de <UART_SetConfig+0x272>
 8003892:	4b2a      	ldr	r3, [pc, #168]	; (800393c <UART_SetConfig+0x2d0>)
 8003894:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003898:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800389c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80038a0:	d017      	beq.n	80038d2 <UART_SetConfig+0x266>
 80038a2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80038a6:	d817      	bhi.n	80038d8 <UART_SetConfig+0x26c>
 80038a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038ac:	d00b      	beq.n	80038c6 <UART_SetConfig+0x25a>
 80038ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038b2:	d811      	bhi.n	80038d8 <UART_SetConfig+0x26c>
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d003      	beq.n	80038c0 <UART_SetConfig+0x254>
 80038b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038bc:	d006      	beq.n	80038cc <UART_SetConfig+0x260>
 80038be:	e00b      	b.n	80038d8 <UART_SetConfig+0x26c>
 80038c0:	2301      	movs	r3, #1
 80038c2:	77fb      	strb	r3, [r7, #31]
 80038c4:	e075      	b.n	80039b2 <UART_SetConfig+0x346>
 80038c6:	2302      	movs	r3, #2
 80038c8:	77fb      	strb	r3, [r7, #31]
 80038ca:	e072      	b.n	80039b2 <UART_SetConfig+0x346>
 80038cc:	2304      	movs	r3, #4
 80038ce:	77fb      	strb	r3, [r7, #31]
 80038d0:	e06f      	b.n	80039b2 <UART_SetConfig+0x346>
 80038d2:	2308      	movs	r3, #8
 80038d4:	77fb      	strb	r3, [r7, #31]
 80038d6:	e06c      	b.n	80039b2 <UART_SetConfig+0x346>
 80038d8:	2310      	movs	r3, #16
 80038da:	77fb      	strb	r3, [r7, #31]
 80038dc:	e069      	b.n	80039b2 <UART_SetConfig+0x346>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a1c      	ldr	r2, [pc, #112]	; (8003954 <UART_SetConfig+0x2e8>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d137      	bne.n	8003958 <UART_SetConfig+0x2ec>
 80038e8:	4b14      	ldr	r3, [pc, #80]	; (800393c <UART_SetConfig+0x2d0>)
 80038ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038ee:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80038f2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80038f6:	d017      	beq.n	8003928 <UART_SetConfig+0x2bc>
 80038f8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80038fc:	d817      	bhi.n	800392e <UART_SetConfig+0x2c2>
 80038fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003902:	d00b      	beq.n	800391c <UART_SetConfig+0x2b0>
 8003904:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003908:	d811      	bhi.n	800392e <UART_SetConfig+0x2c2>
 800390a:	2b00      	cmp	r3, #0
 800390c:	d003      	beq.n	8003916 <UART_SetConfig+0x2aa>
 800390e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003912:	d006      	beq.n	8003922 <UART_SetConfig+0x2b6>
 8003914:	e00b      	b.n	800392e <UART_SetConfig+0x2c2>
 8003916:	2300      	movs	r3, #0
 8003918:	77fb      	strb	r3, [r7, #31]
 800391a:	e04a      	b.n	80039b2 <UART_SetConfig+0x346>
 800391c:	2302      	movs	r3, #2
 800391e:	77fb      	strb	r3, [r7, #31]
 8003920:	e047      	b.n	80039b2 <UART_SetConfig+0x346>
 8003922:	2304      	movs	r3, #4
 8003924:	77fb      	strb	r3, [r7, #31]
 8003926:	e044      	b.n	80039b2 <UART_SetConfig+0x346>
 8003928:	2308      	movs	r3, #8
 800392a:	77fb      	strb	r3, [r7, #31]
 800392c:	e041      	b.n	80039b2 <UART_SetConfig+0x346>
 800392e:	2310      	movs	r3, #16
 8003930:	77fb      	strb	r3, [r7, #31]
 8003932:	e03e      	b.n	80039b2 <UART_SetConfig+0x346>
 8003934:	efff69f3 	.word	0xefff69f3
 8003938:	40011000 	.word	0x40011000
 800393c:	40023800 	.word	0x40023800
 8003940:	40004400 	.word	0x40004400
 8003944:	40004800 	.word	0x40004800
 8003948:	40004c00 	.word	0x40004c00
 800394c:	40005000 	.word	0x40005000
 8003950:	40011400 	.word	0x40011400
 8003954:	40007800 	.word	0x40007800
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a71      	ldr	r2, [pc, #452]	; (8003b24 <UART_SetConfig+0x4b8>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d125      	bne.n	80039ae <UART_SetConfig+0x342>
 8003962:	4b71      	ldr	r3, [pc, #452]	; (8003b28 <UART_SetConfig+0x4bc>)
 8003964:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003968:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800396c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003970:	d017      	beq.n	80039a2 <UART_SetConfig+0x336>
 8003972:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003976:	d817      	bhi.n	80039a8 <UART_SetConfig+0x33c>
 8003978:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800397c:	d00b      	beq.n	8003996 <UART_SetConfig+0x32a>
 800397e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003982:	d811      	bhi.n	80039a8 <UART_SetConfig+0x33c>
 8003984:	2b00      	cmp	r3, #0
 8003986:	d003      	beq.n	8003990 <UART_SetConfig+0x324>
 8003988:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800398c:	d006      	beq.n	800399c <UART_SetConfig+0x330>
 800398e:	e00b      	b.n	80039a8 <UART_SetConfig+0x33c>
 8003990:	2300      	movs	r3, #0
 8003992:	77fb      	strb	r3, [r7, #31]
 8003994:	e00d      	b.n	80039b2 <UART_SetConfig+0x346>
 8003996:	2302      	movs	r3, #2
 8003998:	77fb      	strb	r3, [r7, #31]
 800399a:	e00a      	b.n	80039b2 <UART_SetConfig+0x346>
 800399c:	2304      	movs	r3, #4
 800399e:	77fb      	strb	r3, [r7, #31]
 80039a0:	e007      	b.n	80039b2 <UART_SetConfig+0x346>
 80039a2:	2308      	movs	r3, #8
 80039a4:	77fb      	strb	r3, [r7, #31]
 80039a6:	e004      	b.n	80039b2 <UART_SetConfig+0x346>
 80039a8:	2310      	movs	r3, #16
 80039aa:	77fb      	strb	r3, [r7, #31]
 80039ac:	e001      	b.n	80039b2 <UART_SetConfig+0x346>
 80039ae:	2310      	movs	r3, #16
 80039b0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	69db      	ldr	r3, [r3, #28]
 80039b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039ba:	d15a      	bne.n	8003a72 <UART_SetConfig+0x406>
  {
    switch (clocksource)
 80039bc:	7ffb      	ldrb	r3, [r7, #31]
 80039be:	2b08      	cmp	r3, #8
 80039c0:	d827      	bhi.n	8003a12 <UART_SetConfig+0x3a6>
 80039c2:	a201      	add	r2, pc, #4	; (adr r2, 80039c8 <UART_SetConfig+0x35c>)
 80039c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039c8:	080039ed 	.word	0x080039ed
 80039cc:	080039f5 	.word	0x080039f5
 80039d0:	080039fd 	.word	0x080039fd
 80039d4:	08003a13 	.word	0x08003a13
 80039d8:	08003a03 	.word	0x08003a03
 80039dc:	08003a13 	.word	0x08003a13
 80039e0:	08003a13 	.word	0x08003a13
 80039e4:	08003a13 	.word	0x08003a13
 80039e8:	08003a0b 	.word	0x08003a0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80039ec:	f7fe fde4 	bl	80025b8 <HAL_RCC_GetPCLK1Freq>
 80039f0:	61b8      	str	r0, [r7, #24]
        break;
 80039f2:	e013      	b.n	8003a1c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80039f4:	f7fe fdf4 	bl	80025e0 <HAL_RCC_GetPCLK2Freq>
 80039f8:	61b8      	str	r0, [r7, #24]
        break;
 80039fa:	e00f      	b.n	8003a1c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80039fc:	4b4b      	ldr	r3, [pc, #300]	; (8003b2c <UART_SetConfig+0x4c0>)
 80039fe:	61bb      	str	r3, [r7, #24]
        break;
 8003a00:	e00c      	b.n	8003a1c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a02:	f7fe fceb 	bl	80023dc <HAL_RCC_GetSysClockFreq>
 8003a06:	61b8      	str	r0, [r7, #24]
        break;
 8003a08:	e008      	b.n	8003a1c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a0e:	61bb      	str	r3, [r7, #24]
        break;
 8003a10:	e004      	b.n	8003a1c <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8003a12:	2300      	movs	r3, #0
 8003a14:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	77bb      	strb	r3, [r7, #30]
        break;
 8003a1a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003a1c:	69bb      	ldr	r3, [r7, #24]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d074      	beq.n	8003b0c <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003a22:	69bb      	ldr	r3, [r7, #24]
 8003a24:	005a      	lsls	r2, r3, #1
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	085b      	lsrs	r3, r3, #1
 8003a2c:	441a      	add	r2, r3
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a36:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	2b0f      	cmp	r3, #15
 8003a3c:	d916      	bls.n	8003a6c <UART_SetConfig+0x400>
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a44:	d212      	bcs.n	8003a6c <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	b29b      	uxth	r3, r3
 8003a4a:	f023 030f 	bic.w	r3, r3, #15
 8003a4e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	085b      	lsrs	r3, r3, #1
 8003a54:	b29b      	uxth	r3, r3
 8003a56:	f003 0307 	and.w	r3, r3, #7
 8003a5a:	b29a      	uxth	r2, r3
 8003a5c:	89fb      	ldrh	r3, [r7, #14]
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	89fa      	ldrh	r2, [r7, #14]
 8003a68:	60da      	str	r2, [r3, #12]
 8003a6a:	e04f      	b.n	8003b0c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	77bb      	strb	r3, [r7, #30]
 8003a70:	e04c      	b.n	8003b0c <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003a72:	7ffb      	ldrb	r3, [r7, #31]
 8003a74:	2b08      	cmp	r3, #8
 8003a76:	d828      	bhi.n	8003aca <UART_SetConfig+0x45e>
 8003a78:	a201      	add	r2, pc, #4	; (adr r2, 8003a80 <UART_SetConfig+0x414>)
 8003a7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a7e:	bf00      	nop
 8003a80:	08003aa5 	.word	0x08003aa5
 8003a84:	08003aad 	.word	0x08003aad
 8003a88:	08003ab5 	.word	0x08003ab5
 8003a8c:	08003acb 	.word	0x08003acb
 8003a90:	08003abb 	.word	0x08003abb
 8003a94:	08003acb 	.word	0x08003acb
 8003a98:	08003acb 	.word	0x08003acb
 8003a9c:	08003acb 	.word	0x08003acb
 8003aa0:	08003ac3 	.word	0x08003ac3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003aa4:	f7fe fd88 	bl	80025b8 <HAL_RCC_GetPCLK1Freq>
 8003aa8:	61b8      	str	r0, [r7, #24]
        break;
 8003aaa:	e013      	b.n	8003ad4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003aac:	f7fe fd98 	bl	80025e0 <HAL_RCC_GetPCLK2Freq>
 8003ab0:	61b8      	str	r0, [r7, #24]
        break;
 8003ab2:	e00f      	b.n	8003ad4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ab4:	4b1d      	ldr	r3, [pc, #116]	; (8003b2c <UART_SetConfig+0x4c0>)
 8003ab6:	61bb      	str	r3, [r7, #24]
        break;
 8003ab8:	e00c      	b.n	8003ad4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003aba:	f7fe fc8f 	bl	80023dc <HAL_RCC_GetSysClockFreq>
 8003abe:	61b8      	str	r0, [r7, #24]
        break;
 8003ac0:	e008      	b.n	8003ad4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ac2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ac6:	61bb      	str	r3, [r7, #24]
        break;
 8003ac8:	e004      	b.n	8003ad4 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8003aca:	2300      	movs	r3, #0
 8003acc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	77bb      	strb	r3, [r7, #30]
        break;
 8003ad2:	bf00      	nop
    }

    if (pclk != 0U)
 8003ad4:	69bb      	ldr	r3, [r7, #24]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d018      	beq.n	8003b0c <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	085a      	lsrs	r2, r3, #1
 8003ae0:	69bb      	ldr	r3, [r7, #24]
 8003ae2:	441a      	add	r2, r3
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aec:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	2b0f      	cmp	r3, #15
 8003af2:	d909      	bls.n	8003b08 <UART_SetConfig+0x49c>
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003afa:	d205      	bcs.n	8003b08 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	b29a      	uxth	r2, r3
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	60da      	str	r2, [r3, #12]
 8003b06:	e001      	b.n	8003b0c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2200      	movs	r2, #0
 8003b16:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003b18:	7fbb      	ldrb	r3, [r7, #30]
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	3720      	adds	r7, #32
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}
 8003b22:	bf00      	nop
 8003b24:	40007c00 	.word	0x40007c00
 8003b28:	40023800 	.word	0x40023800
 8003b2c:	00f42400 	.word	0x00f42400

08003b30 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b083      	sub	sp, #12
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b3c:	f003 0301 	and.w	r3, r3, #1
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d00a      	beq.n	8003b5a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	430a      	orrs	r2, r1
 8003b58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b5e:	f003 0302 	and.w	r3, r3, #2
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d00a      	beq.n	8003b7c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	430a      	orrs	r2, r1
 8003b7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b80:	f003 0304 	and.w	r3, r3, #4
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d00a      	beq.n	8003b9e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	430a      	orrs	r2, r1
 8003b9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba2:	f003 0308 	and.w	r3, r3, #8
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d00a      	beq.n	8003bc0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	430a      	orrs	r2, r1
 8003bbe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc4:	f003 0310 	and.w	r3, r3, #16
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d00a      	beq.n	8003be2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	430a      	orrs	r2, r1
 8003be0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be6:	f003 0320 	and.w	r3, r3, #32
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d00a      	beq.n	8003c04 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	430a      	orrs	r2, r1
 8003c02:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d01a      	beq.n	8003c46 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	430a      	orrs	r2, r1
 8003c24:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c2e:	d10a      	bne.n	8003c46 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	430a      	orrs	r2, r1
 8003c44:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d00a      	beq.n	8003c68 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	430a      	orrs	r2, r1
 8003c66:	605a      	str	r2, [r3, #4]
  }
}
 8003c68:	bf00      	nop
 8003c6a:	370c      	adds	r7, #12
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c72:	4770      	bx	lr

08003c74 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b086      	sub	sp, #24
 8003c78:	af02      	add	r7, sp, #8
 8003c7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003c84:	f7fd fc4a 	bl	800151c <HAL_GetTick>
 8003c88:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f003 0308 	and.w	r3, r3, #8
 8003c94:	2b08      	cmp	r3, #8
 8003c96:	d10e      	bne.n	8003cb6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c98:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003c9c:	9300      	str	r3, [sp, #0]
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	f000 f82d 	bl	8003d06 <UART_WaitOnFlagUntilTimeout>
 8003cac:	4603      	mov	r3, r0
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d001      	beq.n	8003cb6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003cb2:	2303      	movs	r3, #3
 8003cb4:	e023      	b.n	8003cfe <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f003 0304 	and.w	r3, r3, #4
 8003cc0:	2b04      	cmp	r3, #4
 8003cc2:	d10e      	bne.n	8003ce2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003cc4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003cc8:	9300      	str	r3, [sp, #0]
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	f000 f817 	bl	8003d06 <UART_WaitOnFlagUntilTimeout>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d001      	beq.n	8003ce2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003cde:	2303      	movs	r3, #3
 8003ce0:	e00d      	b.n	8003cfe <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2220      	movs	r2, #32
 8003ce6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2220      	movs	r2, #32
 8003cec:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003cfc:	2300      	movs	r3, #0
}
 8003cfe:	4618      	mov	r0, r3
 8003d00:	3710      	adds	r7, #16
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}

08003d06 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003d06:	b580      	push	{r7, lr}
 8003d08:	b09c      	sub	sp, #112	; 0x70
 8003d0a:	af00      	add	r7, sp, #0
 8003d0c:	60f8      	str	r0, [r7, #12]
 8003d0e:	60b9      	str	r1, [r7, #8]
 8003d10:	603b      	str	r3, [r7, #0]
 8003d12:	4613      	mov	r3, r2
 8003d14:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d16:	e0a5      	b.n	8003e64 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d18:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d1e:	f000 80a1 	beq.w	8003e64 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d22:	f7fd fbfb 	bl	800151c <HAL_GetTick>
 8003d26:	4602      	mov	r2, r0
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	1ad3      	subs	r3, r2, r3
 8003d2c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003d2e:	429a      	cmp	r2, r3
 8003d30:	d302      	bcc.n	8003d38 <UART_WaitOnFlagUntilTimeout+0x32>
 8003d32:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d13e      	bne.n	8003db6 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d40:	e853 3f00 	ldrex	r3, [r3]
 8003d44:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003d46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d48:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003d4c:	667b      	str	r3, [r7, #100]	; 0x64
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	461a      	mov	r2, r3
 8003d54:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003d56:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d58:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d5a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003d5c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003d5e:	e841 2300 	strex	r3, r2, [r1]
 8003d62:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003d64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d1e6      	bne.n	8003d38 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	3308      	adds	r3, #8
 8003d70:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d74:	e853 3f00 	ldrex	r3, [r3]
 8003d78:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003d7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d7c:	f023 0301 	bic.w	r3, r3, #1
 8003d80:	663b      	str	r3, [r7, #96]	; 0x60
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	3308      	adds	r3, #8
 8003d88:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003d8a:	64ba      	str	r2, [r7, #72]	; 0x48
 8003d8c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d8e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003d90:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d92:	e841 2300 	strex	r3, r2, [r1]
 8003d96:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003d98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d1e5      	bne.n	8003d6a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	2220      	movs	r2, #32
 8003da2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2220      	movs	r2, #32
 8003da8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	2200      	movs	r2, #0
 8003dae:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003db2:	2303      	movs	r3, #3
 8003db4:	e067      	b.n	8003e86 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f003 0304 	and.w	r3, r3, #4
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d04f      	beq.n	8003e64 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	69db      	ldr	r3, [r3, #28]
 8003dca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003dce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003dd2:	d147      	bne.n	8003e64 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003ddc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003de6:	e853 3f00 	ldrex	r3, [r3]
 8003dea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dee:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003df2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	461a      	mov	r2, r3
 8003dfa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dfc:	637b      	str	r3, [r7, #52]	; 0x34
 8003dfe:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e00:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003e02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e04:	e841 2300 	strex	r3, r2, [r1]
 8003e08:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d1e6      	bne.n	8003dde <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	3308      	adds	r3, #8
 8003e16:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	e853 3f00 	ldrex	r3, [r3]
 8003e1e:	613b      	str	r3, [r7, #16]
   return(result);
 8003e20:	693b      	ldr	r3, [r7, #16]
 8003e22:	f023 0301 	bic.w	r3, r3, #1
 8003e26:	66bb      	str	r3, [r7, #104]	; 0x68
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	3308      	adds	r3, #8
 8003e2e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003e30:	623a      	str	r2, [r7, #32]
 8003e32:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e34:	69f9      	ldr	r1, [r7, #28]
 8003e36:	6a3a      	ldr	r2, [r7, #32]
 8003e38:	e841 2300 	strex	r3, r2, [r1]
 8003e3c:	61bb      	str	r3, [r7, #24]
   return(result);
 8003e3e:	69bb      	ldr	r3, [r7, #24]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d1e5      	bne.n	8003e10 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2220      	movs	r2, #32
 8003e48:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	2220      	movs	r2, #32
 8003e4e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	2220      	movs	r2, #32
 8003e54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003e60:	2303      	movs	r3, #3
 8003e62:	e010      	b.n	8003e86 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	69da      	ldr	r2, [r3, #28]
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	4013      	ands	r3, r2
 8003e6e:	68ba      	ldr	r2, [r7, #8]
 8003e70:	429a      	cmp	r2, r3
 8003e72:	bf0c      	ite	eq
 8003e74:	2301      	moveq	r3, #1
 8003e76:	2300      	movne	r3, #0
 8003e78:	b2db      	uxtb	r3, r3
 8003e7a:	461a      	mov	r2, r3
 8003e7c:	79fb      	ldrb	r3, [r7, #7]
 8003e7e:	429a      	cmp	r2, r3
 8003e80:	f43f af4a 	beq.w	8003d18 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e84:	2300      	movs	r3, #0
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	3770      	adds	r7, #112	; 0x70
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}
	...

08003e90 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b097      	sub	sp, #92	; 0x5c
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	60f8      	str	r0, [r7, #12]
 8003e98:	60b9      	str	r1, [r7, #8]
 8003e9a:	4613      	mov	r3, r2
 8003e9c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	68ba      	ldr	r2, [r7, #8]
 8003ea2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	88fa      	ldrh	r2, [r7, #6]
 8003ea8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	88fa      	ldrh	r2, [r7, #6]
 8003eb0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	689b      	ldr	r3, [r3, #8]
 8003ebe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ec2:	d10e      	bne.n	8003ee2 <UART_Start_Receive_IT+0x52>
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	691b      	ldr	r3, [r3, #16]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d105      	bne.n	8003ed8 <UART_Start_Receive_IT+0x48>
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003ed2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003ed6:	e02d      	b.n	8003f34 <UART_Start_Receive_IT+0xa4>
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	22ff      	movs	r2, #255	; 0xff
 8003edc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003ee0:	e028      	b.n	8003f34 <UART_Start_Receive_IT+0xa4>
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d10d      	bne.n	8003f06 <UART_Start_Receive_IT+0x76>
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	691b      	ldr	r3, [r3, #16]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d104      	bne.n	8003efc <UART_Start_Receive_IT+0x6c>
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	22ff      	movs	r2, #255	; 0xff
 8003ef6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003efa:	e01b      	b.n	8003f34 <UART_Start_Receive_IT+0xa4>
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	227f      	movs	r2, #127	; 0x7f
 8003f00:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003f04:	e016      	b.n	8003f34 <UART_Start_Receive_IT+0xa4>
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003f0e:	d10d      	bne.n	8003f2c <UART_Start_Receive_IT+0x9c>
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	691b      	ldr	r3, [r3, #16]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d104      	bne.n	8003f22 <UART_Start_Receive_IT+0x92>
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	227f      	movs	r2, #127	; 0x7f
 8003f1c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003f20:	e008      	b.n	8003f34 <UART_Start_Receive_IT+0xa4>
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	223f      	movs	r2, #63	; 0x3f
 8003f26:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003f2a:	e003      	b.n	8003f34 <UART_Start_Receive_IT+0xa4>
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2200      	movs	r2, #0
 8003f38:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2222      	movs	r2, #34	; 0x22
 8003f40:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	3308      	adds	r3, #8
 8003f48:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f4c:	e853 3f00 	ldrex	r3, [r3]
 8003f50:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003f52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f54:	f043 0301 	orr.w	r3, r3, #1
 8003f58:	657b      	str	r3, [r7, #84]	; 0x54
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	3308      	adds	r3, #8
 8003f60:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003f62:	64ba      	str	r2, [r7, #72]	; 0x48
 8003f64:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f66:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003f68:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f6a:	e841 2300 	strex	r3, r2, [r1]
 8003f6e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003f70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d1e5      	bne.n	8003f42 <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f7e:	d107      	bne.n	8003f90 <UART_Start_Receive_IT+0x100>
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	691b      	ldr	r3, [r3, #16]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d103      	bne.n	8003f90 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	4a24      	ldr	r2, [pc, #144]	; (800401c <UART_Start_Receive_IT+0x18c>)
 8003f8c:	665a      	str	r2, [r3, #100]	; 0x64
 8003f8e:	e002      	b.n	8003f96 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	4a23      	ldr	r2, [pc, #140]	; (8004020 <UART_Start_Receive_IT+0x190>)
 8003f94:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	691b      	ldr	r3, [r3, #16]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d019      	beq.n	8003fda <UART_Start_Receive_IT+0x14a>
  { 
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fae:	e853 3f00 	ldrex	r3, [r3]
 8003fb2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb6:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8003fba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	461a      	mov	r2, r3
 8003fc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fc4:	637b      	str	r3, [r7, #52]	; 0x34
 8003fc6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fc8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003fca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003fcc:	e841 2300 	strex	r3, r2, [r1]
 8003fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d1e6      	bne.n	8003fa6 <UART_Start_Receive_IT+0x116>
 8003fd8:	e018      	b.n	800400c <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	e853 3f00 	ldrex	r3, [r3]
 8003fe6:	613b      	str	r3, [r7, #16]
   return(result);
 8003fe8:	693b      	ldr	r3, [r7, #16]
 8003fea:	f043 0320 	orr.w	r3, r3, #32
 8003fee:	653b      	str	r3, [r7, #80]	; 0x50
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	461a      	mov	r2, r3
 8003ff6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ff8:	623b      	str	r3, [r7, #32]
 8003ffa:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ffc:	69f9      	ldr	r1, [r7, #28]
 8003ffe:	6a3a      	ldr	r2, [r7, #32]
 8004000:	e841 2300 	strex	r3, r2, [r1]
 8004004:	61bb      	str	r3, [r7, #24]
   return(result);
 8004006:	69bb      	ldr	r3, [r7, #24]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d1e6      	bne.n	8003fda <UART_Start_Receive_IT+0x14a>
  }
  return HAL_OK;
 800400c:	2300      	movs	r3, #0
}
 800400e:	4618      	mov	r0, r3
 8004010:	375c      	adds	r7, #92	; 0x5c
 8004012:	46bd      	mov	sp, r7
 8004014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004018:	4770      	bx	lr
 800401a:	bf00      	nop
 800401c:	0800443d 	.word	0x0800443d
 8004020:	080042e1 	.word	0x080042e1

08004024 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004024:	b480      	push	{r7}
 8004026:	b095      	sub	sp, #84	; 0x54
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004032:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004034:	e853 3f00 	ldrex	r3, [r3]
 8004038:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800403a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800403c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004040:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	461a      	mov	r2, r3
 8004048:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800404a:	643b      	str	r3, [r7, #64]	; 0x40
 800404c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800404e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004050:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004052:	e841 2300 	strex	r3, r2, [r1]
 8004056:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800405a:	2b00      	cmp	r3, #0
 800405c:	d1e6      	bne.n	800402c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	3308      	adds	r3, #8
 8004064:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004066:	6a3b      	ldr	r3, [r7, #32]
 8004068:	e853 3f00 	ldrex	r3, [r3]
 800406c:	61fb      	str	r3, [r7, #28]
   return(result);
 800406e:	69fb      	ldr	r3, [r7, #28]
 8004070:	f023 0301 	bic.w	r3, r3, #1
 8004074:	64bb      	str	r3, [r7, #72]	; 0x48
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	3308      	adds	r3, #8
 800407c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800407e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004080:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004082:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004084:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004086:	e841 2300 	strex	r3, r2, [r1]
 800408a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800408c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800408e:	2b00      	cmp	r3, #0
 8004090:	d1e5      	bne.n	800405e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004096:	2b01      	cmp	r3, #1
 8004098:	d118      	bne.n	80040cc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	e853 3f00 	ldrex	r3, [r3]
 80040a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	f023 0310 	bic.w	r3, r3, #16
 80040ae:	647b      	str	r3, [r7, #68]	; 0x44
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	461a      	mov	r2, r3
 80040b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80040b8:	61bb      	str	r3, [r7, #24]
 80040ba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040bc:	6979      	ldr	r1, [r7, #20]
 80040be:	69ba      	ldr	r2, [r7, #24]
 80040c0:	e841 2300 	strex	r3, r2, [r1]
 80040c4:	613b      	str	r3, [r7, #16]
   return(result);
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d1e6      	bne.n	800409a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2220      	movs	r2, #32
 80040d0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2200      	movs	r2, #0
 80040d6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2200      	movs	r2, #0
 80040dc:	665a      	str	r2, [r3, #100]	; 0x64
}
 80040de:	bf00      	nop
 80040e0:	3754      	adds	r7, #84	; 0x54
 80040e2:	46bd      	mov	sp, r7
 80040e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e8:	4770      	bx	lr

080040ea <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80040ea:	b580      	push	{r7, lr}
 80040ec:	b084      	sub	sp, #16
 80040ee:	af00      	add	r7, sp, #0
 80040f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040f6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	2200      	movs	r2, #0
 80040fc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	2200      	movs	r2, #0
 8004104:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004108:	68f8      	ldr	r0, [r7, #12]
 800410a:	f7ff fa8f 	bl	800362c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800410e:	bf00      	nop
 8004110:	3710      	adds	r7, #16
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}

08004116 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004116:	b480      	push	{r7}
 8004118:	b08f      	sub	sp, #60	; 0x3c
 800411a:	af00      	add	r7, sp, #0
 800411c:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004122:	2b21      	cmp	r3, #33	; 0x21
 8004124:	d14c      	bne.n	80041c0 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800412c:	b29b      	uxth	r3, r3
 800412e:	2b00      	cmp	r3, #0
 8004130:	d132      	bne.n	8004198 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004138:	6a3b      	ldr	r3, [r7, #32]
 800413a:	e853 3f00 	ldrex	r3, [r3]
 800413e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004140:	69fb      	ldr	r3, [r7, #28]
 8004142:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004146:	637b      	str	r3, [r7, #52]	; 0x34
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	461a      	mov	r2, r3
 800414e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004150:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004152:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004154:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004156:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004158:	e841 2300 	strex	r3, r2, [r1]
 800415c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800415e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004160:	2b00      	cmp	r3, #0
 8004162:	d1e6      	bne.n	8004132 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	e853 3f00 	ldrex	r3, [r3]
 8004170:	60bb      	str	r3, [r7, #8]
   return(result);
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004178:	633b      	str	r3, [r7, #48]	; 0x30
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	461a      	mov	r2, r3
 8004180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004182:	61bb      	str	r3, [r7, #24]
 8004184:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004186:	6979      	ldr	r1, [r7, #20]
 8004188:	69ba      	ldr	r2, [r7, #24]
 800418a:	e841 2300 	strex	r3, r2, [r1]
 800418e:	613b      	str	r3, [r7, #16]
   return(result);
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d1e6      	bne.n	8004164 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8004196:	e013      	b.n	80041c0 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800419c:	781a      	ldrb	r2, [r3, #0]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041a8:	1c5a      	adds	r2, r3, #1
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80041b4:	b29b      	uxth	r3, r3
 80041b6:	3b01      	subs	r3, #1
 80041b8:	b29a      	uxth	r2, r3
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80041c0:	bf00      	nop
 80041c2:	373c      	adds	r7, #60	; 0x3c
 80041c4:	46bd      	mov	sp, r7
 80041c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ca:	4770      	bx	lr

080041cc <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b091      	sub	sp, #68	; 0x44
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80041d8:	2b21      	cmp	r3, #33	; 0x21
 80041da:	d151      	bne.n	8004280 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80041e2:	b29b      	uxth	r3, r3
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d132      	bne.n	800424e <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f0:	e853 3f00 	ldrex	r3, [r3]
 80041f4:	623b      	str	r3, [r7, #32]
   return(result);
 80041f6:	6a3b      	ldr	r3, [r7, #32]
 80041f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041fc:	63bb      	str	r3, [r7, #56]	; 0x38
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	461a      	mov	r2, r3
 8004204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004206:	633b      	str	r3, [r7, #48]	; 0x30
 8004208:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800420a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800420c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800420e:	e841 2300 	strex	r3, r2, [r1]
 8004212:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004216:	2b00      	cmp	r3, #0
 8004218:	d1e6      	bne.n	80041e8 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	e853 3f00 	ldrex	r3, [r3]
 8004226:	60fb      	str	r3, [r7, #12]
   return(result);
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800422e:	637b      	str	r3, [r7, #52]	; 0x34
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	461a      	mov	r2, r3
 8004236:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004238:	61fb      	str	r3, [r7, #28]
 800423a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800423c:	69b9      	ldr	r1, [r7, #24]
 800423e:	69fa      	ldr	r2, [r7, #28]
 8004240:	e841 2300 	strex	r3, r2, [r1]
 8004244:	617b      	str	r3, [r7, #20]
   return(result);
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d1e6      	bne.n	800421a <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800424c:	e018      	b.n	8004280 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004252:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8004254:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004256:	881b      	ldrh	r3, [r3, #0]
 8004258:	461a      	mov	r2, r3
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004262:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004268:	1c9a      	adds	r2, r3, #2
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004274:	b29b      	uxth	r3, r3
 8004276:	3b01      	subs	r3, #1
 8004278:	b29a      	uxth	r2, r3
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8004280:	bf00      	nop
 8004282:	3744      	adds	r7, #68	; 0x44
 8004284:	46bd      	mov	sp, r7
 8004286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428a:	4770      	bx	lr

0800428c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b088      	sub	sp, #32
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	e853 3f00 	ldrex	r3, [r3]
 80042a0:	60bb      	str	r3, [r7, #8]
   return(result);
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042a8:	61fb      	str	r3, [r7, #28]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	461a      	mov	r2, r3
 80042b0:	69fb      	ldr	r3, [r7, #28]
 80042b2:	61bb      	str	r3, [r7, #24]
 80042b4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042b6:	6979      	ldr	r1, [r7, #20]
 80042b8:	69ba      	ldr	r2, [r7, #24]
 80042ba:	e841 2300 	strex	r3, r2, [r1]
 80042be:	613b      	str	r3, [r7, #16]
   return(result);
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d1e6      	bne.n	8004294 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2220      	movs	r2, #32
 80042ca:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2200      	movs	r2, #0
 80042d0:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80042d2:	6878      	ldr	r0, [r7, #4]
 80042d4:	f7fd f874 	bl	80013c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80042d8:	bf00      	nop
 80042da:	3720      	adds	r7, #32
 80042dc:	46bd      	mov	sp, r7
 80042de:	bd80      	pop	{r7, pc}

080042e0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b096      	sub	sp, #88	; 0x58
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80042ee:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042f6:	2b22      	cmp	r3, #34	; 0x22
 80042f8:	f040 8094 	bne.w	8004424 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004302:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004306:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800430a:	b2d9      	uxtb	r1, r3
 800430c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004310:	b2da      	uxtb	r2, r3
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004316:	400a      	ands	r2, r1
 8004318:	b2d2      	uxtb	r2, r2
 800431a:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004320:	1c5a      	adds	r2, r3, #1
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800432c:	b29b      	uxth	r3, r3
 800432e:	3b01      	subs	r3, #1
 8004330:	b29a      	uxth	r2, r3
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800433e:	b29b      	uxth	r3, r3
 8004340:	2b00      	cmp	r3, #0
 8004342:	d177      	bne.n	8004434 <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800434a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800434c:	e853 3f00 	ldrex	r3, [r3]
 8004350:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004352:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004354:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004358:	653b      	str	r3, [r7, #80]	; 0x50
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	461a      	mov	r2, r3
 8004360:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004362:	647b      	str	r3, [r7, #68]	; 0x44
 8004364:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004366:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004368:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800436a:	e841 2300 	strex	r3, r2, [r1]
 800436e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004370:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004372:	2b00      	cmp	r3, #0
 8004374:	d1e6      	bne.n	8004344 <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	3308      	adds	r3, #8
 800437c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800437e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004380:	e853 3f00 	ldrex	r3, [r3]
 8004384:	623b      	str	r3, [r7, #32]
   return(result);
 8004386:	6a3b      	ldr	r3, [r7, #32]
 8004388:	f023 0301 	bic.w	r3, r3, #1
 800438c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	3308      	adds	r3, #8
 8004394:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004396:	633a      	str	r2, [r7, #48]	; 0x30
 8004398:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800439a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800439c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800439e:	e841 2300 	strex	r3, r2, [r1]
 80043a2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80043a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d1e5      	bne.n	8004376 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2220      	movs	r2, #32
 80043ae:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2200      	movs	r2, #0
 80043b4:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043ba:	2b01      	cmp	r3, #1
 80043bc:	d12e      	bne.n	800441c <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2200      	movs	r2, #0
 80043c2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	e853 3f00 	ldrex	r3, [r3]
 80043d0:	60fb      	str	r3, [r7, #12]
   return(result);
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	f023 0310 	bic.w	r3, r3, #16
 80043d8:	64bb      	str	r3, [r7, #72]	; 0x48
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	461a      	mov	r2, r3
 80043e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043e2:	61fb      	str	r3, [r7, #28]
 80043e4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043e6:	69b9      	ldr	r1, [r7, #24]
 80043e8:	69fa      	ldr	r2, [r7, #28]
 80043ea:	e841 2300 	strex	r3, r2, [r1]
 80043ee:	617b      	str	r3, [r7, #20]
   return(result);
 80043f0:	697b      	ldr	r3, [r7, #20]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d1e6      	bne.n	80043c4 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	69db      	ldr	r3, [r3, #28]
 80043fc:	f003 0310 	and.w	r3, r3, #16
 8004400:	2b10      	cmp	r3, #16
 8004402:	d103      	bne.n	800440c <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	2210      	movs	r2, #16
 800440a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004412:	4619      	mov	r1, r3
 8004414:	6878      	ldr	r0, [r7, #4]
 8004416:	f7ff f913 	bl	8003640 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800441a:	e00b      	b.n	8004434 <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 800441c:	6878      	ldr	r0, [r7, #4]
 800441e:	f7fc ff9f 	bl	8001360 <HAL_UART_RxCpltCallback>
}
 8004422:	e007      	b.n	8004434 <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	699a      	ldr	r2, [r3, #24]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f042 0208 	orr.w	r2, r2, #8
 8004432:	619a      	str	r2, [r3, #24]
}
 8004434:	bf00      	nop
 8004436:	3758      	adds	r7, #88	; 0x58
 8004438:	46bd      	mov	sp, r7
 800443a:	bd80      	pop	{r7, pc}

0800443c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b096      	sub	sp, #88	; 0x58
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800444a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004452:	2b22      	cmp	r3, #34	; 0x22
 8004454:	f040 8094 	bne.w	8004580 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800445e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004466:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8004468:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800446c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004470:	4013      	ands	r3, r2
 8004472:	b29a      	uxth	r2, r3
 8004474:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004476:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800447c:	1c9a      	adds	r2, r3, #2
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004488:	b29b      	uxth	r3, r3
 800448a:	3b01      	subs	r3, #1
 800448c:	b29a      	uxth	r2, r3
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800449a:	b29b      	uxth	r3, r3
 800449c:	2b00      	cmp	r3, #0
 800449e:	d177      	bne.n	8004590 <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044a8:	e853 3f00 	ldrex	r3, [r3]
 80044ac:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80044ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044b0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80044b4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	461a      	mov	r2, r3
 80044bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044be:	643b      	str	r3, [r7, #64]	; 0x40
 80044c0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044c2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80044c4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80044c6:	e841 2300 	strex	r3, r2, [r1]
 80044ca:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80044cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d1e6      	bne.n	80044a0 <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	3308      	adds	r3, #8
 80044d8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044da:	6a3b      	ldr	r3, [r7, #32]
 80044dc:	e853 3f00 	ldrex	r3, [r3]
 80044e0:	61fb      	str	r3, [r7, #28]
   return(result);
 80044e2:	69fb      	ldr	r3, [r7, #28]
 80044e4:	f023 0301 	bic.w	r3, r3, #1
 80044e8:	64bb      	str	r3, [r7, #72]	; 0x48
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	3308      	adds	r3, #8
 80044f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80044f2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80044f4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80044f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80044fa:	e841 2300 	strex	r3, r2, [r1]
 80044fe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004502:	2b00      	cmp	r3, #0
 8004504:	d1e5      	bne.n	80044d2 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2220      	movs	r2, #32
 800450a:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2200      	movs	r2, #0
 8004510:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004516:	2b01      	cmp	r3, #1
 8004518:	d12e      	bne.n	8004578 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2200      	movs	r2, #0
 800451e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	e853 3f00 	ldrex	r3, [r3]
 800452c:	60bb      	str	r3, [r7, #8]
   return(result);
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	f023 0310 	bic.w	r3, r3, #16
 8004534:	647b      	str	r3, [r7, #68]	; 0x44
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	461a      	mov	r2, r3
 800453c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800453e:	61bb      	str	r3, [r7, #24]
 8004540:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004542:	6979      	ldr	r1, [r7, #20]
 8004544:	69ba      	ldr	r2, [r7, #24]
 8004546:	e841 2300 	strex	r3, r2, [r1]
 800454a:	613b      	str	r3, [r7, #16]
   return(result);
 800454c:	693b      	ldr	r3, [r7, #16]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d1e6      	bne.n	8004520 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	69db      	ldr	r3, [r3, #28]
 8004558:	f003 0310 	and.w	r3, r3, #16
 800455c:	2b10      	cmp	r3, #16
 800455e:	d103      	bne.n	8004568 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	2210      	movs	r2, #16
 8004566:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800456e:	4619      	mov	r1, r3
 8004570:	6878      	ldr	r0, [r7, #4]
 8004572:	f7ff f865 	bl	8003640 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004576:	e00b      	b.n	8004590 <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8004578:	6878      	ldr	r0, [r7, #4]
 800457a:	f7fc fef1 	bl	8001360 <HAL_UART_RxCpltCallback>
}
 800457e:	e007      	b.n	8004590 <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	699a      	ldr	r2, [r3, #24]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f042 0208 	orr.w	r2, r2, #8
 800458e:	619a      	str	r2, [r3, #24]
}
 8004590:	bf00      	nop
 8004592:	3758      	adds	r7, #88	; 0x58
 8004594:	46bd      	mov	sp, r7
 8004596:	bd80      	pop	{r7, pc}

08004598 <__errno>:
 8004598:	4b01      	ldr	r3, [pc, #4]	; (80045a0 <__errno+0x8>)
 800459a:	6818      	ldr	r0, [r3, #0]
 800459c:	4770      	bx	lr
 800459e:	bf00      	nop
 80045a0:	2000000c 	.word	0x2000000c

080045a4 <__libc_init_array>:
 80045a4:	b570      	push	{r4, r5, r6, lr}
 80045a6:	4d0d      	ldr	r5, [pc, #52]	; (80045dc <__libc_init_array+0x38>)
 80045a8:	4c0d      	ldr	r4, [pc, #52]	; (80045e0 <__libc_init_array+0x3c>)
 80045aa:	1b64      	subs	r4, r4, r5
 80045ac:	10a4      	asrs	r4, r4, #2
 80045ae:	2600      	movs	r6, #0
 80045b0:	42a6      	cmp	r6, r4
 80045b2:	d109      	bne.n	80045c8 <__libc_init_array+0x24>
 80045b4:	4d0b      	ldr	r5, [pc, #44]	; (80045e4 <__libc_init_array+0x40>)
 80045b6:	4c0c      	ldr	r4, [pc, #48]	; (80045e8 <__libc_init_array+0x44>)
 80045b8:	f001 f936 	bl	8005828 <_init>
 80045bc:	1b64      	subs	r4, r4, r5
 80045be:	10a4      	asrs	r4, r4, #2
 80045c0:	2600      	movs	r6, #0
 80045c2:	42a6      	cmp	r6, r4
 80045c4:	d105      	bne.n	80045d2 <__libc_init_array+0x2e>
 80045c6:	bd70      	pop	{r4, r5, r6, pc}
 80045c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80045cc:	4798      	blx	r3
 80045ce:	3601      	adds	r6, #1
 80045d0:	e7ee      	b.n	80045b0 <__libc_init_array+0xc>
 80045d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80045d6:	4798      	blx	r3
 80045d8:	3601      	adds	r6, #1
 80045da:	e7f2      	b.n	80045c2 <__libc_init_array+0x1e>
 80045dc:	08005d10 	.word	0x08005d10
 80045e0:	08005d10 	.word	0x08005d10
 80045e4:	08005d10 	.word	0x08005d10
 80045e8:	08005d14 	.word	0x08005d14

080045ec <memset>:
 80045ec:	4402      	add	r2, r0
 80045ee:	4603      	mov	r3, r0
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d100      	bne.n	80045f6 <memset+0xa>
 80045f4:	4770      	bx	lr
 80045f6:	f803 1b01 	strb.w	r1, [r3], #1
 80045fa:	e7f9      	b.n	80045f0 <memset+0x4>

080045fc <siprintf>:
 80045fc:	b40e      	push	{r1, r2, r3}
 80045fe:	b500      	push	{lr}
 8004600:	b09c      	sub	sp, #112	; 0x70
 8004602:	ab1d      	add	r3, sp, #116	; 0x74
 8004604:	9002      	str	r0, [sp, #8]
 8004606:	9006      	str	r0, [sp, #24]
 8004608:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800460c:	4809      	ldr	r0, [pc, #36]	; (8004634 <siprintf+0x38>)
 800460e:	9107      	str	r1, [sp, #28]
 8004610:	9104      	str	r1, [sp, #16]
 8004612:	4909      	ldr	r1, [pc, #36]	; (8004638 <siprintf+0x3c>)
 8004614:	f853 2b04 	ldr.w	r2, [r3], #4
 8004618:	9105      	str	r1, [sp, #20]
 800461a:	6800      	ldr	r0, [r0, #0]
 800461c:	9301      	str	r3, [sp, #4]
 800461e:	a902      	add	r1, sp, #8
 8004620:	f000 f8ba 	bl	8004798 <_svfiprintf_r>
 8004624:	9b02      	ldr	r3, [sp, #8]
 8004626:	2200      	movs	r2, #0
 8004628:	701a      	strb	r2, [r3, #0]
 800462a:	b01c      	add	sp, #112	; 0x70
 800462c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004630:	b003      	add	sp, #12
 8004632:	4770      	bx	lr
 8004634:	2000000c 	.word	0x2000000c
 8004638:	ffff0208 	.word	0xffff0208

0800463c <siscanf>:
 800463c:	b40e      	push	{r1, r2, r3}
 800463e:	b510      	push	{r4, lr}
 8004640:	b09f      	sub	sp, #124	; 0x7c
 8004642:	ac21      	add	r4, sp, #132	; 0x84
 8004644:	f44f 7101 	mov.w	r1, #516	; 0x204
 8004648:	f854 2b04 	ldr.w	r2, [r4], #4
 800464c:	9201      	str	r2, [sp, #4]
 800464e:	f8ad 101c 	strh.w	r1, [sp, #28]
 8004652:	9004      	str	r0, [sp, #16]
 8004654:	9008      	str	r0, [sp, #32]
 8004656:	f7fb fdf3 	bl	8000240 <strlen>
 800465a:	4b0c      	ldr	r3, [pc, #48]	; (800468c <siscanf+0x50>)
 800465c:	9005      	str	r0, [sp, #20]
 800465e:	9009      	str	r0, [sp, #36]	; 0x24
 8004660:	930d      	str	r3, [sp, #52]	; 0x34
 8004662:	480b      	ldr	r0, [pc, #44]	; (8004690 <siscanf+0x54>)
 8004664:	9a01      	ldr	r2, [sp, #4]
 8004666:	6800      	ldr	r0, [r0, #0]
 8004668:	9403      	str	r4, [sp, #12]
 800466a:	2300      	movs	r3, #0
 800466c:	9311      	str	r3, [sp, #68]	; 0x44
 800466e:	9316      	str	r3, [sp, #88]	; 0x58
 8004670:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004674:	f8ad 301e 	strh.w	r3, [sp, #30]
 8004678:	a904      	add	r1, sp, #16
 800467a:	4623      	mov	r3, r4
 800467c:	f000 f9e6 	bl	8004a4c <__ssvfiscanf_r>
 8004680:	b01f      	add	sp, #124	; 0x7c
 8004682:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004686:	b003      	add	sp, #12
 8004688:	4770      	bx	lr
 800468a:	bf00      	nop
 800468c:	08004695 	.word	0x08004695
 8004690:	2000000c 	.word	0x2000000c

08004694 <__seofread>:
 8004694:	2000      	movs	r0, #0
 8004696:	4770      	bx	lr

08004698 <strncmp>:
 8004698:	b510      	push	{r4, lr}
 800469a:	b16a      	cbz	r2, 80046b8 <strncmp+0x20>
 800469c:	3901      	subs	r1, #1
 800469e:	1884      	adds	r4, r0, r2
 80046a0:	f810 3b01 	ldrb.w	r3, [r0], #1
 80046a4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d103      	bne.n	80046b4 <strncmp+0x1c>
 80046ac:	42a0      	cmp	r0, r4
 80046ae:	d001      	beq.n	80046b4 <strncmp+0x1c>
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d1f5      	bne.n	80046a0 <strncmp+0x8>
 80046b4:	1a98      	subs	r0, r3, r2
 80046b6:	bd10      	pop	{r4, pc}
 80046b8:	4610      	mov	r0, r2
 80046ba:	e7fc      	b.n	80046b6 <strncmp+0x1e>

080046bc <strncpy>:
 80046bc:	b510      	push	{r4, lr}
 80046be:	3901      	subs	r1, #1
 80046c0:	4603      	mov	r3, r0
 80046c2:	b132      	cbz	r2, 80046d2 <strncpy+0x16>
 80046c4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80046c8:	f803 4b01 	strb.w	r4, [r3], #1
 80046cc:	3a01      	subs	r2, #1
 80046ce:	2c00      	cmp	r4, #0
 80046d0:	d1f7      	bne.n	80046c2 <strncpy+0x6>
 80046d2:	441a      	add	r2, r3
 80046d4:	2100      	movs	r1, #0
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d100      	bne.n	80046dc <strncpy+0x20>
 80046da:	bd10      	pop	{r4, pc}
 80046dc:	f803 1b01 	strb.w	r1, [r3], #1
 80046e0:	e7f9      	b.n	80046d6 <strncpy+0x1a>

080046e2 <__ssputs_r>:
 80046e2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80046e6:	688e      	ldr	r6, [r1, #8]
 80046e8:	429e      	cmp	r6, r3
 80046ea:	4682      	mov	sl, r0
 80046ec:	460c      	mov	r4, r1
 80046ee:	4690      	mov	r8, r2
 80046f0:	461f      	mov	r7, r3
 80046f2:	d838      	bhi.n	8004766 <__ssputs_r+0x84>
 80046f4:	898a      	ldrh	r2, [r1, #12]
 80046f6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80046fa:	d032      	beq.n	8004762 <__ssputs_r+0x80>
 80046fc:	6825      	ldr	r5, [r4, #0]
 80046fe:	6909      	ldr	r1, [r1, #16]
 8004700:	eba5 0901 	sub.w	r9, r5, r1
 8004704:	6965      	ldr	r5, [r4, #20]
 8004706:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800470a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800470e:	3301      	adds	r3, #1
 8004710:	444b      	add	r3, r9
 8004712:	106d      	asrs	r5, r5, #1
 8004714:	429d      	cmp	r5, r3
 8004716:	bf38      	it	cc
 8004718:	461d      	movcc	r5, r3
 800471a:	0553      	lsls	r3, r2, #21
 800471c:	d531      	bpl.n	8004782 <__ssputs_r+0xa0>
 800471e:	4629      	mov	r1, r5
 8004720:	f000 ffde 	bl	80056e0 <_malloc_r>
 8004724:	4606      	mov	r6, r0
 8004726:	b950      	cbnz	r0, 800473e <__ssputs_r+0x5c>
 8004728:	230c      	movs	r3, #12
 800472a:	f8ca 3000 	str.w	r3, [sl]
 800472e:	89a3      	ldrh	r3, [r4, #12]
 8004730:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004734:	81a3      	strh	r3, [r4, #12]
 8004736:	f04f 30ff 	mov.w	r0, #4294967295
 800473a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800473e:	6921      	ldr	r1, [r4, #16]
 8004740:	464a      	mov	r2, r9
 8004742:	f000 ff55 	bl	80055f0 <memcpy>
 8004746:	89a3      	ldrh	r3, [r4, #12]
 8004748:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800474c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004750:	81a3      	strh	r3, [r4, #12]
 8004752:	6126      	str	r6, [r4, #16]
 8004754:	6165      	str	r5, [r4, #20]
 8004756:	444e      	add	r6, r9
 8004758:	eba5 0509 	sub.w	r5, r5, r9
 800475c:	6026      	str	r6, [r4, #0]
 800475e:	60a5      	str	r5, [r4, #8]
 8004760:	463e      	mov	r6, r7
 8004762:	42be      	cmp	r6, r7
 8004764:	d900      	bls.n	8004768 <__ssputs_r+0x86>
 8004766:	463e      	mov	r6, r7
 8004768:	4632      	mov	r2, r6
 800476a:	6820      	ldr	r0, [r4, #0]
 800476c:	4641      	mov	r1, r8
 800476e:	f000 ff4d 	bl	800560c <memmove>
 8004772:	68a3      	ldr	r3, [r4, #8]
 8004774:	6822      	ldr	r2, [r4, #0]
 8004776:	1b9b      	subs	r3, r3, r6
 8004778:	4432      	add	r2, r6
 800477a:	60a3      	str	r3, [r4, #8]
 800477c:	6022      	str	r2, [r4, #0]
 800477e:	2000      	movs	r0, #0
 8004780:	e7db      	b.n	800473a <__ssputs_r+0x58>
 8004782:	462a      	mov	r2, r5
 8004784:	f001 f806 	bl	8005794 <_realloc_r>
 8004788:	4606      	mov	r6, r0
 800478a:	2800      	cmp	r0, #0
 800478c:	d1e1      	bne.n	8004752 <__ssputs_r+0x70>
 800478e:	6921      	ldr	r1, [r4, #16]
 8004790:	4650      	mov	r0, sl
 8004792:	f000 ff55 	bl	8005640 <_free_r>
 8004796:	e7c7      	b.n	8004728 <__ssputs_r+0x46>

08004798 <_svfiprintf_r>:
 8004798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800479c:	4698      	mov	r8, r3
 800479e:	898b      	ldrh	r3, [r1, #12]
 80047a0:	061b      	lsls	r3, r3, #24
 80047a2:	b09d      	sub	sp, #116	; 0x74
 80047a4:	4607      	mov	r7, r0
 80047a6:	460d      	mov	r5, r1
 80047a8:	4614      	mov	r4, r2
 80047aa:	d50e      	bpl.n	80047ca <_svfiprintf_r+0x32>
 80047ac:	690b      	ldr	r3, [r1, #16]
 80047ae:	b963      	cbnz	r3, 80047ca <_svfiprintf_r+0x32>
 80047b0:	2140      	movs	r1, #64	; 0x40
 80047b2:	f000 ff95 	bl	80056e0 <_malloc_r>
 80047b6:	6028      	str	r0, [r5, #0]
 80047b8:	6128      	str	r0, [r5, #16]
 80047ba:	b920      	cbnz	r0, 80047c6 <_svfiprintf_r+0x2e>
 80047bc:	230c      	movs	r3, #12
 80047be:	603b      	str	r3, [r7, #0]
 80047c0:	f04f 30ff 	mov.w	r0, #4294967295
 80047c4:	e0d1      	b.n	800496a <_svfiprintf_r+0x1d2>
 80047c6:	2340      	movs	r3, #64	; 0x40
 80047c8:	616b      	str	r3, [r5, #20]
 80047ca:	2300      	movs	r3, #0
 80047cc:	9309      	str	r3, [sp, #36]	; 0x24
 80047ce:	2320      	movs	r3, #32
 80047d0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80047d4:	f8cd 800c 	str.w	r8, [sp, #12]
 80047d8:	2330      	movs	r3, #48	; 0x30
 80047da:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004984 <_svfiprintf_r+0x1ec>
 80047de:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80047e2:	f04f 0901 	mov.w	r9, #1
 80047e6:	4623      	mov	r3, r4
 80047e8:	469a      	mov	sl, r3
 80047ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80047ee:	b10a      	cbz	r2, 80047f4 <_svfiprintf_r+0x5c>
 80047f0:	2a25      	cmp	r2, #37	; 0x25
 80047f2:	d1f9      	bne.n	80047e8 <_svfiprintf_r+0x50>
 80047f4:	ebba 0b04 	subs.w	fp, sl, r4
 80047f8:	d00b      	beq.n	8004812 <_svfiprintf_r+0x7a>
 80047fa:	465b      	mov	r3, fp
 80047fc:	4622      	mov	r2, r4
 80047fe:	4629      	mov	r1, r5
 8004800:	4638      	mov	r0, r7
 8004802:	f7ff ff6e 	bl	80046e2 <__ssputs_r>
 8004806:	3001      	adds	r0, #1
 8004808:	f000 80aa 	beq.w	8004960 <_svfiprintf_r+0x1c8>
 800480c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800480e:	445a      	add	r2, fp
 8004810:	9209      	str	r2, [sp, #36]	; 0x24
 8004812:	f89a 3000 	ldrb.w	r3, [sl]
 8004816:	2b00      	cmp	r3, #0
 8004818:	f000 80a2 	beq.w	8004960 <_svfiprintf_r+0x1c8>
 800481c:	2300      	movs	r3, #0
 800481e:	f04f 32ff 	mov.w	r2, #4294967295
 8004822:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004826:	f10a 0a01 	add.w	sl, sl, #1
 800482a:	9304      	str	r3, [sp, #16]
 800482c:	9307      	str	r3, [sp, #28]
 800482e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004832:	931a      	str	r3, [sp, #104]	; 0x68
 8004834:	4654      	mov	r4, sl
 8004836:	2205      	movs	r2, #5
 8004838:	f814 1b01 	ldrb.w	r1, [r4], #1
 800483c:	4851      	ldr	r0, [pc, #324]	; (8004984 <_svfiprintf_r+0x1ec>)
 800483e:	f7fb fd07 	bl	8000250 <memchr>
 8004842:	9a04      	ldr	r2, [sp, #16]
 8004844:	b9d8      	cbnz	r0, 800487e <_svfiprintf_r+0xe6>
 8004846:	06d0      	lsls	r0, r2, #27
 8004848:	bf44      	itt	mi
 800484a:	2320      	movmi	r3, #32
 800484c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004850:	0711      	lsls	r1, r2, #28
 8004852:	bf44      	itt	mi
 8004854:	232b      	movmi	r3, #43	; 0x2b
 8004856:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800485a:	f89a 3000 	ldrb.w	r3, [sl]
 800485e:	2b2a      	cmp	r3, #42	; 0x2a
 8004860:	d015      	beq.n	800488e <_svfiprintf_r+0xf6>
 8004862:	9a07      	ldr	r2, [sp, #28]
 8004864:	4654      	mov	r4, sl
 8004866:	2000      	movs	r0, #0
 8004868:	f04f 0c0a 	mov.w	ip, #10
 800486c:	4621      	mov	r1, r4
 800486e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004872:	3b30      	subs	r3, #48	; 0x30
 8004874:	2b09      	cmp	r3, #9
 8004876:	d94e      	bls.n	8004916 <_svfiprintf_r+0x17e>
 8004878:	b1b0      	cbz	r0, 80048a8 <_svfiprintf_r+0x110>
 800487a:	9207      	str	r2, [sp, #28]
 800487c:	e014      	b.n	80048a8 <_svfiprintf_r+0x110>
 800487e:	eba0 0308 	sub.w	r3, r0, r8
 8004882:	fa09 f303 	lsl.w	r3, r9, r3
 8004886:	4313      	orrs	r3, r2
 8004888:	9304      	str	r3, [sp, #16]
 800488a:	46a2      	mov	sl, r4
 800488c:	e7d2      	b.n	8004834 <_svfiprintf_r+0x9c>
 800488e:	9b03      	ldr	r3, [sp, #12]
 8004890:	1d19      	adds	r1, r3, #4
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	9103      	str	r1, [sp, #12]
 8004896:	2b00      	cmp	r3, #0
 8004898:	bfbb      	ittet	lt
 800489a:	425b      	neglt	r3, r3
 800489c:	f042 0202 	orrlt.w	r2, r2, #2
 80048a0:	9307      	strge	r3, [sp, #28]
 80048a2:	9307      	strlt	r3, [sp, #28]
 80048a4:	bfb8      	it	lt
 80048a6:	9204      	strlt	r2, [sp, #16]
 80048a8:	7823      	ldrb	r3, [r4, #0]
 80048aa:	2b2e      	cmp	r3, #46	; 0x2e
 80048ac:	d10c      	bne.n	80048c8 <_svfiprintf_r+0x130>
 80048ae:	7863      	ldrb	r3, [r4, #1]
 80048b0:	2b2a      	cmp	r3, #42	; 0x2a
 80048b2:	d135      	bne.n	8004920 <_svfiprintf_r+0x188>
 80048b4:	9b03      	ldr	r3, [sp, #12]
 80048b6:	1d1a      	adds	r2, r3, #4
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	9203      	str	r2, [sp, #12]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	bfb8      	it	lt
 80048c0:	f04f 33ff 	movlt.w	r3, #4294967295
 80048c4:	3402      	adds	r4, #2
 80048c6:	9305      	str	r3, [sp, #20]
 80048c8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004994 <_svfiprintf_r+0x1fc>
 80048cc:	7821      	ldrb	r1, [r4, #0]
 80048ce:	2203      	movs	r2, #3
 80048d0:	4650      	mov	r0, sl
 80048d2:	f7fb fcbd 	bl	8000250 <memchr>
 80048d6:	b140      	cbz	r0, 80048ea <_svfiprintf_r+0x152>
 80048d8:	2340      	movs	r3, #64	; 0x40
 80048da:	eba0 000a 	sub.w	r0, r0, sl
 80048de:	fa03 f000 	lsl.w	r0, r3, r0
 80048e2:	9b04      	ldr	r3, [sp, #16]
 80048e4:	4303      	orrs	r3, r0
 80048e6:	3401      	adds	r4, #1
 80048e8:	9304      	str	r3, [sp, #16]
 80048ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80048ee:	4826      	ldr	r0, [pc, #152]	; (8004988 <_svfiprintf_r+0x1f0>)
 80048f0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80048f4:	2206      	movs	r2, #6
 80048f6:	f7fb fcab 	bl	8000250 <memchr>
 80048fa:	2800      	cmp	r0, #0
 80048fc:	d038      	beq.n	8004970 <_svfiprintf_r+0x1d8>
 80048fe:	4b23      	ldr	r3, [pc, #140]	; (800498c <_svfiprintf_r+0x1f4>)
 8004900:	bb1b      	cbnz	r3, 800494a <_svfiprintf_r+0x1b2>
 8004902:	9b03      	ldr	r3, [sp, #12]
 8004904:	3307      	adds	r3, #7
 8004906:	f023 0307 	bic.w	r3, r3, #7
 800490a:	3308      	adds	r3, #8
 800490c:	9303      	str	r3, [sp, #12]
 800490e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004910:	4433      	add	r3, r6
 8004912:	9309      	str	r3, [sp, #36]	; 0x24
 8004914:	e767      	b.n	80047e6 <_svfiprintf_r+0x4e>
 8004916:	fb0c 3202 	mla	r2, ip, r2, r3
 800491a:	460c      	mov	r4, r1
 800491c:	2001      	movs	r0, #1
 800491e:	e7a5      	b.n	800486c <_svfiprintf_r+0xd4>
 8004920:	2300      	movs	r3, #0
 8004922:	3401      	adds	r4, #1
 8004924:	9305      	str	r3, [sp, #20]
 8004926:	4619      	mov	r1, r3
 8004928:	f04f 0c0a 	mov.w	ip, #10
 800492c:	4620      	mov	r0, r4
 800492e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004932:	3a30      	subs	r2, #48	; 0x30
 8004934:	2a09      	cmp	r2, #9
 8004936:	d903      	bls.n	8004940 <_svfiprintf_r+0x1a8>
 8004938:	2b00      	cmp	r3, #0
 800493a:	d0c5      	beq.n	80048c8 <_svfiprintf_r+0x130>
 800493c:	9105      	str	r1, [sp, #20]
 800493e:	e7c3      	b.n	80048c8 <_svfiprintf_r+0x130>
 8004940:	fb0c 2101 	mla	r1, ip, r1, r2
 8004944:	4604      	mov	r4, r0
 8004946:	2301      	movs	r3, #1
 8004948:	e7f0      	b.n	800492c <_svfiprintf_r+0x194>
 800494a:	ab03      	add	r3, sp, #12
 800494c:	9300      	str	r3, [sp, #0]
 800494e:	462a      	mov	r2, r5
 8004950:	4b0f      	ldr	r3, [pc, #60]	; (8004990 <_svfiprintf_r+0x1f8>)
 8004952:	a904      	add	r1, sp, #16
 8004954:	4638      	mov	r0, r7
 8004956:	f3af 8000 	nop.w
 800495a:	1c42      	adds	r2, r0, #1
 800495c:	4606      	mov	r6, r0
 800495e:	d1d6      	bne.n	800490e <_svfiprintf_r+0x176>
 8004960:	89ab      	ldrh	r3, [r5, #12]
 8004962:	065b      	lsls	r3, r3, #25
 8004964:	f53f af2c 	bmi.w	80047c0 <_svfiprintf_r+0x28>
 8004968:	9809      	ldr	r0, [sp, #36]	; 0x24
 800496a:	b01d      	add	sp, #116	; 0x74
 800496c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004970:	ab03      	add	r3, sp, #12
 8004972:	9300      	str	r3, [sp, #0]
 8004974:	462a      	mov	r2, r5
 8004976:	4b06      	ldr	r3, [pc, #24]	; (8004990 <_svfiprintf_r+0x1f8>)
 8004978:	a904      	add	r1, sp, #16
 800497a:	4638      	mov	r0, r7
 800497c:	f000 fa4c 	bl	8004e18 <_printf_i>
 8004980:	e7eb      	b.n	800495a <_svfiprintf_r+0x1c2>
 8004982:	bf00      	nop
 8004984:	08005b58 	.word	0x08005b58
 8004988:	08005b62 	.word	0x08005b62
 800498c:	00000000 	.word	0x00000000
 8004990:	080046e3 	.word	0x080046e3
 8004994:	08005b5e 	.word	0x08005b5e

08004998 <_sungetc_r>:
 8004998:	b538      	push	{r3, r4, r5, lr}
 800499a:	1c4b      	adds	r3, r1, #1
 800499c:	4614      	mov	r4, r2
 800499e:	d103      	bne.n	80049a8 <_sungetc_r+0x10>
 80049a0:	f04f 35ff 	mov.w	r5, #4294967295
 80049a4:	4628      	mov	r0, r5
 80049a6:	bd38      	pop	{r3, r4, r5, pc}
 80049a8:	8993      	ldrh	r3, [r2, #12]
 80049aa:	f023 0320 	bic.w	r3, r3, #32
 80049ae:	8193      	strh	r3, [r2, #12]
 80049b0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80049b2:	6852      	ldr	r2, [r2, #4]
 80049b4:	b2cd      	uxtb	r5, r1
 80049b6:	b18b      	cbz	r3, 80049dc <_sungetc_r+0x44>
 80049b8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80049ba:	4293      	cmp	r3, r2
 80049bc:	dd08      	ble.n	80049d0 <_sungetc_r+0x38>
 80049be:	6823      	ldr	r3, [r4, #0]
 80049c0:	1e5a      	subs	r2, r3, #1
 80049c2:	6022      	str	r2, [r4, #0]
 80049c4:	f803 5c01 	strb.w	r5, [r3, #-1]
 80049c8:	6863      	ldr	r3, [r4, #4]
 80049ca:	3301      	adds	r3, #1
 80049cc:	6063      	str	r3, [r4, #4]
 80049ce:	e7e9      	b.n	80049a4 <_sungetc_r+0xc>
 80049d0:	4621      	mov	r1, r4
 80049d2:	f000 fdd1 	bl	8005578 <__submore>
 80049d6:	2800      	cmp	r0, #0
 80049d8:	d0f1      	beq.n	80049be <_sungetc_r+0x26>
 80049da:	e7e1      	b.n	80049a0 <_sungetc_r+0x8>
 80049dc:	6921      	ldr	r1, [r4, #16]
 80049de:	6823      	ldr	r3, [r4, #0]
 80049e0:	b151      	cbz	r1, 80049f8 <_sungetc_r+0x60>
 80049e2:	4299      	cmp	r1, r3
 80049e4:	d208      	bcs.n	80049f8 <_sungetc_r+0x60>
 80049e6:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80049ea:	42a9      	cmp	r1, r5
 80049ec:	d104      	bne.n	80049f8 <_sungetc_r+0x60>
 80049ee:	3b01      	subs	r3, #1
 80049f0:	3201      	adds	r2, #1
 80049f2:	6023      	str	r3, [r4, #0]
 80049f4:	6062      	str	r2, [r4, #4]
 80049f6:	e7d5      	b.n	80049a4 <_sungetc_r+0xc>
 80049f8:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80049fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004a00:	6363      	str	r3, [r4, #52]	; 0x34
 8004a02:	2303      	movs	r3, #3
 8004a04:	63a3      	str	r3, [r4, #56]	; 0x38
 8004a06:	4623      	mov	r3, r4
 8004a08:	f803 5f46 	strb.w	r5, [r3, #70]!
 8004a0c:	6023      	str	r3, [r4, #0]
 8004a0e:	2301      	movs	r3, #1
 8004a10:	e7dc      	b.n	80049cc <_sungetc_r+0x34>

08004a12 <__ssrefill_r>:
 8004a12:	b510      	push	{r4, lr}
 8004a14:	460c      	mov	r4, r1
 8004a16:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8004a18:	b169      	cbz	r1, 8004a36 <__ssrefill_r+0x24>
 8004a1a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004a1e:	4299      	cmp	r1, r3
 8004a20:	d001      	beq.n	8004a26 <__ssrefill_r+0x14>
 8004a22:	f000 fe0d 	bl	8005640 <_free_r>
 8004a26:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004a28:	6063      	str	r3, [r4, #4]
 8004a2a:	2000      	movs	r0, #0
 8004a2c:	6360      	str	r0, [r4, #52]	; 0x34
 8004a2e:	b113      	cbz	r3, 8004a36 <__ssrefill_r+0x24>
 8004a30:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004a32:	6023      	str	r3, [r4, #0]
 8004a34:	bd10      	pop	{r4, pc}
 8004a36:	6923      	ldr	r3, [r4, #16]
 8004a38:	6023      	str	r3, [r4, #0]
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	6063      	str	r3, [r4, #4]
 8004a3e:	89a3      	ldrh	r3, [r4, #12]
 8004a40:	f043 0320 	orr.w	r3, r3, #32
 8004a44:	81a3      	strh	r3, [r4, #12]
 8004a46:	f04f 30ff 	mov.w	r0, #4294967295
 8004a4a:	e7f3      	b.n	8004a34 <__ssrefill_r+0x22>

08004a4c <__ssvfiscanf_r>:
 8004a4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a50:	460c      	mov	r4, r1
 8004a52:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8004a56:	2100      	movs	r1, #0
 8004a58:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8004a5c:	49b2      	ldr	r1, [pc, #712]	; (8004d28 <__ssvfiscanf_r+0x2dc>)
 8004a5e:	91a0      	str	r1, [sp, #640]	; 0x280
 8004a60:	f10d 0804 	add.w	r8, sp, #4
 8004a64:	49b1      	ldr	r1, [pc, #708]	; (8004d2c <__ssvfiscanf_r+0x2e0>)
 8004a66:	4fb2      	ldr	r7, [pc, #712]	; (8004d30 <__ssvfiscanf_r+0x2e4>)
 8004a68:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 8004d34 <__ssvfiscanf_r+0x2e8>
 8004a6c:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8004a70:	4606      	mov	r6, r0
 8004a72:	91a1      	str	r1, [sp, #644]	; 0x284
 8004a74:	9300      	str	r3, [sp, #0]
 8004a76:	f892 a000 	ldrb.w	sl, [r2]
 8004a7a:	f1ba 0f00 	cmp.w	sl, #0
 8004a7e:	f000 8151 	beq.w	8004d24 <__ssvfiscanf_r+0x2d8>
 8004a82:	f81a 3007 	ldrb.w	r3, [sl, r7]
 8004a86:	f013 0308 	ands.w	r3, r3, #8
 8004a8a:	f102 0501 	add.w	r5, r2, #1
 8004a8e:	d019      	beq.n	8004ac4 <__ssvfiscanf_r+0x78>
 8004a90:	6863      	ldr	r3, [r4, #4]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	dd0f      	ble.n	8004ab6 <__ssvfiscanf_r+0x6a>
 8004a96:	6823      	ldr	r3, [r4, #0]
 8004a98:	781a      	ldrb	r2, [r3, #0]
 8004a9a:	5cba      	ldrb	r2, [r7, r2]
 8004a9c:	0712      	lsls	r2, r2, #28
 8004a9e:	d401      	bmi.n	8004aa4 <__ssvfiscanf_r+0x58>
 8004aa0:	462a      	mov	r2, r5
 8004aa2:	e7e8      	b.n	8004a76 <__ssvfiscanf_r+0x2a>
 8004aa4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8004aa6:	3201      	adds	r2, #1
 8004aa8:	9245      	str	r2, [sp, #276]	; 0x114
 8004aaa:	6862      	ldr	r2, [r4, #4]
 8004aac:	3301      	adds	r3, #1
 8004aae:	3a01      	subs	r2, #1
 8004ab0:	6062      	str	r2, [r4, #4]
 8004ab2:	6023      	str	r3, [r4, #0]
 8004ab4:	e7ec      	b.n	8004a90 <__ssvfiscanf_r+0x44>
 8004ab6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8004ab8:	4621      	mov	r1, r4
 8004aba:	4630      	mov	r0, r6
 8004abc:	4798      	blx	r3
 8004abe:	2800      	cmp	r0, #0
 8004ac0:	d0e9      	beq.n	8004a96 <__ssvfiscanf_r+0x4a>
 8004ac2:	e7ed      	b.n	8004aa0 <__ssvfiscanf_r+0x54>
 8004ac4:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 8004ac8:	f040 8083 	bne.w	8004bd2 <__ssvfiscanf_r+0x186>
 8004acc:	9341      	str	r3, [sp, #260]	; 0x104
 8004ace:	9343      	str	r3, [sp, #268]	; 0x10c
 8004ad0:	7853      	ldrb	r3, [r2, #1]
 8004ad2:	2b2a      	cmp	r3, #42	; 0x2a
 8004ad4:	bf02      	ittt	eq
 8004ad6:	2310      	moveq	r3, #16
 8004ad8:	1c95      	addeq	r5, r2, #2
 8004ada:	9341      	streq	r3, [sp, #260]	; 0x104
 8004adc:	220a      	movs	r2, #10
 8004ade:	46ab      	mov	fp, r5
 8004ae0:	f81b 1b01 	ldrb.w	r1, [fp], #1
 8004ae4:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8004ae8:	2b09      	cmp	r3, #9
 8004aea:	d91d      	bls.n	8004b28 <__ssvfiscanf_r+0xdc>
 8004aec:	4891      	ldr	r0, [pc, #580]	; (8004d34 <__ssvfiscanf_r+0x2e8>)
 8004aee:	2203      	movs	r2, #3
 8004af0:	f7fb fbae 	bl	8000250 <memchr>
 8004af4:	b140      	cbz	r0, 8004b08 <__ssvfiscanf_r+0xbc>
 8004af6:	2301      	movs	r3, #1
 8004af8:	eba0 0009 	sub.w	r0, r0, r9
 8004afc:	fa03 f000 	lsl.w	r0, r3, r0
 8004b00:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8004b02:	4318      	orrs	r0, r3
 8004b04:	9041      	str	r0, [sp, #260]	; 0x104
 8004b06:	465d      	mov	r5, fp
 8004b08:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004b0c:	2b78      	cmp	r3, #120	; 0x78
 8004b0e:	d806      	bhi.n	8004b1e <__ssvfiscanf_r+0xd2>
 8004b10:	2b57      	cmp	r3, #87	; 0x57
 8004b12:	d810      	bhi.n	8004b36 <__ssvfiscanf_r+0xea>
 8004b14:	2b25      	cmp	r3, #37	; 0x25
 8004b16:	d05c      	beq.n	8004bd2 <__ssvfiscanf_r+0x186>
 8004b18:	d856      	bhi.n	8004bc8 <__ssvfiscanf_r+0x17c>
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d074      	beq.n	8004c08 <__ssvfiscanf_r+0x1bc>
 8004b1e:	2303      	movs	r3, #3
 8004b20:	9347      	str	r3, [sp, #284]	; 0x11c
 8004b22:	230a      	movs	r3, #10
 8004b24:	9342      	str	r3, [sp, #264]	; 0x108
 8004b26:	e081      	b.n	8004c2c <__ssvfiscanf_r+0x1e0>
 8004b28:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8004b2a:	fb02 1303 	mla	r3, r2, r3, r1
 8004b2e:	3b30      	subs	r3, #48	; 0x30
 8004b30:	9343      	str	r3, [sp, #268]	; 0x10c
 8004b32:	465d      	mov	r5, fp
 8004b34:	e7d3      	b.n	8004ade <__ssvfiscanf_r+0x92>
 8004b36:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8004b3a:	2a20      	cmp	r2, #32
 8004b3c:	d8ef      	bhi.n	8004b1e <__ssvfiscanf_r+0xd2>
 8004b3e:	a101      	add	r1, pc, #4	; (adr r1, 8004b44 <__ssvfiscanf_r+0xf8>)
 8004b40:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004b44:	08004c17 	.word	0x08004c17
 8004b48:	08004b1f 	.word	0x08004b1f
 8004b4c:	08004b1f 	.word	0x08004b1f
 8004b50:	08004c75 	.word	0x08004c75
 8004b54:	08004b1f 	.word	0x08004b1f
 8004b58:	08004b1f 	.word	0x08004b1f
 8004b5c:	08004b1f 	.word	0x08004b1f
 8004b60:	08004b1f 	.word	0x08004b1f
 8004b64:	08004b1f 	.word	0x08004b1f
 8004b68:	08004b1f 	.word	0x08004b1f
 8004b6c:	08004b1f 	.word	0x08004b1f
 8004b70:	08004c8b 	.word	0x08004c8b
 8004b74:	08004c61 	.word	0x08004c61
 8004b78:	08004bcf 	.word	0x08004bcf
 8004b7c:	08004bcf 	.word	0x08004bcf
 8004b80:	08004bcf 	.word	0x08004bcf
 8004b84:	08004b1f 	.word	0x08004b1f
 8004b88:	08004c65 	.word	0x08004c65
 8004b8c:	08004b1f 	.word	0x08004b1f
 8004b90:	08004b1f 	.word	0x08004b1f
 8004b94:	08004b1f 	.word	0x08004b1f
 8004b98:	08004b1f 	.word	0x08004b1f
 8004b9c:	08004c9b 	.word	0x08004c9b
 8004ba0:	08004c6d 	.word	0x08004c6d
 8004ba4:	08004c0f 	.word	0x08004c0f
 8004ba8:	08004b1f 	.word	0x08004b1f
 8004bac:	08004b1f 	.word	0x08004b1f
 8004bb0:	08004c97 	.word	0x08004c97
 8004bb4:	08004b1f 	.word	0x08004b1f
 8004bb8:	08004c61 	.word	0x08004c61
 8004bbc:	08004b1f 	.word	0x08004b1f
 8004bc0:	08004b1f 	.word	0x08004b1f
 8004bc4:	08004c17 	.word	0x08004c17
 8004bc8:	3b45      	subs	r3, #69	; 0x45
 8004bca:	2b02      	cmp	r3, #2
 8004bcc:	d8a7      	bhi.n	8004b1e <__ssvfiscanf_r+0xd2>
 8004bce:	2305      	movs	r3, #5
 8004bd0:	e02b      	b.n	8004c2a <__ssvfiscanf_r+0x1de>
 8004bd2:	6863      	ldr	r3, [r4, #4]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	dd0d      	ble.n	8004bf4 <__ssvfiscanf_r+0x1a8>
 8004bd8:	6823      	ldr	r3, [r4, #0]
 8004bda:	781a      	ldrb	r2, [r3, #0]
 8004bdc:	4552      	cmp	r2, sl
 8004bde:	f040 80a1 	bne.w	8004d24 <__ssvfiscanf_r+0x2d8>
 8004be2:	3301      	adds	r3, #1
 8004be4:	6862      	ldr	r2, [r4, #4]
 8004be6:	6023      	str	r3, [r4, #0]
 8004be8:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8004bea:	3a01      	subs	r2, #1
 8004bec:	3301      	adds	r3, #1
 8004bee:	6062      	str	r2, [r4, #4]
 8004bf0:	9345      	str	r3, [sp, #276]	; 0x114
 8004bf2:	e755      	b.n	8004aa0 <__ssvfiscanf_r+0x54>
 8004bf4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8004bf6:	4621      	mov	r1, r4
 8004bf8:	4630      	mov	r0, r6
 8004bfa:	4798      	blx	r3
 8004bfc:	2800      	cmp	r0, #0
 8004bfe:	d0eb      	beq.n	8004bd8 <__ssvfiscanf_r+0x18c>
 8004c00:	9844      	ldr	r0, [sp, #272]	; 0x110
 8004c02:	2800      	cmp	r0, #0
 8004c04:	f040 8084 	bne.w	8004d10 <__ssvfiscanf_r+0x2c4>
 8004c08:	f04f 30ff 	mov.w	r0, #4294967295
 8004c0c:	e086      	b.n	8004d1c <__ssvfiscanf_r+0x2d0>
 8004c0e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8004c10:	f042 0220 	orr.w	r2, r2, #32
 8004c14:	9241      	str	r2, [sp, #260]	; 0x104
 8004c16:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8004c18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c1c:	9241      	str	r2, [sp, #260]	; 0x104
 8004c1e:	2210      	movs	r2, #16
 8004c20:	2b6f      	cmp	r3, #111	; 0x6f
 8004c22:	9242      	str	r2, [sp, #264]	; 0x108
 8004c24:	bf34      	ite	cc
 8004c26:	2303      	movcc	r3, #3
 8004c28:	2304      	movcs	r3, #4
 8004c2a:	9347      	str	r3, [sp, #284]	; 0x11c
 8004c2c:	6863      	ldr	r3, [r4, #4]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	dd41      	ble.n	8004cb6 <__ssvfiscanf_r+0x26a>
 8004c32:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8004c34:	0659      	lsls	r1, r3, #25
 8004c36:	d404      	bmi.n	8004c42 <__ssvfiscanf_r+0x1f6>
 8004c38:	6823      	ldr	r3, [r4, #0]
 8004c3a:	781a      	ldrb	r2, [r3, #0]
 8004c3c:	5cba      	ldrb	r2, [r7, r2]
 8004c3e:	0712      	lsls	r2, r2, #28
 8004c40:	d440      	bmi.n	8004cc4 <__ssvfiscanf_r+0x278>
 8004c42:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8004c44:	2b02      	cmp	r3, #2
 8004c46:	dc4f      	bgt.n	8004ce8 <__ssvfiscanf_r+0x29c>
 8004c48:	466b      	mov	r3, sp
 8004c4a:	4622      	mov	r2, r4
 8004c4c:	a941      	add	r1, sp, #260	; 0x104
 8004c4e:	4630      	mov	r0, r6
 8004c50:	f000 fa08 	bl	8005064 <_scanf_chars>
 8004c54:	2801      	cmp	r0, #1
 8004c56:	d065      	beq.n	8004d24 <__ssvfiscanf_r+0x2d8>
 8004c58:	2802      	cmp	r0, #2
 8004c5a:	f47f af21 	bne.w	8004aa0 <__ssvfiscanf_r+0x54>
 8004c5e:	e7cf      	b.n	8004c00 <__ssvfiscanf_r+0x1b4>
 8004c60:	220a      	movs	r2, #10
 8004c62:	e7dd      	b.n	8004c20 <__ssvfiscanf_r+0x1d4>
 8004c64:	2300      	movs	r3, #0
 8004c66:	9342      	str	r3, [sp, #264]	; 0x108
 8004c68:	2303      	movs	r3, #3
 8004c6a:	e7de      	b.n	8004c2a <__ssvfiscanf_r+0x1de>
 8004c6c:	2308      	movs	r3, #8
 8004c6e:	9342      	str	r3, [sp, #264]	; 0x108
 8004c70:	2304      	movs	r3, #4
 8004c72:	e7da      	b.n	8004c2a <__ssvfiscanf_r+0x1de>
 8004c74:	4629      	mov	r1, r5
 8004c76:	4640      	mov	r0, r8
 8004c78:	f000 fb40 	bl	80052fc <__sccl>
 8004c7c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8004c7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c82:	9341      	str	r3, [sp, #260]	; 0x104
 8004c84:	4605      	mov	r5, r0
 8004c86:	2301      	movs	r3, #1
 8004c88:	e7cf      	b.n	8004c2a <__ssvfiscanf_r+0x1de>
 8004c8a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8004c8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c90:	9341      	str	r3, [sp, #260]	; 0x104
 8004c92:	2300      	movs	r3, #0
 8004c94:	e7c9      	b.n	8004c2a <__ssvfiscanf_r+0x1de>
 8004c96:	2302      	movs	r3, #2
 8004c98:	e7c7      	b.n	8004c2a <__ssvfiscanf_r+0x1de>
 8004c9a:	9841      	ldr	r0, [sp, #260]	; 0x104
 8004c9c:	06c3      	lsls	r3, r0, #27
 8004c9e:	f53f aeff 	bmi.w	8004aa0 <__ssvfiscanf_r+0x54>
 8004ca2:	9b00      	ldr	r3, [sp, #0]
 8004ca4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8004ca6:	1d19      	adds	r1, r3, #4
 8004ca8:	9100      	str	r1, [sp, #0]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	07c0      	lsls	r0, r0, #31
 8004cae:	bf4c      	ite	mi
 8004cb0:	801a      	strhmi	r2, [r3, #0]
 8004cb2:	601a      	strpl	r2, [r3, #0]
 8004cb4:	e6f4      	b.n	8004aa0 <__ssvfiscanf_r+0x54>
 8004cb6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8004cb8:	4621      	mov	r1, r4
 8004cba:	4630      	mov	r0, r6
 8004cbc:	4798      	blx	r3
 8004cbe:	2800      	cmp	r0, #0
 8004cc0:	d0b7      	beq.n	8004c32 <__ssvfiscanf_r+0x1e6>
 8004cc2:	e79d      	b.n	8004c00 <__ssvfiscanf_r+0x1b4>
 8004cc4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8004cc6:	3201      	adds	r2, #1
 8004cc8:	9245      	str	r2, [sp, #276]	; 0x114
 8004cca:	6862      	ldr	r2, [r4, #4]
 8004ccc:	3a01      	subs	r2, #1
 8004cce:	2a00      	cmp	r2, #0
 8004cd0:	6062      	str	r2, [r4, #4]
 8004cd2:	dd02      	ble.n	8004cda <__ssvfiscanf_r+0x28e>
 8004cd4:	3301      	adds	r3, #1
 8004cd6:	6023      	str	r3, [r4, #0]
 8004cd8:	e7ae      	b.n	8004c38 <__ssvfiscanf_r+0x1ec>
 8004cda:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8004cdc:	4621      	mov	r1, r4
 8004cde:	4630      	mov	r0, r6
 8004ce0:	4798      	blx	r3
 8004ce2:	2800      	cmp	r0, #0
 8004ce4:	d0a8      	beq.n	8004c38 <__ssvfiscanf_r+0x1ec>
 8004ce6:	e78b      	b.n	8004c00 <__ssvfiscanf_r+0x1b4>
 8004ce8:	2b04      	cmp	r3, #4
 8004cea:	dc06      	bgt.n	8004cfa <__ssvfiscanf_r+0x2ae>
 8004cec:	466b      	mov	r3, sp
 8004cee:	4622      	mov	r2, r4
 8004cf0:	a941      	add	r1, sp, #260	; 0x104
 8004cf2:	4630      	mov	r0, r6
 8004cf4:	f000 fa0e 	bl	8005114 <_scanf_i>
 8004cf8:	e7ac      	b.n	8004c54 <__ssvfiscanf_r+0x208>
 8004cfa:	4b0f      	ldr	r3, [pc, #60]	; (8004d38 <__ssvfiscanf_r+0x2ec>)
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	f43f aecf 	beq.w	8004aa0 <__ssvfiscanf_r+0x54>
 8004d02:	466b      	mov	r3, sp
 8004d04:	4622      	mov	r2, r4
 8004d06:	a941      	add	r1, sp, #260	; 0x104
 8004d08:	4630      	mov	r0, r6
 8004d0a:	f3af 8000 	nop.w
 8004d0e:	e7a1      	b.n	8004c54 <__ssvfiscanf_r+0x208>
 8004d10:	89a3      	ldrh	r3, [r4, #12]
 8004d12:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004d16:	bf18      	it	ne
 8004d18:	f04f 30ff 	movne.w	r0, #4294967295
 8004d1c:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8004d20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d24:	9844      	ldr	r0, [sp, #272]	; 0x110
 8004d26:	e7f9      	b.n	8004d1c <__ssvfiscanf_r+0x2d0>
 8004d28:	08004999 	.word	0x08004999
 8004d2c:	08004a13 	.word	0x08004a13
 8004d30:	08005ba7 	.word	0x08005ba7
 8004d34:	08005b5e 	.word	0x08005b5e
 8004d38:	00000000 	.word	0x00000000

08004d3c <_printf_common>:
 8004d3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d40:	4616      	mov	r6, r2
 8004d42:	4699      	mov	r9, r3
 8004d44:	688a      	ldr	r2, [r1, #8]
 8004d46:	690b      	ldr	r3, [r1, #16]
 8004d48:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	bfb8      	it	lt
 8004d50:	4613      	movlt	r3, r2
 8004d52:	6033      	str	r3, [r6, #0]
 8004d54:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004d58:	4607      	mov	r7, r0
 8004d5a:	460c      	mov	r4, r1
 8004d5c:	b10a      	cbz	r2, 8004d62 <_printf_common+0x26>
 8004d5e:	3301      	adds	r3, #1
 8004d60:	6033      	str	r3, [r6, #0]
 8004d62:	6823      	ldr	r3, [r4, #0]
 8004d64:	0699      	lsls	r1, r3, #26
 8004d66:	bf42      	ittt	mi
 8004d68:	6833      	ldrmi	r3, [r6, #0]
 8004d6a:	3302      	addmi	r3, #2
 8004d6c:	6033      	strmi	r3, [r6, #0]
 8004d6e:	6825      	ldr	r5, [r4, #0]
 8004d70:	f015 0506 	ands.w	r5, r5, #6
 8004d74:	d106      	bne.n	8004d84 <_printf_common+0x48>
 8004d76:	f104 0a19 	add.w	sl, r4, #25
 8004d7a:	68e3      	ldr	r3, [r4, #12]
 8004d7c:	6832      	ldr	r2, [r6, #0]
 8004d7e:	1a9b      	subs	r3, r3, r2
 8004d80:	42ab      	cmp	r3, r5
 8004d82:	dc26      	bgt.n	8004dd2 <_printf_common+0x96>
 8004d84:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004d88:	1e13      	subs	r3, r2, #0
 8004d8a:	6822      	ldr	r2, [r4, #0]
 8004d8c:	bf18      	it	ne
 8004d8e:	2301      	movne	r3, #1
 8004d90:	0692      	lsls	r2, r2, #26
 8004d92:	d42b      	bmi.n	8004dec <_printf_common+0xb0>
 8004d94:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004d98:	4649      	mov	r1, r9
 8004d9a:	4638      	mov	r0, r7
 8004d9c:	47c0      	blx	r8
 8004d9e:	3001      	adds	r0, #1
 8004da0:	d01e      	beq.n	8004de0 <_printf_common+0xa4>
 8004da2:	6823      	ldr	r3, [r4, #0]
 8004da4:	68e5      	ldr	r5, [r4, #12]
 8004da6:	6832      	ldr	r2, [r6, #0]
 8004da8:	f003 0306 	and.w	r3, r3, #6
 8004dac:	2b04      	cmp	r3, #4
 8004dae:	bf08      	it	eq
 8004db0:	1aad      	subeq	r5, r5, r2
 8004db2:	68a3      	ldr	r3, [r4, #8]
 8004db4:	6922      	ldr	r2, [r4, #16]
 8004db6:	bf0c      	ite	eq
 8004db8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004dbc:	2500      	movne	r5, #0
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	bfc4      	itt	gt
 8004dc2:	1a9b      	subgt	r3, r3, r2
 8004dc4:	18ed      	addgt	r5, r5, r3
 8004dc6:	2600      	movs	r6, #0
 8004dc8:	341a      	adds	r4, #26
 8004dca:	42b5      	cmp	r5, r6
 8004dcc:	d11a      	bne.n	8004e04 <_printf_common+0xc8>
 8004dce:	2000      	movs	r0, #0
 8004dd0:	e008      	b.n	8004de4 <_printf_common+0xa8>
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	4652      	mov	r2, sl
 8004dd6:	4649      	mov	r1, r9
 8004dd8:	4638      	mov	r0, r7
 8004dda:	47c0      	blx	r8
 8004ddc:	3001      	adds	r0, #1
 8004dde:	d103      	bne.n	8004de8 <_printf_common+0xac>
 8004de0:	f04f 30ff 	mov.w	r0, #4294967295
 8004de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004de8:	3501      	adds	r5, #1
 8004dea:	e7c6      	b.n	8004d7a <_printf_common+0x3e>
 8004dec:	18e1      	adds	r1, r4, r3
 8004dee:	1c5a      	adds	r2, r3, #1
 8004df0:	2030      	movs	r0, #48	; 0x30
 8004df2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004df6:	4422      	add	r2, r4
 8004df8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004dfc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004e00:	3302      	adds	r3, #2
 8004e02:	e7c7      	b.n	8004d94 <_printf_common+0x58>
 8004e04:	2301      	movs	r3, #1
 8004e06:	4622      	mov	r2, r4
 8004e08:	4649      	mov	r1, r9
 8004e0a:	4638      	mov	r0, r7
 8004e0c:	47c0      	blx	r8
 8004e0e:	3001      	adds	r0, #1
 8004e10:	d0e6      	beq.n	8004de0 <_printf_common+0xa4>
 8004e12:	3601      	adds	r6, #1
 8004e14:	e7d9      	b.n	8004dca <_printf_common+0x8e>
	...

08004e18 <_printf_i>:
 8004e18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004e1c:	460c      	mov	r4, r1
 8004e1e:	4691      	mov	r9, r2
 8004e20:	7e27      	ldrb	r7, [r4, #24]
 8004e22:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004e24:	2f78      	cmp	r7, #120	; 0x78
 8004e26:	4680      	mov	r8, r0
 8004e28:	469a      	mov	sl, r3
 8004e2a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004e2e:	d807      	bhi.n	8004e40 <_printf_i+0x28>
 8004e30:	2f62      	cmp	r7, #98	; 0x62
 8004e32:	d80a      	bhi.n	8004e4a <_printf_i+0x32>
 8004e34:	2f00      	cmp	r7, #0
 8004e36:	f000 80d8 	beq.w	8004fea <_printf_i+0x1d2>
 8004e3a:	2f58      	cmp	r7, #88	; 0x58
 8004e3c:	f000 80a3 	beq.w	8004f86 <_printf_i+0x16e>
 8004e40:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004e44:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004e48:	e03a      	b.n	8004ec0 <_printf_i+0xa8>
 8004e4a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004e4e:	2b15      	cmp	r3, #21
 8004e50:	d8f6      	bhi.n	8004e40 <_printf_i+0x28>
 8004e52:	a001      	add	r0, pc, #4	; (adr r0, 8004e58 <_printf_i+0x40>)
 8004e54:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004e58:	08004eb1 	.word	0x08004eb1
 8004e5c:	08004ec5 	.word	0x08004ec5
 8004e60:	08004e41 	.word	0x08004e41
 8004e64:	08004e41 	.word	0x08004e41
 8004e68:	08004e41 	.word	0x08004e41
 8004e6c:	08004e41 	.word	0x08004e41
 8004e70:	08004ec5 	.word	0x08004ec5
 8004e74:	08004e41 	.word	0x08004e41
 8004e78:	08004e41 	.word	0x08004e41
 8004e7c:	08004e41 	.word	0x08004e41
 8004e80:	08004e41 	.word	0x08004e41
 8004e84:	08004fd1 	.word	0x08004fd1
 8004e88:	08004ef5 	.word	0x08004ef5
 8004e8c:	08004fb3 	.word	0x08004fb3
 8004e90:	08004e41 	.word	0x08004e41
 8004e94:	08004e41 	.word	0x08004e41
 8004e98:	08004ff3 	.word	0x08004ff3
 8004e9c:	08004e41 	.word	0x08004e41
 8004ea0:	08004ef5 	.word	0x08004ef5
 8004ea4:	08004e41 	.word	0x08004e41
 8004ea8:	08004e41 	.word	0x08004e41
 8004eac:	08004fbb 	.word	0x08004fbb
 8004eb0:	680b      	ldr	r3, [r1, #0]
 8004eb2:	1d1a      	adds	r2, r3, #4
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	600a      	str	r2, [r1, #0]
 8004eb8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004ebc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	e0a3      	b.n	800500c <_printf_i+0x1f4>
 8004ec4:	6825      	ldr	r5, [r4, #0]
 8004ec6:	6808      	ldr	r0, [r1, #0]
 8004ec8:	062e      	lsls	r6, r5, #24
 8004eca:	f100 0304 	add.w	r3, r0, #4
 8004ece:	d50a      	bpl.n	8004ee6 <_printf_i+0xce>
 8004ed0:	6805      	ldr	r5, [r0, #0]
 8004ed2:	600b      	str	r3, [r1, #0]
 8004ed4:	2d00      	cmp	r5, #0
 8004ed6:	da03      	bge.n	8004ee0 <_printf_i+0xc8>
 8004ed8:	232d      	movs	r3, #45	; 0x2d
 8004eda:	426d      	negs	r5, r5
 8004edc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ee0:	485e      	ldr	r0, [pc, #376]	; (800505c <_printf_i+0x244>)
 8004ee2:	230a      	movs	r3, #10
 8004ee4:	e019      	b.n	8004f1a <_printf_i+0x102>
 8004ee6:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004eea:	6805      	ldr	r5, [r0, #0]
 8004eec:	600b      	str	r3, [r1, #0]
 8004eee:	bf18      	it	ne
 8004ef0:	b22d      	sxthne	r5, r5
 8004ef2:	e7ef      	b.n	8004ed4 <_printf_i+0xbc>
 8004ef4:	680b      	ldr	r3, [r1, #0]
 8004ef6:	6825      	ldr	r5, [r4, #0]
 8004ef8:	1d18      	adds	r0, r3, #4
 8004efa:	6008      	str	r0, [r1, #0]
 8004efc:	0628      	lsls	r0, r5, #24
 8004efe:	d501      	bpl.n	8004f04 <_printf_i+0xec>
 8004f00:	681d      	ldr	r5, [r3, #0]
 8004f02:	e002      	b.n	8004f0a <_printf_i+0xf2>
 8004f04:	0669      	lsls	r1, r5, #25
 8004f06:	d5fb      	bpl.n	8004f00 <_printf_i+0xe8>
 8004f08:	881d      	ldrh	r5, [r3, #0]
 8004f0a:	4854      	ldr	r0, [pc, #336]	; (800505c <_printf_i+0x244>)
 8004f0c:	2f6f      	cmp	r7, #111	; 0x6f
 8004f0e:	bf0c      	ite	eq
 8004f10:	2308      	moveq	r3, #8
 8004f12:	230a      	movne	r3, #10
 8004f14:	2100      	movs	r1, #0
 8004f16:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004f1a:	6866      	ldr	r6, [r4, #4]
 8004f1c:	60a6      	str	r6, [r4, #8]
 8004f1e:	2e00      	cmp	r6, #0
 8004f20:	bfa2      	ittt	ge
 8004f22:	6821      	ldrge	r1, [r4, #0]
 8004f24:	f021 0104 	bicge.w	r1, r1, #4
 8004f28:	6021      	strge	r1, [r4, #0]
 8004f2a:	b90d      	cbnz	r5, 8004f30 <_printf_i+0x118>
 8004f2c:	2e00      	cmp	r6, #0
 8004f2e:	d04d      	beq.n	8004fcc <_printf_i+0x1b4>
 8004f30:	4616      	mov	r6, r2
 8004f32:	fbb5 f1f3 	udiv	r1, r5, r3
 8004f36:	fb03 5711 	mls	r7, r3, r1, r5
 8004f3a:	5dc7      	ldrb	r7, [r0, r7]
 8004f3c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004f40:	462f      	mov	r7, r5
 8004f42:	42bb      	cmp	r3, r7
 8004f44:	460d      	mov	r5, r1
 8004f46:	d9f4      	bls.n	8004f32 <_printf_i+0x11a>
 8004f48:	2b08      	cmp	r3, #8
 8004f4a:	d10b      	bne.n	8004f64 <_printf_i+0x14c>
 8004f4c:	6823      	ldr	r3, [r4, #0]
 8004f4e:	07df      	lsls	r7, r3, #31
 8004f50:	d508      	bpl.n	8004f64 <_printf_i+0x14c>
 8004f52:	6923      	ldr	r3, [r4, #16]
 8004f54:	6861      	ldr	r1, [r4, #4]
 8004f56:	4299      	cmp	r1, r3
 8004f58:	bfde      	ittt	le
 8004f5a:	2330      	movle	r3, #48	; 0x30
 8004f5c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004f60:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004f64:	1b92      	subs	r2, r2, r6
 8004f66:	6122      	str	r2, [r4, #16]
 8004f68:	f8cd a000 	str.w	sl, [sp]
 8004f6c:	464b      	mov	r3, r9
 8004f6e:	aa03      	add	r2, sp, #12
 8004f70:	4621      	mov	r1, r4
 8004f72:	4640      	mov	r0, r8
 8004f74:	f7ff fee2 	bl	8004d3c <_printf_common>
 8004f78:	3001      	adds	r0, #1
 8004f7a:	d14c      	bne.n	8005016 <_printf_i+0x1fe>
 8004f7c:	f04f 30ff 	mov.w	r0, #4294967295
 8004f80:	b004      	add	sp, #16
 8004f82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f86:	4835      	ldr	r0, [pc, #212]	; (800505c <_printf_i+0x244>)
 8004f88:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004f8c:	6823      	ldr	r3, [r4, #0]
 8004f8e:	680e      	ldr	r6, [r1, #0]
 8004f90:	061f      	lsls	r7, r3, #24
 8004f92:	f856 5b04 	ldr.w	r5, [r6], #4
 8004f96:	600e      	str	r6, [r1, #0]
 8004f98:	d514      	bpl.n	8004fc4 <_printf_i+0x1ac>
 8004f9a:	07d9      	lsls	r1, r3, #31
 8004f9c:	bf44      	itt	mi
 8004f9e:	f043 0320 	orrmi.w	r3, r3, #32
 8004fa2:	6023      	strmi	r3, [r4, #0]
 8004fa4:	b91d      	cbnz	r5, 8004fae <_printf_i+0x196>
 8004fa6:	6823      	ldr	r3, [r4, #0]
 8004fa8:	f023 0320 	bic.w	r3, r3, #32
 8004fac:	6023      	str	r3, [r4, #0]
 8004fae:	2310      	movs	r3, #16
 8004fb0:	e7b0      	b.n	8004f14 <_printf_i+0xfc>
 8004fb2:	6823      	ldr	r3, [r4, #0]
 8004fb4:	f043 0320 	orr.w	r3, r3, #32
 8004fb8:	6023      	str	r3, [r4, #0]
 8004fba:	2378      	movs	r3, #120	; 0x78
 8004fbc:	4828      	ldr	r0, [pc, #160]	; (8005060 <_printf_i+0x248>)
 8004fbe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004fc2:	e7e3      	b.n	8004f8c <_printf_i+0x174>
 8004fc4:	065e      	lsls	r6, r3, #25
 8004fc6:	bf48      	it	mi
 8004fc8:	b2ad      	uxthmi	r5, r5
 8004fca:	e7e6      	b.n	8004f9a <_printf_i+0x182>
 8004fcc:	4616      	mov	r6, r2
 8004fce:	e7bb      	b.n	8004f48 <_printf_i+0x130>
 8004fd0:	680b      	ldr	r3, [r1, #0]
 8004fd2:	6826      	ldr	r6, [r4, #0]
 8004fd4:	6960      	ldr	r0, [r4, #20]
 8004fd6:	1d1d      	adds	r5, r3, #4
 8004fd8:	600d      	str	r5, [r1, #0]
 8004fda:	0635      	lsls	r5, r6, #24
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	d501      	bpl.n	8004fe4 <_printf_i+0x1cc>
 8004fe0:	6018      	str	r0, [r3, #0]
 8004fe2:	e002      	b.n	8004fea <_printf_i+0x1d2>
 8004fe4:	0671      	lsls	r1, r6, #25
 8004fe6:	d5fb      	bpl.n	8004fe0 <_printf_i+0x1c8>
 8004fe8:	8018      	strh	r0, [r3, #0]
 8004fea:	2300      	movs	r3, #0
 8004fec:	6123      	str	r3, [r4, #16]
 8004fee:	4616      	mov	r6, r2
 8004ff0:	e7ba      	b.n	8004f68 <_printf_i+0x150>
 8004ff2:	680b      	ldr	r3, [r1, #0]
 8004ff4:	1d1a      	adds	r2, r3, #4
 8004ff6:	600a      	str	r2, [r1, #0]
 8004ff8:	681e      	ldr	r6, [r3, #0]
 8004ffa:	6862      	ldr	r2, [r4, #4]
 8004ffc:	2100      	movs	r1, #0
 8004ffe:	4630      	mov	r0, r6
 8005000:	f7fb f926 	bl	8000250 <memchr>
 8005004:	b108      	cbz	r0, 800500a <_printf_i+0x1f2>
 8005006:	1b80      	subs	r0, r0, r6
 8005008:	6060      	str	r0, [r4, #4]
 800500a:	6863      	ldr	r3, [r4, #4]
 800500c:	6123      	str	r3, [r4, #16]
 800500e:	2300      	movs	r3, #0
 8005010:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005014:	e7a8      	b.n	8004f68 <_printf_i+0x150>
 8005016:	6923      	ldr	r3, [r4, #16]
 8005018:	4632      	mov	r2, r6
 800501a:	4649      	mov	r1, r9
 800501c:	4640      	mov	r0, r8
 800501e:	47d0      	blx	sl
 8005020:	3001      	adds	r0, #1
 8005022:	d0ab      	beq.n	8004f7c <_printf_i+0x164>
 8005024:	6823      	ldr	r3, [r4, #0]
 8005026:	079b      	lsls	r3, r3, #30
 8005028:	d413      	bmi.n	8005052 <_printf_i+0x23a>
 800502a:	68e0      	ldr	r0, [r4, #12]
 800502c:	9b03      	ldr	r3, [sp, #12]
 800502e:	4298      	cmp	r0, r3
 8005030:	bfb8      	it	lt
 8005032:	4618      	movlt	r0, r3
 8005034:	e7a4      	b.n	8004f80 <_printf_i+0x168>
 8005036:	2301      	movs	r3, #1
 8005038:	4632      	mov	r2, r6
 800503a:	4649      	mov	r1, r9
 800503c:	4640      	mov	r0, r8
 800503e:	47d0      	blx	sl
 8005040:	3001      	adds	r0, #1
 8005042:	d09b      	beq.n	8004f7c <_printf_i+0x164>
 8005044:	3501      	adds	r5, #1
 8005046:	68e3      	ldr	r3, [r4, #12]
 8005048:	9903      	ldr	r1, [sp, #12]
 800504a:	1a5b      	subs	r3, r3, r1
 800504c:	42ab      	cmp	r3, r5
 800504e:	dcf2      	bgt.n	8005036 <_printf_i+0x21e>
 8005050:	e7eb      	b.n	800502a <_printf_i+0x212>
 8005052:	2500      	movs	r5, #0
 8005054:	f104 0619 	add.w	r6, r4, #25
 8005058:	e7f5      	b.n	8005046 <_printf_i+0x22e>
 800505a:	bf00      	nop
 800505c:	08005b69 	.word	0x08005b69
 8005060:	08005b7a 	.word	0x08005b7a

08005064 <_scanf_chars>:
 8005064:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005068:	4615      	mov	r5, r2
 800506a:	688a      	ldr	r2, [r1, #8]
 800506c:	4680      	mov	r8, r0
 800506e:	460c      	mov	r4, r1
 8005070:	b932      	cbnz	r2, 8005080 <_scanf_chars+0x1c>
 8005072:	698a      	ldr	r2, [r1, #24]
 8005074:	2a00      	cmp	r2, #0
 8005076:	bf0c      	ite	eq
 8005078:	2201      	moveq	r2, #1
 800507a:	f04f 32ff 	movne.w	r2, #4294967295
 800507e:	608a      	str	r2, [r1, #8]
 8005080:	6822      	ldr	r2, [r4, #0]
 8005082:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8005110 <_scanf_chars+0xac>
 8005086:	06d1      	lsls	r1, r2, #27
 8005088:	bf5f      	itttt	pl
 800508a:	681a      	ldrpl	r2, [r3, #0]
 800508c:	1d11      	addpl	r1, r2, #4
 800508e:	6019      	strpl	r1, [r3, #0]
 8005090:	6816      	ldrpl	r6, [r2, #0]
 8005092:	2700      	movs	r7, #0
 8005094:	69a0      	ldr	r0, [r4, #24]
 8005096:	b188      	cbz	r0, 80050bc <_scanf_chars+0x58>
 8005098:	2801      	cmp	r0, #1
 800509a:	d107      	bne.n	80050ac <_scanf_chars+0x48>
 800509c:	682b      	ldr	r3, [r5, #0]
 800509e:	781a      	ldrb	r2, [r3, #0]
 80050a0:	6963      	ldr	r3, [r4, #20]
 80050a2:	5c9b      	ldrb	r3, [r3, r2]
 80050a4:	b953      	cbnz	r3, 80050bc <_scanf_chars+0x58>
 80050a6:	bb27      	cbnz	r7, 80050f2 <_scanf_chars+0x8e>
 80050a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80050ac:	2802      	cmp	r0, #2
 80050ae:	d120      	bne.n	80050f2 <_scanf_chars+0x8e>
 80050b0:	682b      	ldr	r3, [r5, #0]
 80050b2:	781b      	ldrb	r3, [r3, #0]
 80050b4:	f813 3009 	ldrb.w	r3, [r3, r9]
 80050b8:	071b      	lsls	r3, r3, #28
 80050ba:	d41a      	bmi.n	80050f2 <_scanf_chars+0x8e>
 80050bc:	6823      	ldr	r3, [r4, #0]
 80050be:	06da      	lsls	r2, r3, #27
 80050c0:	bf5e      	ittt	pl
 80050c2:	682b      	ldrpl	r3, [r5, #0]
 80050c4:	781b      	ldrbpl	r3, [r3, #0]
 80050c6:	f806 3b01 	strbpl.w	r3, [r6], #1
 80050ca:	682a      	ldr	r2, [r5, #0]
 80050cc:	686b      	ldr	r3, [r5, #4]
 80050ce:	3201      	adds	r2, #1
 80050d0:	602a      	str	r2, [r5, #0]
 80050d2:	68a2      	ldr	r2, [r4, #8]
 80050d4:	3b01      	subs	r3, #1
 80050d6:	3a01      	subs	r2, #1
 80050d8:	606b      	str	r3, [r5, #4]
 80050da:	3701      	adds	r7, #1
 80050dc:	60a2      	str	r2, [r4, #8]
 80050de:	b142      	cbz	r2, 80050f2 <_scanf_chars+0x8e>
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	dcd7      	bgt.n	8005094 <_scanf_chars+0x30>
 80050e4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80050e8:	4629      	mov	r1, r5
 80050ea:	4640      	mov	r0, r8
 80050ec:	4798      	blx	r3
 80050ee:	2800      	cmp	r0, #0
 80050f0:	d0d0      	beq.n	8005094 <_scanf_chars+0x30>
 80050f2:	6823      	ldr	r3, [r4, #0]
 80050f4:	f013 0310 	ands.w	r3, r3, #16
 80050f8:	d105      	bne.n	8005106 <_scanf_chars+0xa2>
 80050fa:	68e2      	ldr	r2, [r4, #12]
 80050fc:	3201      	adds	r2, #1
 80050fe:	60e2      	str	r2, [r4, #12]
 8005100:	69a2      	ldr	r2, [r4, #24]
 8005102:	b102      	cbz	r2, 8005106 <_scanf_chars+0xa2>
 8005104:	7033      	strb	r3, [r6, #0]
 8005106:	6923      	ldr	r3, [r4, #16]
 8005108:	441f      	add	r7, r3
 800510a:	6127      	str	r7, [r4, #16]
 800510c:	2000      	movs	r0, #0
 800510e:	e7cb      	b.n	80050a8 <_scanf_chars+0x44>
 8005110:	08005ba7 	.word	0x08005ba7

08005114 <_scanf_i>:
 8005114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005118:	4698      	mov	r8, r3
 800511a:	4b74      	ldr	r3, [pc, #464]	; (80052ec <_scanf_i+0x1d8>)
 800511c:	460c      	mov	r4, r1
 800511e:	4682      	mov	sl, r0
 8005120:	4616      	mov	r6, r2
 8005122:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005126:	b087      	sub	sp, #28
 8005128:	ab03      	add	r3, sp, #12
 800512a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800512e:	4b70      	ldr	r3, [pc, #448]	; (80052f0 <_scanf_i+0x1dc>)
 8005130:	69a1      	ldr	r1, [r4, #24]
 8005132:	4a70      	ldr	r2, [pc, #448]	; (80052f4 <_scanf_i+0x1e0>)
 8005134:	2903      	cmp	r1, #3
 8005136:	bf18      	it	ne
 8005138:	461a      	movne	r2, r3
 800513a:	68a3      	ldr	r3, [r4, #8]
 800513c:	9201      	str	r2, [sp, #4]
 800513e:	1e5a      	subs	r2, r3, #1
 8005140:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8005144:	bf88      	it	hi
 8005146:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800514a:	4627      	mov	r7, r4
 800514c:	bf82      	ittt	hi
 800514e:	eb03 0905 	addhi.w	r9, r3, r5
 8005152:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005156:	60a3      	strhi	r3, [r4, #8]
 8005158:	f857 3b1c 	ldr.w	r3, [r7], #28
 800515c:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8005160:	bf98      	it	ls
 8005162:	f04f 0900 	movls.w	r9, #0
 8005166:	6023      	str	r3, [r4, #0]
 8005168:	463d      	mov	r5, r7
 800516a:	f04f 0b00 	mov.w	fp, #0
 800516e:	6831      	ldr	r1, [r6, #0]
 8005170:	ab03      	add	r3, sp, #12
 8005172:	7809      	ldrb	r1, [r1, #0]
 8005174:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8005178:	2202      	movs	r2, #2
 800517a:	f7fb f869 	bl	8000250 <memchr>
 800517e:	b328      	cbz	r0, 80051cc <_scanf_i+0xb8>
 8005180:	f1bb 0f01 	cmp.w	fp, #1
 8005184:	d159      	bne.n	800523a <_scanf_i+0x126>
 8005186:	6862      	ldr	r2, [r4, #4]
 8005188:	b92a      	cbnz	r2, 8005196 <_scanf_i+0x82>
 800518a:	6822      	ldr	r2, [r4, #0]
 800518c:	2308      	movs	r3, #8
 800518e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005192:	6063      	str	r3, [r4, #4]
 8005194:	6022      	str	r2, [r4, #0]
 8005196:	6822      	ldr	r2, [r4, #0]
 8005198:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800519c:	6022      	str	r2, [r4, #0]
 800519e:	68a2      	ldr	r2, [r4, #8]
 80051a0:	1e51      	subs	r1, r2, #1
 80051a2:	60a1      	str	r1, [r4, #8]
 80051a4:	b192      	cbz	r2, 80051cc <_scanf_i+0xb8>
 80051a6:	6832      	ldr	r2, [r6, #0]
 80051a8:	1c51      	adds	r1, r2, #1
 80051aa:	6031      	str	r1, [r6, #0]
 80051ac:	7812      	ldrb	r2, [r2, #0]
 80051ae:	f805 2b01 	strb.w	r2, [r5], #1
 80051b2:	6872      	ldr	r2, [r6, #4]
 80051b4:	3a01      	subs	r2, #1
 80051b6:	2a00      	cmp	r2, #0
 80051b8:	6072      	str	r2, [r6, #4]
 80051ba:	dc07      	bgt.n	80051cc <_scanf_i+0xb8>
 80051bc:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 80051c0:	4631      	mov	r1, r6
 80051c2:	4650      	mov	r0, sl
 80051c4:	4790      	blx	r2
 80051c6:	2800      	cmp	r0, #0
 80051c8:	f040 8085 	bne.w	80052d6 <_scanf_i+0x1c2>
 80051cc:	f10b 0b01 	add.w	fp, fp, #1
 80051d0:	f1bb 0f03 	cmp.w	fp, #3
 80051d4:	d1cb      	bne.n	800516e <_scanf_i+0x5a>
 80051d6:	6863      	ldr	r3, [r4, #4]
 80051d8:	b90b      	cbnz	r3, 80051de <_scanf_i+0xca>
 80051da:	230a      	movs	r3, #10
 80051dc:	6063      	str	r3, [r4, #4]
 80051de:	6863      	ldr	r3, [r4, #4]
 80051e0:	4945      	ldr	r1, [pc, #276]	; (80052f8 <_scanf_i+0x1e4>)
 80051e2:	6960      	ldr	r0, [r4, #20]
 80051e4:	1ac9      	subs	r1, r1, r3
 80051e6:	f000 f889 	bl	80052fc <__sccl>
 80051ea:	f04f 0b00 	mov.w	fp, #0
 80051ee:	68a3      	ldr	r3, [r4, #8]
 80051f0:	6822      	ldr	r2, [r4, #0]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d03d      	beq.n	8005272 <_scanf_i+0x15e>
 80051f6:	6831      	ldr	r1, [r6, #0]
 80051f8:	6960      	ldr	r0, [r4, #20]
 80051fa:	f891 c000 	ldrb.w	ip, [r1]
 80051fe:	f810 000c 	ldrb.w	r0, [r0, ip]
 8005202:	2800      	cmp	r0, #0
 8005204:	d035      	beq.n	8005272 <_scanf_i+0x15e>
 8005206:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800520a:	d124      	bne.n	8005256 <_scanf_i+0x142>
 800520c:	0510      	lsls	r0, r2, #20
 800520e:	d522      	bpl.n	8005256 <_scanf_i+0x142>
 8005210:	f10b 0b01 	add.w	fp, fp, #1
 8005214:	f1b9 0f00 	cmp.w	r9, #0
 8005218:	d003      	beq.n	8005222 <_scanf_i+0x10e>
 800521a:	3301      	adds	r3, #1
 800521c:	f109 39ff 	add.w	r9, r9, #4294967295
 8005220:	60a3      	str	r3, [r4, #8]
 8005222:	6873      	ldr	r3, [r6, #4]
 8005224:	3b01      	subs	r3, #1
 8005226:	2b00      	cmp	r3, #0
 8005228:	6073      	str	r3, [r6, #4]
 800522a:	dd1b      	ble.n	8005264 <_scanf_i+0x150>
 800522c:	6833      	ldr	r3, [r6, #0]
 800522e:	3301      	adds	r3, #1
 8005230:	6033      	str	r3, [r6, #0]
 8005232:	68a3      	ldr	r3, [r4, #8]
 8005234:	3b01      	subs	r3, #1
 8005236:	60a3      	str	r3, [r4, #8]
 8005238:	e7d9      	b.n	80051ee <_scanf_i+0xda>
 800523a:	f1bb 0f02 	cmp.w	fp, #2
 800523e:	d1ae      	bne.n	800519e <_scanf_i+0x8a>
 8005240:	6822      	ldr	r2, [r4, #0]
 8005242:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8005246:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800524a:	d1bf      	bne.n	80051cc <_scanf_i+0xb8>
 800524c:	2310      	movs	r3, #16
 800524e:	6063      	str	r3, [r4, #4]
 8005250:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005254:	e7a2      	b.n	800519c <_scanf_i+0x88>
 8005256:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800525a:	6022      	str	r2, [r4, #0]
 800525c:	780b      	ldrb	r3, [r1, #0]
 800525e:	f805 3b01 	strb.w	r3, [r5], #1
 8005262:	e7de      	b.n	8005222 <_scanf_i+0x10e>
 8005264:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005268:	4631      	mov	r1, r6
 800526a:	4650      	mov	r0, sl
 800526c:	4798      	blx	r3
 800526e:	2800      	cmp	r0, #0
 8005270:	d0df      	beq.n	8005232 <_scanf_i+0x11e>
 8005272:	6823      	ldr	r3, [r4, #0]
 8005274:	05d9      	lsls	r1, r3, #23
 8005276:	d50d      	bpl.n	8005294 <_scanf_i+0x180>
 8005278:	42bd      	cmp	r5, r7
 800527a:	d909      	bls.n	8005290 <_scanf_i+0x17c>
 800527c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8005280:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005284:	4632      	mov	r2, r6
 8005286:	4650      	mov	r0, sl
 8005288:	4798      	blx	r3
 800528a:	f105 39ff 	add.w	r9, r5, #4294967295
 800528e:	464d      	mov	r5, r9
 8005290:	42bd      	cmp	r5, r7
 8005292:	d028      	beq.n	80052e6 <_scanf_i+0x1d2>
 8005294:	6822      	ldr	r2, [r4, #0]
 8005296:	f012 0210 	ands.w	r2, r2, #16
 800529a:	d113      	bne.n	80052c4 <_scanf_i+0x1b0>
 800529c:	702a      	strb	r2, [r5, #0]
 800529e:	6863      	ldr	r3, [r4, #4]
 80052a0:	9e01      	ldr	r6, [sp, #4]
 80052a2:	4639      	mov	r1, r7
 80052a4:	4650      	mov	r0, sl
 80052a6:	47b0      	blx	r6
 80052a8:	f8d8 3000 	ldr.w	r3, [r8]
 80052ac:	6821      	ldr	r1, [r4, #0]
 80052ae:	1d1a      	adds	r2, r3, #4
 80052b0:	f8c8 2000 	str.w	r2, [r8]
 80052b4:	f011 0f20 	tst.w	r1, #32
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	d00f      	beq.n	80052dc <_scanf_i+0x1c8>
 80052bc:	6018      	str	r0, [r3, #0]
 80052be:	68e3      	ldr	r3, [r4, #12]
 80052c0:	3301      	adds	r3, #1
 80052c2:	60e3      	str	r3, [r4, #12]
 80052c4:	1bed      	subs	r5, r5, r7
 80052c6:	44ab      	add	fp, r5
 80052c8:	6925      	ldr	r5, [r4, #16]
 80052ca:	445d      	add	r5, fp
 80052cc:	6125      	str	r5, [r4, #16]
 80052ce:	2000      	movs	r0, #0
 80052d0:	b007      	add	sp, #28
 80052d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052d6:	f04f 0b00 	mov.w	fp, #0
 80052da:	e7ca      	b.n	8005272 <_scanf_i+0x15e>
 80052dc:	07ca      	lsls	r2, r1, #31
 80052de:	bf4c      	ite	mi
 80052e0:	8018      	strhmi	r0, [r3, #0]
 80052e2:	6018      	strpl	r0, [r3, #0]
 80052e4:	e7eb      	b.n	80052be <_scanf_i+0x1aa>
 80052e6:	2001      	movs	r0, #1
 80052e8:	e7f2      	b.n	80052d0 <_scanf_i+0x1bc>
 80052ea:	bf00      	nop
 80052ec:	08005b34 	.word	0x08005b34
 80052f0:	08005575 	.word	0x08005575
 80052f4:	08005479 	.word	0x08005479
 80052f8:	08005ba4 	.word	0x08005ba4

080052fc <__sccl>:
 80052fc:	b570      	push	{r4, r5, r6, lr}
 80052fe:	780b      	ldrb	r3, [r1, #0]
 8005300:	4604      	mov	r4, r0
 8005302:	2b5e      	cmp	r3, #94	; 0x5e
 8005304:	bf0b      	itete	eq
 8005306:	784b      	ldrbeq	r3, [r1, #1]
 8005308:	1c48      	addne	r0, r1, #1
 800530a:	1c88      	addeq	r0, r1, #2
 800530c:	2200      	movne	r2, #0
 800530e:	bf08      	it	eq
 8005310:	2201      	moveq	r2, #1
 8005312:	1e61      	subs	r1, r4, #1
 8005314:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8005318:	f801 2f01 	strb.w	r2, [r1, #1]!
 800531c:	42a9      	cmp	r1, r5
 800531e:	d1fb      	bne.n	8005318 <__sccl+0x1c>
 8005320:	b90b      	cbnz	r3, 8005326 <__sccl+0x2a>
 8005322:	3801      	subs	r0, #1
 8005324:	bd70      	pop	{r4, r5, r6, pc}
 8005326:	f082 0101 	eor.w	r1, r2, #1
 800532a:	54e1      	strb	r1, [r4, r3]
 800532c:	1c42      	adds	r2, r0, #1
 800532e:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 8005332:	2d2d      	cmp	r5, #45	; 0x2d
 8005334:	f102 36ff 	add.w	r6, r2, #4294967295
 8005338:	4610      	mov	r0, r2
 800533a:	d006      	beq.n	800534a <__sccl+0x4e>
 800533c:	2d5d      	cmp	r5, #93	; 0x5d
 800533e:	d0f1      	beq.n	8005324 <__sccl+0x28>
 8005340:	b90d      	cbnz	r5, 8005346 <__sccl+0x4a>
 8005342:	4630      	mov	r0, r6
 8005344:	e7ee      	b.n	8005324 <__sccl+0x28>
 8005346:	462b      	mov	r3, r5
 8005348:	e7ef      	b.n	800532a <__sccl+0x2e>
 800534a:	7816      	ldrb	r6, [r2, #0]
 800534c:	2e5d      	cmp	r6, #93	; 0x5d
 800534e:	d0fa      	beq.n	8005346 <__sccl+0x4a>
 8005350:	42b3      	cmp	r3, r6
 8005352:	dcf8      	bgt.n	8005346 <__sccl+0x4a>
 8005354:	4618      	mov	r0, r3
 8005356:	3001      	adds	r0, #1
 8005358:	4286      	cmp	r6, r0
 800535a:	5421      	strb	r1, [r4, r0]
 800535c:	dcfb      	bgt.n	8005356 <__sccl+0x5a>
 800535e:	43d8      	mvns	r0, r3
 8005360:	4430      	add	r0, r6
 8005362:	1c5d      	adds	r5, r3, #1
 8005364:	42b3      	cmp	r3, r6
 8005366:	bfa8      	it	ge
 8005368:	2000      	movge	r0, #0
 800536a:	182b      	adds	r3, r5, r0
 800536c:	3202      	adds	r2, #2
 800536e:	e7de      	b.n	800532e <__sccl+0x32>

08005370 <_strtol_l.isra.0>:
 8005370:	2b01      	cmp	r3, #1
 8005372:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005376:	d001      	beq.n	800537c <_strtol_l.isra.0+0xc>
 8005378:	2b24      	cmp	r3, #36	; 0x24
 800537a:	d906      	bls.n	800538a <_strtol_l.isra.0+0x1a>
 800537c:	f7ff f90c 	bl	8004598 <__errno>
 8005380:	2316      	movs	r3, #22
 8005382:	6003      	str	r3, [r0, #0]
 8005384:	2000      	movs	r0, #0
 8005386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800538a:	4f3a      	ldr	r7, [pc, #232]	; (8005474 <_strtol_l.isra.0+0x104>)
 800538c:	468e      	mov	lr, r1
 800538e:	4676      	mov	r6, lr
 8005390:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8005394:	5de5      	ldrb	r5, [r4, r7]
 8005396:	f015 0508 	ands.w	r5, r5, #8
 800539a:	d1f8      	bne.n	800538e <_strtol_l.isra.0+0x1e>
 800539c:	2c2d      	cmp	r4, #45	; 0x2d
 800539e:	d134      	bne.n	800540a <_strtol_l.isra.0+0x9a>
 80053a0:	f89e 4000 	ldrb.w	r4, [lr]
 80053a4:	f04f 0801 	mov.w	r8, #1
 80053a8:	f106 0e02 	add.w	lr, r6, #2
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d05c      	beq.n	800546a <_strtol_l.isra.0+0xfa>
 80053b0:	2b10      	cmp	r3, #16
 80053b2:	d10c      	bne.n	80053ce <_strtol_l.isra.0+0x5e>
 80053b4:	2c30      	cmp	r4, #48	; 0x30
 80053b6:	d10a      	bne.n	80053ce <_strtol_l.isra.0+0x5e>
 80053b8:	f89e 4000 	ldrb.w	r4, [lr]
 80053bc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80053c0:	2c58      	cmp	r4, #88	; 0x58
 80053c2:	d14d      	bne.n	8005460 <_strtol_l.isra.0+0xf0>
 80053c4:	f89e 4001 	ldrb.w	r4, [lr, #1]
 80053c8:	2310      	movs	r3, #16
 80053ca:	f10e 0e02 	add.w	lr, lr, #2
 80053ce:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 80053d2:	f10c 3cff 	add.w	ip, ip, #4294967295
 80053d6:	2600      	movs	r6, #0
 80053d8:	fbbc f9f3 	udiv	r9, ip, r3
 80053dc:	4635      	mov	r5, r6
 80053de:	fb03 ca19 	mls	sl, r3, r9, ip
 80053e2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80053e6:	2f09      	cmp	r7, #9
 80053e8:	d818      	bhi.n	800541c <_strtol_l.isra.0+0xac>
 80053ea:	463c      	mov	r4, r7
 80053ec:	42a3      	cmp	r3, r4
 80053ee:	dd24      	ble.n	800543a <_strtol_l.isra.0+0xca>
 80053f0:	2e00      	cmp	r6, #0
 80053f2:	db1f      	blt.n	8005434 <_strtol_l.isra.0+0xc4>
 80053f4:	45a9      	cmp	r9, r5
 80053f6:	d31d      	bcc.n	8005434 <_strtol_l.isra.0+0xc4>
 80053f8:	d101      	bne.n	80053fe <_strtol_l.isra.0+0x8e>
 80053fa:	45a2      	cmp	sl, r4
 80053fc:	db1a      	blt.n	8005434 <_strtol_l.isra.0+0xc4>
 80053fe:	fb05 4503 	mla	r5, r5, r3, r4
 8005402:	2601      	movs	r6, #1
 8005404:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8005408:	e7eb      	b.n	80053e2 <_strtol_l.isra.0+0x72>
 800540a:	2c2b      	cmp	r4, #43	; 0x2b
 800540c:	bf08      	it	eq
 800540e:	f89e 4000 	ldrbeq.w	r4, [lr]
 8005412:	46a8      	mov	r8, r5
 8005414:	bf08      	it	eq
 8005416:	f106 0e02 	addeq.w	lr, r6, #2
 800541a:	e7c7      	b.n	80053ac <_strtol_l.isra.0+0x3c>
 800541c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8005420:	2f19      	cmp	r7, #25
 8005422:	d801      	bhi.n	8005428 <_strtol_l.isra.0+0xb8>
 8005424:	3c37      	subs	r4, #55	; 0x37
 8005426:	e7e1      	b.n	80053ec <_strtol_l.isra.0+0x7c>
 8005428:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800542c:	2f19      	cmp	r7, #25
 800542e:	d804      	bhi.n	800543a <_strtol_l.isra.0+0xca>
 8005430:	3c57      	subs	r4, #87	; 0x57
 8005432:	e7db      	b.n	80053ec <_strtol_l.isra.0+0x7c>
 8005434:	f04f 36ff 	mov.w	r6, #4294967295
 8005438:	e7e4      	b.n	8005404 <_strtol_l.isra.0+0x94>
 800543a:	2e00      	cmp	r6, #0
 800543c:	da05      	bge.n	800544a <_strtol_l.isra.0+0xda>
 800543e:	2322      	movs	r3, #34	; 0x22
 8005440:	6003      	str	r3, [r0, #0]
 8005442:	4665      	mov	r5, ip
 8005444:	b942      	cbnz	r2, 8005458 <_strtol_l.isra.0+0xe8>
 8005446:	4628      	mov	r0, r5
 8005448:	e79d      	b.n	8005386 <_strtol_l.isra.0+0x16>
 800544a:	f1b8 0f00 	cmp.w	r8, #0
 800544e:	d000      	beq.n	8005452 <_strtol_l.isra.0+0xe2>
 8005450:	426d      	negs	r5, r5
 8005452:	2a00      	cmp	r2, #0
 8005454:	d0f7      	beq.n	8005446 <_strtol_l.isra.0+0xd6>
 8005456:	b10e      	cbz	r6, 800545c <_strtol_l.isra.0+0xec>
 8005458:	f10e 31ff 	add.w	r1, lr, #4294967295
 800545c:	6011      	str	r1, [r2, #0]
 800545e:	e7f2      	b.n	8005446 <_strtol_l.isra.0+0xd6>
 8005460:	2430      	movs	r4, #48	; 0x30
 8005462:	2b00      	cmp	r3, #0
 8005464:	d1b3      	bne.n	80053ce <_strtol_l.isra.0+0x5e>
 8005466:	2308      	movs	r3, #8
 8005468:	e7b1      	b.n	80053ce <_strtol_l.isra.0+0x5e>
 800546a:	2c30      	cmp	r4, #48	; 0x30
 800546c:	d0a4      	beq.n	80053b8 <_strtol_l.isra.0+0x48>
 800546e:	230a      	movs	r3, #10
 8005470:	e7ad      	b.n	80053ce <_strtol_l.isra.0+0x5e>
 8005472:	bf00      	nop
 8005474:	08005ba7 	.word	0x08005ba7

08005478 <_strtol_r>:
 8005478:	f7ff bf7a 	b.w	8005370 <_strtol_l.isra.0>

0800547c <_strtoul_l.isra.0>:
 800547c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005480:	4e3b      	ldr	r6, [pc, #236]	; (8005570 <_strtoul_l.isra.0+0xf4>)
 8005482:	4686      	mov	lr, r0
 8005484:	468c      	mov	ip, r1
 8005486:	4660      	mov	r0, ip
 8005488:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800548c:	5da5      	ldrb	r5, [r4, r6]
 800548e:	f015 0508 	ands.w	r5, r5, #8
 8005492:	d1f8      	bne.n	8005486 <_strtoul_l.isra.0+0xa>
 8005494:	2c2d      	cmp	r4, #45	; 0x2d
 8005496:	d134      	bne.n	8005502 <_strtoul_l.isra.0+0x86>
 8005498:	f89c 4000 	ldrb.w	r4, [ip]
 800549c:	f04f 0801 	mov.w	r8, #1
 80054a0:	f100 0c02 	add.w	ip, r0, #2
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d05e      	beq.n	8005566 <_strtoul_l.isra.0+0xea>
 80054a8:	2b10      	cmp	r3, #16
 80054aa:	d10c      	bne.n	80054c6 <_strtoul_l.isra.0+0x4a>
 80054ac:	2c30      	cmp	r4, #48	; 0x30
 80054ae:	d10a      	bne.n	80054c6 <_strtoul_l.isra.0+0x4a>
 80054b0:	f89c 0000 	ldrb.w	r0, [ip]
 80054b4:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80054b8:	2858      	cmp	r0, #88	; 0x58
 80054ba:	d14f      	bne.n	800555c <_strtoul_l.isra.0+0xe0>
 80054bc:	f89c 4001 	ldrb.w	r4, [ip, #1]
 80054c0:	2310      	movs	r3, #16
 80054c2:	f10c 0c02 	add.w	ip, ip, #2
 80054c6:	f04f 37ff 	mov.w	r7, #4294967295
 80054ca:	2500      	movs	r5, #0
 80054cc:	fbb7 f7f3 	udiv	r7, r7, r3
 80054d0:	fb03 f907 	mul.w	r9, r3, r7
 80054d4:	ea6f 0909 	mvn.w	r9, r9
 80054d8:	4628      	mov	r0, r5
 80054da:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 80054de:	2e09      	cmp	r6, #9
 80054e0:	d818      	bhi.n	8005514 <_strtoul_l.isra.0+0x98>
 80054e2:	4634      	mov	r4, r6
 80054e4:	42a3      	cmp	r3, r4
 80054e6:	dd24      	ble.n	8005532 <_strtoul_l.isra.0+0xb6>
 80054e8:	2d00      	cmp	r5, #0
 80054ea:	db1f      	blt.n	800552c <_strtoul_l.isra.0+0xb0>
 80054ec:	4287      	cmp	r7, r0
 80054ee:	d31d      	bcc.n	800552c <_strtoul_l.isra.0+0xb0>
 80054f0:	d101      	bne.n	80054f6 <_strtoul_l.isra.0+0x7a>
 80054f2:	45a1      	cmp	r9, r4
 80054f4:	db1a      	blt.n	800552c <_strtoul_l.isra.0+0xb0>
 80054f6:	fb00 4003 	mla	r0, r0, r3, r4
 80054fa:	2501      	movs	r5, #1
 80054fc:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8005500:	e7eb      	b.n	80054da <_strtoul_l.isra.0+0x5e>
 8005502:	2c2b      	cmp	r4, #43	; 0x2b
 8005504:	bf08      	it	eq
 8005506:	f89c 4000 	ldrbeq.w	r4, [ip]
 800550a:	46a8      	mov	r8, r5
 800550c:	bf08      	it	eq
 800550e:	f100 0c02 	addeq.w	ip, r0, #2
 8005512:	e7c7      	b.n	80054a4 <_strtoul_l.isra.0+0x28>
 8005514:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8005518:	2e19      	cmp	r6, #25
 800551a:	d801      	bhi.n	8005520 <_strtoul_l.isra.0+0xa4>
 800551c:	3c37      	subs	r4, #55	; 0x37
 800551e:	e7e1      	b.n	80054e4 <_strtoul_l.isra.0+0x68>
 8005520:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8005524:	2e19      	cmp	r6, #25
 8005526:	d804      	bhi.n	8005532 <_strtoul_l.isra.0+0xb6>
 8005528:	3c57      	subs	r4, #87	; 0x57
 800552a:	e7db      	b.n	80054e4 <_strtoul_l.isra.0+0x68>
 800552c:	f04f 35ff 	mov.w	r5, #4294967295
 8005530:	e7e4      	b.n	80054fc <_strtoul_l.isra.0+0x80>
 8005532:	2d00      	cmp	r5, #0
 8005534:	da07      	bge.n	8005546 <_strtoul_l.isra.0+0xca>
 8005536:	2322      	movs	r3, #34	; 0x22
 8005538:	f8ce 3000 	str.w	r3, [lr]
 800553c:	f04f 30ff 	mov.w	r0, #4294967295
 8005540:	b942      	cbnz	r2, 8005554 <_strtoul_l.isra.0+0xd8>
 8005542:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005546:	f1b8 0f00 	cmp.w	r8, #0
 800554a:	d000      	beq.n	800554e <_strtoul_l.isra.0+0xd2>
 800554c:	4240      	negs	r0, r0
 800554e:	2a00      	cmp	r2, #0
 8005550:	d0f7      	beq.n	8005542 <_strtoul_l.isra.0+0xc6>
 8005552:	b10d      	cbz	r5, 8005558 <_strtoul_l.isra.0+0xdc>
 8005554:	f10c 31ff 	add.w	r1, ip, #4294967295
 8005558:	6011      	str	r1, [r2, #0]
 800555a:	e7f2      	b.n	8005542 <_strtoul_l.isra.0+0xc6>
 800555c:	2430      	movs	r4, #48	; 0x30
 800555e:	2b00      	cmp	r3, #0
 8005560:	d1b1      	bne.n	80054c6 <_strtoul_l.isra.0+0x4a>
 8005562:	2308      	movs	r3, #8
 8005564:	e7af      	b.n	80054c6 <_strtoul_l.isra.0+0x4a>
 8005566:	2c30      	cmp	r4, #48	; 0x30
 8005568:	d0a2      	beq.n	80054b0 <_strtoul_l.isra.0+0x34>
 800556a:	230a      	movs	r3, #10
 800556c:	e7ab      	b.n	80054c6 <_strtoul_l.isra.0+0x4a>
 800556e:	bf00      	nop
 8005570:	08005ba7 	.word	0x08005ba7

08005574 <_strtoul_r>:
 8005574:	f7ff bf82 	b.w	800547c <_strtoul_l.isra.0>

08005578 <__submore>:
 8005578:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800557c:	460c      	mov	r4, r1
 800557e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8005580:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005584:	4299      	cmp	r1, r3
 8005586:	d11d      	bne.n	80055c4 <__submore+0x4c>
 8005588:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800558c:	f000 f8a8 	bl	80056e0 <_malloc_r>
 8005590:	b918      	cbnz	r0, 800559a <__submore+0x22>
 8005592:	f04f 30ff 	mov.w	r0, #4294967295
 8005596:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800559a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800559e:	63a3      	str	r3, [r4, #56]	; 0x38
 80055a0:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80055a4:	6360      	str	r0, [r4, #52]	; 0x34
 80055a6:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80055aa:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80055ae:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80055b2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80055b6:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80055ba:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80055be:	6020      	str	r0, [r4, #0]
 80055c0:	2000      	movs	r0, #0
 80055c2:	e7e8      	b.n	8005596 <__submore+0x1e>
 80055c4:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80055c6:	0077      	lsls	r7, r6, #1
 80055c8:	463a      	mov	r2, r7
 80055ca:	f000 f8e3 	bl	8005794 <_realloc_r>
 80055ce:	4605      	mov	r5, r0
 80055d0:	2800      	cmp	r0, #0
 80055d2:	d0de      	beq.n	8005592 <__submore+0x1a>
 80055d4:	eb00 0806 	add.w	r8, r0, r6
 80055d8:	4601      	mov	r1, r0
 80055da:	4632      	mov	r2, r6
 80055dc:	4640      	mov	r0, r8
 80055de:	f000 f807 	bl	80055f0 <memcpy>
 80055e2:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80055e6:	f8c4 8000 	str.w	r8, [r4]
 80055ea:	e7e9      	b.n	80055c0 <__submore+0x48>

080055ec <__retarget_lock_acquire_recursive>:
 80055ec:	4770      	bx	lr

080055ee <__retarget_lock_release_recursive>:
 80055ee:	4770      	bx	lr

080055f0 <memcpy>:
 80055f0:	440a      	add	r2, r1
 80055f2:	4291      	cmp	r1, r2
 80055f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80055f8:	d100      	bne.n	80055fc <memcpy+0xc>
 80055fa:	4770      	bx	lr
 80055fc:	b510      	push	{r4, lr}
 80055fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005602:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005606:	4291      	cmp	r1, r2
 8005608:	d1f9      	bne.n	80055fe <memcpy+0xe>
 800560a:	bd10      	pop	{r4, pc}

0800560c <memmove>:
 800560c:	4288      	cmp	r0, r1
 800560e:	b510      	push	{r4, lr}
 8005610:	eb01 0402 	add.w	r4, r1, r2
 8005614:	d902      	bls.n	800561c <memmove+0x10>
 8005616:	4284      	cmp	r4, r0
 8005618:	4623      	mov	r3, r4
 800561a:	d807      	bhi.n	800562c <memmove+0x20>
 800561c:	1e43      	subs	r3, r0, #1
 800561e:	42a1      	cmp	r1, r4
 8005620:	d008      	beq.n	8005634 <memmove+0x28>
 8005622:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005626:	f803 2f01 	strb.w	r2, [r3, #1]!
 800562a:	e7f8      	b.n	800561e <memmove+0x12>
 800562c:	4402      	add	r2, r0
 800562e:	4601      	mov	r1, r0
 8005630:	428a      	cmp	r2, r1
 8005632:	d100      	bne.n	8005636 <memmove+0x2a>
 8005634:	bd10      	pop	{r4, pc}
 8005636:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800563a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800563e:	e7f7      	b.n	8005630 <memmove+0x24>

08005640 <_free_r>:
 8005640:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005642:	2900      	cmp	r1, #0
 8005644:	d048      	beq.n	80056d8 <_free_r+0x98>
 8005646:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800564a:	9001      	str	r0, [sp, #4]
 800564c:	2b00      	cmp	r3, #0
 800564e:	f1a1 0404 	sub.w	r4, r1, #4
 8005652:	bfb8      	it	lt
 8005654:	18e4      	addlt	r4, r4, r3
 8005656:	f000 f8d3 	bl	8005800 <__malloc_lock>
 800565a:	4a20      	ldr	r2, [pc, #128]	; (80056dc <_free_r+0x9c>)
 800565c:	9801      	ldr	r0, [sp, #4]
 800565e:	6813      	ldr	r3, [r2, #0]
 8005660:	4615      	mov	r5, r2
 8005662:	b933      	cbnz	r3, 8005672 <_free_r+0x32>
 8005664:	6063      	str	r3, [r4, #4]
 8005666:	6014      	str	r4, [r2, #0]
 8005668:	b003      	add	sp, #12
 800566a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800566e:	f000 b8cd 	b.w	800580c <__malloc_unlock>
 8005672:	42a3      	cmp	r3, r4
 8005674:	d90b      	bls.n	800568e <_free_r+0x4e>
 8005676:	6821      	ldr	r1, [r4, #0]
 8005678:	1862      	adds	r2, r4, r1
 800567a:	4293      	cmp	r3, r2
 800567c:	bf04      	itt	eq
 800567e:	681a      	ldreq	r2, [r3, #0]
 8005680:	685b      	ldreq	r3, [r3, #4]
 8005682:	6063      	str	r3, [r4, #4]
 8005684:	bf04      	itt	eq
 8005686:	1852      	addeq	r2, r2, r1
 8005688:	6022      	streq	r2, [r4, #0]
 800568a:	602c      	str	r4, [r5, #0]
 800568c:	e7ec      	b.n	8005668 <_free_r+0x28>
 800568e:	461a      	mov	r2, r3
 8005690:	685b      	ldr	r3, [r3, #4]
 8005692:	b10b      	cbz	r3, 8005698 <_free_r+0x58>
 8005694:	42a3      	cmp	r3, r4
 8005696:	d9fa      	bls.n	800568e <_free_r+0x4e>
 8005698:	6811      	ldr	r1, [r2, #0]
 800569a:	1855      	adds	r5, r2, r1
 800569c:	42a5      	cmp	r5, r4
 800569e:	d10b      	bne.n	80056b8 <_free_r+0x78>
 80056a0:	6824      	ldr	r4, [r4, #0]
 80056a2:	4421      	add	r1, r4
 80056a4:	1854      	adds	r4, r2, r1
 80056a6:	42a3      	cmp	r3, r4
 80056a8:	6011      	str	r1, [r2, #0]
 80056aa:	d1dd      	bne.n	8005668 <_free_r+0x28>
 80056ac:	681c      	ldr	r4, [r3, #0]
 80056ae:	685b      	ldr	r3, [r3, #4]
 80056b0:	6053      	str	r3, [r2, #4]
 80056b2:	4421      	add	r1, r4
 80056b4:	6011      	str	r1, [r2, #0]
 80056b6:	e7d7      	b.n	8005668 <_free_r+0x28>
 80056b8:	d902      	bls.n	80056c0 <_free_r+0x80>
 80056ba:	230c      	movs	r3, #12
 80056bc:	6003      	str	r3, [r0, #0]
 80056be:	e7d3      	b.n	8005668 <_free_r+0x28>
 80056c0:	6825      	ldr	r5, [r4, #0]
 80056c2:	1961      	adds	r1, r4, r5
 80056c4:	428b      	cmp	r3, r1
 80056c6:	bf04      	itt	eq
 80056c8:	6819      	ldreq	r1, [r3, #0]
 80056ca:	685b      	ldreq	r3, [r3, #4]
 80056cc:	6063      	str	r3, [r4, #4]
 80056ce:	bf04      	itt	eq
 80056d0:	1949      	addeq	r1, r1, r5
 80056d2:	6021      	streq	r1, [r4, #0]
 80056d4:	6054      	str	r4, [r2, #4]
 80056d6:	e7c7      	b.n	8005668 <_free_r+0x28>
 80056d8:	b003      	add	sp, #12
 80056da:	bd30      	pop	{r4, r5, pc}
 80056dc:	20000090 	.word	0x20000090

080056e0 <_malloc_r>:
 80056e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056e2:	1ccd      	adds	r5, r1, #3
 80056e4:	f025 0503 	bic.w	r5, r5, #3
 80056e8:	3508      	adds	r5, #8
 80056ea:	2d0c      	cmp	r5, #12
 80056ec:	bf38      	it	cc
 80056ee:	250c      	movcc	r5, #12
 80056f0:	2d00      	cmp	r5, #0
 80056f2:	4606      	mov	r6, r0
 80056f4:	db01      	blt.n	80056fa <_malloc_r+0x1a>
 80056f6:	42a9      	cmp	r1, r5
 80056f8:	d903      	bls.n	8005702 <_malloc_r+0x22>
 80056fa:	230c      	movs	r3, #12
 80056fc:	6033      	str	r3, [r6, #0]
 80056fe:	2000      	movs	r0, #0
 8005700:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005702:	f000 f87d 	bl	8005800 <__malloc_lock>
 8005706:	4921      	ldr	r1, [pc, #132]	; (800578c <_malloc_r+0xac>)
 8005708:	680a      	ldr	r2, [r1, #0]
 800570a:	4614      	mov	r4, r2
 800570c:	b99c      	cbnz	r4, 8005736 <_malloc_r+0x56>
 800570e:	4f20      	ldr	r7, [pc, #128]	; (8005790 <_malloc_r+0xb0>)
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	b923      	cbnz	r3, 800571e <_malloc_r+0x3e>
 8005714:	4621      	mov	r1, r4
 8005716:	4630      	mov	r0, r6
 8005718:	f000 f862 	bl	80057e0 <_sbrk_r>
 800571c:	6038      	str	r0, [r7, #0]
 800571e:	4629      	mov	r1, r5
 8005720:	4630      	mov	r0, r6
 8005722:	f000 f85d 	bl	80057e0 <_sbrk_r>
 8005726:	1c43      	adds	r3, r0, #1
 8005728:	d123      	bne.n	8005772 <_malloc_r+0x92>
 800572a:	230c      	movs	r3, #12
 800572c:	6033      	str	r3, [r6, #0]
 800572e:	4630      	mov	r0, r6
 8005730:	f000 f86c 	bl	800580c <__malloc_unlock>
 8005734:	e7e3      	b.n	80056fe <_malloc_r+0x1e>
 8005736:	6823      	ldr	r3, [r4, #0]
 8005738:	1b5b      	subs	r3, r3, r5
 800573a:	d417      	bmi.n	800576c <_malloc_r+0x8c>
 800573c:	2b0b      	cmp	r3, #11
 800573e:	d903      	bls.n	8005748 <_malloc_r+0x68>
 8005740:	6023      	str	r3, [r4, #0]
 8005742:	441c      	add	r4, r3
 8005744:	6025      	str	r5, [r4, #0]
 8005746:	e004      	b.n	8005752 <_malloc_r+0x72>
 8005748:	6863      	ldr	r3, [r4, #4]
 800574a:	42a2      	cmp	r2, r4
 800574c:	bf0c      	ite	eq
 800574e:	600b      	streq	r3, [r1, #0]
 8005750:	6053      	strne	r3, [r2, #4]
 8005752:	4630      	mov	r0, r6
 8005754:	f000 f85a 	bl	800580c <__malloc_unlock>
 8005758:	f104 000b 	add.w	r0, r4, #11
 800575c:	1d23      	adds	r3, r4, #4
 800575e:	f020 0007 	bic.w	r0, r0, #7
 8005762:	1ac2      	subs	r2, r0, r3
 8005764:	d0cc      	beq.n	8005700 <_malloc_r+0x20>
 8005766:	1a1b      	subs	r3, r3, r0
 8005768:	50a3      	str	r3, [r4, r2]
 800576a:	e7c9      	b.n	8005700 <_malloc_r+0x20>
 800576c:	4622      	mov	r2, r4
 800576e:	6864      	ldr	r4, [r4, #4]
 8005770:	e7cc      	b.n	800570c <_malloc_r+0x2c>
 8005772:	1cc4      	adds	r4, r0, #3
 8005774:	f024 0403 	bic.w	r4, r4, #3
 8005778:	42a0      	cmp	r0, r4
 800577a:	d0e3      	beq.n	8005744 <_malloc_r+0x64>
 800577c:	1a21      	subs	r1, r4, r0
 800577e:	4630      	mov	r0, r6
 8005780:	f000 f82e 	bl	80057e0 <_sbrk_r>
 8005784:	3001      	adds	r0, #1
 8005786:	d1dd      	bne.n	8005744 <_malloc_r+0x64>
 8005788:	e7cf      	b.n	800572a <_malloc_r+0x4a>
 800578a:	bf00      	nop
 800578c:	20000090 	.word	0x20000090
 8005790:	20000094 	.word	0x20000094

08005794 <_realloc_r>:
 8005794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005796:	4607      	mov	r7, r0
 8005798:	4614      	mov	r4, r2
 800579a:	460e      	mov	r6, r1
 800579c:	b921      	cbnz	r1, 80057a8 <_realloc_r+0x14>
 800579e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80057a2:	4611      	mov	r1, r2
 80057a4:	f7ff bf9c 	b.w	80056e0 <_malloc_r>
 80057a8:	b922      	cbnz	r2, 80057b4 <_realloc_r+0x20>
 80057aa:	f7ff ff49 	bl	8005640 <_free_r>
 80057ae:	4625      	mov	r5, r4
 80057b0:	4628      	mov	r0, r5
 80057b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80057b4:	f000 f830 	bl	8005818 <_malloc_usable_size_r>
 80057b8:	42a0      	cmp	r0, r4
 80057ba:	d20f      	bcs.n	80057dc <_realloc_r+0x48>
 80057bc:	4621      	mov	r1, r4
 80057be:	4638      	mov	r0, r7
 80057c0:	f7ff ff8e 	bl	80056e0 <_malloc_r>
 80057c4:	4605      	mov	r5, r0
 80057c6:	2800      	cmp	r0, #0
 80057c8:	d0f2      	beq.n	80057b0 <_realloc_r+0x1c>
 80057ca:	4631      	mov	r1, r6
 80057cc:	4622      	mov	r2, r4
 80057ce:	f7ff ff0f 	bl	80055f0 <memcpy>
 80057d2:	4631      	mov	r1, r6
 80057d4:	4638      	mov	r0, r7
 80057d6:	f7ff ff33 	bl	8005640 <_free_r>
 80057da:	e7e9      	b.n	80057b0 <_realloc_r+0x1c>
 80057dc:	4635      	mov	r5, r6
 80057de:	e7e7      	b.n	80057b0 <_realloc_r+0x1c>

080057e0 <_sbrk_r>:
 80057e0:	b538      	push	{r3, r4, r5, lr}
 80057e2:	4d06      	ldr	r5, [pc, #24]	; (80057fc <_sbrk_r+0x1c>)
 80057e4:	2300      	movs	r3, #0
 80057e6:	4604      	mov	r4, r0
 80057e8:	4608      	mov	r0, r1
 80057ea:	602b      	str	r3, [r5, #0]
 80057ec:	f7fb fc4a 	bl	8001084 <_sbrk>
 80057f0:	1c43      	adds	r3, r0, #1
 80057f2:	d102      	bne.n	80057fa <_sbrk_r+0x1a>
 80057f4:	682b      	ldr	r3, [r5, #0]
 80057f6:	b103      	cbz	r3, 80057fa <_sbrk_r+0x1a>
 80057f8:	6023      	str	r3, [r4, #0]
 80057fa:	bd38      	pop	{r3, r4, r5, pc}
 80057fc:	20010230 	.word	0x20010230

08005800 <__malloc_lock>:
 8005800:	4801      	ldr	r0, [pc, #4]	; (8005808 <__malloc_lock+0x8>)
 8005802:	f7ff bef3 	b.w	80055ec <__retarget_lock_acquire_recursive>
 8005806:	bf00      	nop
 8005808:	20010238 	.word	0x20010238

0800580c <__malloc_unlock>:
 800580c:	4801      	ldr	r0, [pc, #4]	; (8005814 <__malloc_unlock+0x8>)
 800580e:	f7ff beee 	b.w	80055ee <__retarget_lock_release_recursive>
 8005812:	bf00      	nop
 8005814:	20010238 	.word	0x20010238

08005818 <_malloc_usable_size_r>:
 8005818:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800581c:	1f18      	subs	r0, r3, #4
 800581e:	2b00      	cmp	r3, #0
 8005820:	bfbc      	itt	lt
 8005822:	580b      	ldrlt	r3, [r1, r0]
 8005824:	18c0      	addlt	r0, r0, r3
 8005826:	4770      	bx	lr

08005828 <_init>:
 8005828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800582a:	bf00      	nop
 800582c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800582e:	bc08      	pop	{r3}
 8005830:	469e      	mov	lr, r3
 8005832:	4770      	bx	lr

08005834 <_fini>:
 8005834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005836:	bf00      	nop
 8005838:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800583a:	bc08      	pop	{r3}
 800583c:	469e      	mov	lr, r3
 800583e:	4770      	bx	lr
