
CP1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000048c0  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002ac  08004ac0  08004ac0  00014ac0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d6c  08004d6c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004d6c  08004d6c  00014d6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004d74  08004d74  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d74  08004d74  00014d74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004d78  08004d78  00014d78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004d7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001cc  20000070  08004dec  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000023c  08004dec  0002023c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d9a1  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e49  00000000  00000000  0002da3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000858  00000000  00000000  0002f888  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000790  00000000  00000000  000300e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027477  00000000  00000000  00030870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000be4a  00000000  00000000  00057ce7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f19f6  00000000  00000000  00063b31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00155527  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002734  00000000  00000000  0015557c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000070 	.word	0x20000070
 800021c:	00000000 	.word	0x00000000
 8000220:	08004aa8 	.word	0x08004aa8

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000074 	.word	0x20000074
 800023c:	08004aa8 	.word	0x08004aa8

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96e 	b.w	80005e4 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468c      	mov	ip, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	f040 8083 	bne.w	8000436 <__udivmoddi4+0x116>
 8000330:	428a      	cmp	r2, r1
 8000332:	4617      	mov	r7, r2
 8000334:	d947      	bls.n	80003c6 <__udivmoddi4+0xa6>
 8000336:	fab2 f282 	clz	r2, r2
 800033a:	b142      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033c:	f1c2 0020 	rsb	r0, r2, #32
 8000340:	fa24 f000 	lsr.w	r0, r4, r0
 8000344:	4091      	lsls	r1, r2
 8000346:	4097      	lsls	r7, r2
 8000348:	ea40 0c01 	orr.w	ip, r0, r1
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbbc f6f8 	udiv	r6, ip, r8
 8000358:	fa1f fe87 	uxth.w	lr, r7
 800035c:	fb08 c116 	mls	r1, r8, r6, ip
 8000360:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000364:	fb06 f10e 	mul.w	r1, r6, lr
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18fb      	adds	r3, r7, r3
 800036e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000372:	f080 8119 	bcs.w	80005a8 <__udivmoddi4+0x288>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8116 	bls.w	80005a8 <__udivmoddi4+0x288>
 800037c:	3e02      	subs	r6, #2
 800037e:	443b      	add	r3, r7
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0f8 	udiv	r0, r3, r8
 8000388:	fb08 3310 	mls	r3, r8, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fe0e 	mul.w	lr, r0, lr
 8000394:	45a6      	cmp	lr, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8105 	bcs.w	80005ac <__udivmoddi4+0x28c>
 80003a2:	45a6      	cmp	lr, r4
 80003a4:	f240 8102 	bls.w	80005ac <__udivmoddi4+0x28c>
 80003a8:	3802      	subs	r0, #2
 80003aa:	443c      	add	r4, r7
 80003ac:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b0:	eba4 040e 	sub.w	r4, r4, lr
 80003b4:	2600      	movs	r6, #0
 80003b6:	b11d      	cbz	r5, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c5 4300 	strd	r4, r3, [r5]
 80003c0:	4631      	mov	r1, r6
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	b902      	cbnz	r2, 80003ca <__udivmoddi4+0xaa>
 80003c8:	deff      	udf	#255	; 0xff
 80003ca:	fab2 f282 	clz	r2, r2
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	d150      	bne.n	8000474 <__udivmoddi4+0x154>
 80003d2:	1bcb      	subs	r3, r1, r7
 80003d4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d8:	fa1f f887 	uxth.w	r8, r7
 80003dc:	2601      	movs	r6, #1
 80003de:	fbb3 fcfe 	udiv	ip, r3, lr
 80003e2:	0c21      	lsrs	r1, r4, #16
 80003e4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ec:	fb08 f30c 	mul.w	r3, r8, ip
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0xe4>
 80003f4:	1879      	adds	r1, r7, r1
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0xe2>
 80003fc:	428b      	cmp	r3, r1
 80003fe:	f200 80e9 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 8000402:	4684      	mov	ip, r0
 8000404:	1ac9      	subs	r1, r1, r3
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000410:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x10c>
 800041c:	193c      	adds	r4, r7, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x10a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80d9 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e7bf      	b.n	80003b6 <__udivmoddi4+0x96>
 8000436:	428b      	cmp	r3, r1
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x12e>
 800043a:	2d00      	cmp	r5, #0
 800043c:	f000 80b1 	beq.w	80005a2 <__udivmoddi4+0x282>
 8000440:	2600      	movs	r6, #0
 8000442:	e9c5 0100 	strd	r0, r1, [r5]
 8000446:	4630      	mov	r0, r6
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	fab3 f683 	clz	r6, r3
 8000452:	2e00      	cmp	r6, #0
 8000454:	d14a      	bne.n	80004ec <__udivmoddi4+0x1cc>
 8000456:	428b      	cmp	r3, r1
 8000458:	d302      	bcc.n	8000460 <__udivmoddi4+0x140>
 800045a:	4282      	cmp	r2, r0
 800045c:	f200 80b8 	bhi.w	80005d0 <__udivmoddi4+0x2b0>
 8000460:	1a84      	subs	r4, r0, r2
 8000462:	eb61 0103 	sbc.w	r1, r1, r3
 8000466:	2001      	movs	r0, #1
 8000468:	468c      	mov	ip, r1
 800046a:	2d00      	cmp	r5, #0
 800046c:	d0a8      	beq.n	80003c0 <__udivmoddi4+0xa0>
 800046e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000472:	e7a5      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000474:	f1c2 0320 	rsb	r3, r2, #32
 8000478:	fa20 f603 	lsr.w	r6, r0, r3
 800047c:	4097      	lsls	r7, r2
 800047e:	fa01 f002 	lsl.w	r0, r1, r2
 8000482:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000486:	40d9      	lsrs	r1, r3
 8000488:	4330      	orrs	r0, r6
 800048a:	0c03      	lsrs	r3, r0, #16
 800048c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000490:	fa1f f887 	uxth.w	r8, r7
 8000494:	fb0e 1116 	mls	r1, lr, r6, r1
 8000498:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800049c:	fb06 f108 	mul.w	r1, r6, r8
 80004a0:	4299      	cmp	r1, r3
 80004a2:	fa04 f402 	lsl.w	r4, r4, r2
 80004a6:	d909      	bls.n	80004bc <__udivmoddi4+0x19c>
 80004a8:	18fb      	adds	r3, r7, r3
 80004aa:	f106 3cff 	add.w	ip, r6, #4294967295
 80004ae:	f080 808d 	bcs.w	80005cc <__udivmoddi4+0x2ac>
 80004b2:	4299      	cmp	r1, r3
 80004b4:	f240 808a 	bls.w	80005cc <__udivmoddi4+0x2ac>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	443b      	add	r3, r7
 80004bc:	1a5b      	subs	r3, r3, r1
 80004be:	b281      	uxth	r1, r0
 80004c0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004cc:	fb00 f308 	mul.w	r3, r0, r8
 80004d0:	428b      	cmp	r3, r1
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x1c4>
 80004d4:	1879      	adds	r1, r7, r1
 80004d6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004da:	d273      	bcs.n	80005c4 <__udivmoddi4+0x2a4>
 80004dc:	428b      	cmp	r3, r1
 80004de:	d971      	bls.n	80005c4 <__udivmoddi4+0x2a4>
 80004e0:	3802      	subs	r0, #2
 80004e2:	4439      	add	r1, r7
 80004e4:	1acb      	subs	r3, r1, r3
 80004e6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ea:	e778      	b.n	80003de <__udivmoddi4+0xbe>
 80004ec:	f1c6 0c20 	rsb	ip, r6, #32
 80004f0:	fa03 f406 	lsl.w	r4, r3, r6
 80004f4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004f8:	431c      	orrs	r4, r3
 80004fa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004fe:	fa01 f306 	lsl.w	r3, r1, r6
 8000502:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000506:	fa21 f10c 	lsr.w	r1, r1, ip
 800050a:	431f      	orrs	r7, r3
 800050c:	0c3b      	lsrs	r3, r7, #16
 800050e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000512:	fa1f f884 	uxth.w	r8, r4
 8000516:	fb0e 1119 	mls	r1, lr, r9, r1
 800051a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800051e:	fb09 fa08 	mul.w	sl, r9, r8
 8000522:	458a      	cmp	sl, r1
 8000524:	fa02 f206 	lsl.w	r2, r2, r6
 8000528:	fa00 f306 	lsl.w	r3, r0, r6
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x220>
 800052e:	1861      	adds	r1, r4, r1
 8000530:	f109 30ff 	add.w	r0, r9, #4294967295
 8000534:	d248      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 8000536:	458a      	cmp	sl, r1
 8000538:	d946      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800053a:	f1a9 0902 	sub.w	r9, r9, #2
 800053e:	4421      	add	r1, r4
 8000540:	eba1 010a 	sub.w	r1, r1, sl
 8000544:	b2bf      	uxth	r7, r7
 8000546:	fbb1 f0fe 	udiv	r0, r1, lr
 800054a:	fb0e 1110 	mls	r1, lr, r0, r1
 800054e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000552:	fb00 f808 	mul.w	r8, r0, r8
 8000556:	45b8      	cmp	r8, r7
 8000558:	d907      	bls.n	800056a <__udivmoddi4+0x24a>
 800055a:	19e7      	adds	r7, r4, r7
 800055c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000560:	d22e      	bcs.n	80005c0 <__udivmoddi4+0x2a0>
 8000562:	45b8      	cmp	r8, r7
 8000564:	d92c      	bls.n	80005c0 <__udivmoddi4+0x2a0>
 8000566:	3802      	subs	r0, #2
 8000568:	4427      	add	r7, r4
 800056a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800056e:	eba7 0708 	sub.w	r7, r7, r8
 8000572:	fba0 8902 	umull	r8, r9, r0, r2
 8000576:	454f      	cmp	r7, r9
 8000578:	46c6      	mov	lr, r8
 800057a:	4649      	mov	r1, r9
 800057c:	d31a      	bcc.n	80005b4 <__udivmoddi4+0x294>
 800057e:	d017      	beq.n	80005b0 <__udivmoddi4+0x290>
 8000580:	b15d      	cbz	r5, 800059a <__udivmoddi4+0x27a>
 8000582:	ebb3 020e 	subs.w	r2, r3, lr
 8000586:	eb67 0701 	sbc.w	r7, r7, r1
 800058a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800058e:	40f2      	lsrs	r2, r6
 8000590:	ea4c 0202 	orr.w	r2, ip, r2
 8000594:	40f7      	lsrs	r7, r6
 8000596:	e9c5 2700 	strd	r2, r7, [r5]
 800059a:	2600      	movs	r6, #0
 800059c:	4631      	mov	r1, r6
 800059e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e70b      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0x60>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6fd      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b0:	4543      	cmp	r3, r8
 80005b2:	d2e5      	bcs.n	8000580 <__udivmoddi4+0x260>
 80005b4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005b8:	eb69 0104 	sbc.w	r1, r9, r4
 80005bc:	3801      	subs	r0, #1
 80005be:	e7df      	b.n	8000580 <__udivmoddi4+0x260>
 80005c0:	4608      	mov	r0, r1
 80005c2:	e7d2      	b.n	800056a <__udivmoddi4+0x24a>
 80005c4:	4660      	mov	r0, ip
 80005c6:	e78d      	b.n	80004e4 <__udivmoddi4+0x1c4>
 80005c8:	4681      	mov	r9, r0
 80005ca:	e7b9      	b.n	8000540 <__udivmoddi4+0x220>
 80005cc:	4666      	mov	r6, ip
 80005ce:	e775      	b.n	80004bc <__udivmoddi4+0x19c>
 80005d0:	4630      	mov	r0, r6
 80005d2:	e74a      	b.n	800046a <__udivmoddi4+0x14a>
 80005d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d8:	4439      	add	r1, r7
 80005da:	e713      	b.n	8000404 <__udivmoddi4+0xe4>
 80005dc:	3802      	subs	r0, #2
 80005de:	443c      	add	r4, r7
 80005e0:	e724      	b.n	800042c <__udivmoddi4+0x10c>
 80005e2:	bf00      	nop

080005e4 <__aeabi_idiv0>:
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop

080005e8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005e8:	b480      	push	{r7}
 80005ea:	b083      	sub	sp, #12
 80005ec:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005ee:	4b0f      	ldr	r3, [pc, #60]	; (800062c <MX_GPIO_Init+0x44>)
 80005f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f2:	4a0e      	ldr	r2, [pc, #56]	; (800062c <MX_GPIO_Init+0x44>)
 80005f4:	f043 0308 	orr.w	r3, r3, #8
 80005f8:	6313      	str	r3, [r2, #48]	; 0x30
 80005fa:	4b0c      	ldr	r3, [pc, #48]	; (800062c <MX_GPIO_Init+0x44>)
 80005fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fe:	f003 0308 	and.w	r3, r3, #8
 8000602:	607b      	str	r3, [r7, #4]
 8000604:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000606:	4b09      	ldr	r3, [pc, #36]	; (800062c <MX_GPIO_Init+0x44>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060a:	4a08      	ldr	r2, [pc, #32]	; (800062c <MX_GPIO_Init+0x44>)
 800060c:	f043 0301 	orr.w	r3, r3, #1
 8000610:	6313      	str	r3, [r2, #48]	; 0x30
 8000612:	4b06      	ldr	r3, [pc, #24]	; (800062c <MX_GPIO_Init+0x44>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000616:	f003 0301 	and.w	r3, r3, #1
 800061a:	603b      	str	r3, [r7, #0]
 800061c:	683b      	ldr	r3, [r7, #0]

}
 800061e:	bf00      	nop
 8000620:	370c      	adds	r7, #12
 8000622:	46bd      	mov	sp, r7
 8000624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000628:	4770      	bx	lr
 800062a:	bf00      	nop
 800062c:	40023800 	.word	0x40023800

08000630 <memory_read>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

bool memory_read(int addr_r, int length, char* data)
{
 8000630:	b480      	push	{r7}
 8000632:	b085      	sub	sp, #20
 8000634:	af00      	add	r7, sp, #0
 8000636:	60f8      	str	r0, [r7, #12]
 8000638:	60b9      	str	r1, [r7, #8]
 800063a:	607a      	str	r2, [r7, #4]
	if(addr_r < 0 && addr_r > 0xFFFF && length < 0 && length > 0xFF)
 800063c:	68fb      	ldr	r3, [r7, #12]
 800063e:	2b00      	cmp	r3, #0
 8000640:	da0b      	bge.n	800065a <memory_read+0x2a>
 8000642:	68fb      	ldr	r3, [r7, #12]
 8000644:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000648:	db07      	blt.n	800065a <memory_read+0x2a>
 800064a:	68bb      	ldr	r3, [r7, #8]
 800064c:	2b00      	cmp	r3, #0
 800064e:	da04      	bge.n	800065a <memory_read+0x2a>
 8000650:	68bb      	ldr	r3, [r7, #8]
 8000652:	2bff      	cmp	r3, #255	; 0xff
 8000654:	dd01      	ble.n	800065a <memory_read+0x2a>
		return false;
 8000656:	2300      	movs	r3, #0
 8000658:	e008      	b.n	800066c <memory_read+0x3c>

	if((0x10000 - addr_r) < length)
 800065a:	68fb      	ldr	r3, [r7, #12]
 800065c:	f5c3 3380 	rsb	r3, r3, #65536	; 0x10000
 8000660:	68ba      	ldr	r2, [r7, #8]
 8000662:	429a      	cmp	r2, r3
 8000664:	dd01      	ble.n	800066a <memory_read+0x3a>
		return false;
 8000666:	2300      	movs	r3, #0
 8000668:	e000      	b.n	800066c <memory_read+0x3c>
	}

	bool dummy = true;
	*/

	return true;
 800066a:	2301      	movs	r3, #1
}
 800066c:	4618      	mov	r0, r3
 800066e:	3714      	adds	r7, #20
 8000670:	46bd      	mov	sp, r7
 8000672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000676:	4770      	bx	lr

08000678 <memory_write>:

bool memory_write(int addr_r, int length, int data)
{
 8000678:	b480      	push	{r7}
 800067a:	b085      	sub	sp, #20
 800067c:	af00      	add	r7, sp, #0
 800067e:	60f8      	str	r0, [r7, #12]
 8000680:	60b9      	str	r1, [r7, #8]
 8000682:	607a      	str	r2, [r7, #4]
	if(addr_r < 0 && addr_r > 0xFFFF && length < 0 && length > 0xFF && data < 0 && data > 0xFF)
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	2b00      	cmp	r3, #0
 8000688:	da11      	bge.n	80006ae <memory_write+0x36>
 800068a:	68fb      	ldr	r3, [r7, #12]
 800068c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000690:	db0d      	blt.n	80006ae <memory_write+0x36>
 8000692:	68bb      	ldr	r3, [r7, #8]
 8000694:	2b00      	cmp	r3, #0
 8000696:	da0a      	bge.n	80006ae <memory_write+0x36>
 8000698:	68bb      	ldr	r3, [r7, #8]
 800069a:	2bff      	cmp	r3, #255	; 0xff
 800069c:	dd07      	ble.n	80006ae <memory_write+0x36>
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	da04      	bge.n	80006ae <memory_write+0x36>
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	2bff      	cmp	r3, #255	; 0xff
 80006a8:	dd01      	ble.n	80006ae <memory_write+0x36>
		return false;
 80006aa:	2300      	movs	r3, #0
 80006ac:	e008      	b.n	80006c0 <memory_write+0x48>

	if((0x10000 - addr_r) < length)
 80006ae:	68fb      	ldr	r3, [r7, #12]
 80006b0:	f5c3 3380 	rsb	r3, r3, #65536	; 0x10000
 80006b4:	68ba      	ldr	r2, [r7, #8]
 80006b6:	429a      	cmp	r2, r3
 80006b8:	dd01      	ble.n	80006be <memory_write+0x46>
		return false;
 80006ba:	2300      	movs	r3, #0
 80006bc:	e000      	b.n	80006c0 <memory_write+0x48>
	}

	bool dummy = true;
	*/

	return true;
 80006be:	2301      	movs	r3, #1
}
 80006c0:	4618      	mov	r0, r3
 80006c2:	3714      	adds	r7, #20
 80006c4:	46bd      	mov	sp, r7
 80006c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ca:	4770      	bx	lr

080006cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006cc:	b5b0      	push	{r4, r5, r7, lr}
 80006ce:	b0aa      	sub	sp, #168	; 0xa8
 80006d0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006d2:	f000 fb54 	bl	8000d7e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006d6:	f000 f8bd 	bl	8000854 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006da:	f7ff ff85 	bl	80005e8 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80006de:	f000 f9cf 	bl	8000a80 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart3, UART_RX_buffer, 1);
 80006e2:	2201      	movs	r2, #1
 80006e4:	494f      	ldr	r1, [pc, #316]	; (8000824 <main+0x158>)
 80006e6:	4850      	ldr	r0, [pc, #320]	; (8000828 <main+0x15c>)
 80006e8:	f002 f8da 	bl	80028a0 <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(is_ready_read_from_UART())
 80006ec:	f000 fa64 	bl	8000bb8 <is_ready_read_from_UART>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d0fa      	beq.n	80006ec <main+0x20>
	  {
		  uint8_t message[128];
		  read_UART(message);
 80006f6:	1d3b      	adds	r3, r7, #4
 80006f8:	4618      	mov	r0, r3
 80006fa:	f000 faa3 	bl	8000c44 <read_UART>

		  if(!strncmp((char*) message, "MR", 2))
 80006fe:	1d3b      	adds	r3, r7, #4
 8000700:	2202      	movs	r2, #2
 8000702:	494a      	ldr	r1, [pc, #296]	; (800082c <main+0x160>)
 8000704:	4618      	mov	r0, r3
 8000706:	f003 fc0f 	bl	8003f28 <strncmp>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d14c      	bne.n	80007aa <main+0xde>
		  {
			  int addr, length;

			  if(sscanf((char*) message, "%*s %x %x", &addr, &length) == 2)
 8000710:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000714:	f107 0294 	add.w	r2, r7, #148	; 0x94
 8000718:	1d38      	adds	r0, r7, #4
 800071a:	4945      	ldr	r1, [pc, #276]	; (8000830 <main+0x164>)
 800071c:	f003 fbd6 	bl	8003ecc <siscanf>
 8000720:	4603      	mov	r3, r0
 8000722:	2b02      	cmp	r3, #2
 8000724:	d13d      	bne.n	80007a2 <main+0xd6>
			  {
 8000726:	466b      	mov	r3, sp
 8000728:	461d      	mov	r5, r3
				  char data[length];
 800072a:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 800072e:	1e63      	subs	r3, r4, #1
 8000730:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8000734:	4623      	mov	r3, r4
 8000736:	4618      	mov	r0, r3
 8000738:	f04f 0100 	mov.w	r1, #0
 800073c:	f04f 0200 	mov.w	r2, #0
 8000740:	f04f 0300 	mov.w	r3, #0
 8000744:	00cb      	lsls	r3, r1, #3
 8000746:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800074a:	00c2      	lsls	r2, r0, #3
 800074c:	4623      	mov	r3, r4
 800074e:	4618      	mov	r0, r3
 8000750:	f04f 0100 	mov.w	r1, #0
 8000754:	f04f 0200 	mov.w	r2, #0
 8000758:	f04f 0300 	mov.w	r3, #0
 800075c:	00cb      	lsls	r3, r1, #3
 800075e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000762:	00c2      	lsls	r2, r0, #3
 8000764:	4623      	mov	r3, r4
 8000766:	3307      	adds	r3, #7
 8000768:	08db      	lsrs	r3, r3, #3
 800076a:	00db      	lsls	r3, r3, #3
 800076c:	ebad 0d03 	sub.w	sp, sp, r3
 8000770:	ab02      	add	r3, sp, #8
 8000772:	3300      	adds	r3, #0
 8000774:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

				  if(memory_read(addr, length, data))
 8000778:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800077c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8000780:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8000784:	4618      	mov	r0, r3
 8000786:	f7ff ff53 	bl	8000630 <memory_read>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d003      	beq.n	8000798 <main+0xcc>
				  {
					  send_UART("Success.\r");
 8000790:	4828      	ldr	r0, [pc, #160]	; (8000834 <main+0x168>)
 8000792:	f000 fa3b 	bl	8000c0c <send_UART>
 8000796:	e002      	b.n	800079e <main+0xd2>
				  }
				  else
					  send_UART("Invalid Memory Read instruction argument values.\r");
 8000798:	4827      	ldr	r0, [pc, #156]	; (8000838 <main+0x16c>)
 800079a:	f000 fa37 	bl	8000c0c <send_UART>
 800079e:	46ad      	mov	sp, r5
 80007a0:	e036      	b.n	8000810 <main+0x144>
			  }
			  else
				  send_UART("Invalid Memory Read instruction syntax.\r");
 80007a2:	4826      	ldr	r0, [pc, #152]	; (800083c <main+0x170>)
 80007a4:	f000 fa32 	bl	8000c0c <send_UART>
 80007a8:	e032      	b.n	8000810 <main+0x144>
		  }
		  else if(!strncmp((char*) message, "MW", 2))
 80007aa:	1d3b      	adds	r3, r7, #4
 80007ac:	2202      	movs	r2, #2
 80007ae:	4924      	ldr	r1, [pc, #144]	; (8000840 <main+0x174>)
 80007b0:	4618      	mov	r0, r3
 80007b2:	f003 fbb9 	bl	8003f28 <strncmp>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d126      	bne.n	800080a <main+0x13e>
		  {
			  int addr, length, data;

			  if(sscanf((char*) message, "%*s %x %x %x", &addr, &length, &data) == 3)
 80007bc:	f107 0188 	add.w	r1, r7, #136	; 0x88
 80007c0:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80007c4:	1d38      	adds	r0, r7, #4
 80007c6:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80007ca:	9300      	str	r3, [sp, #0]
 80007cc:	460b      	mov	r3, r1
 80007ce:	491d      	ldr	r1, [pc, #116]	; (8000844 <main+0x178>)
 80007d0:	f003 fb7c 	bl	8003ecc <siscanf>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b03      	cmp	r3, #3
 80007d8:	d113      	bne.n	8000802 <main+0x136>
			  {
				  if(memory_write(addr, length, data))
 80007da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80007de:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 80007e2:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80007e6:	4618      	mov	r0, r3
 80007e8:	f7ff ff46 	bl	8000678 <memory_write>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d003      	beq.n	80007fa <main+0x12e>
					  send_UART("Success.\r");
 80007f2:	4810      	ldr	r0, [pc, #64]	; (8000834 <main+0x168>)
 80007f4:	f000 fa0a 	bl	8000c0c <send_UART>
 80007f8:	e00a      	b.n	8000810 <main+0x144>
				  else
					  send_UART("Invalid Memory Write instruction argument values.\r");
 80007fa:	4813      	ldr	r0, [pc, #76]	; (8000848 <main+0x17c>)
 80007fc:	f000 fa06 	bl	8000c0c <send_UART>
 8000800:	e006      	b.n	8000810 <main+0x144>
			  }
			  else
				  send_UART("Invalid Memory Write instruction syntax.\r");
 8000802:	4812      	ldr	r0, [pc, #72]	; (800084c <main+0x180>)
 8000804:	f000 fa02 	bl	8000c0c <send_UART>
 8000808:	e002      	b.n	8000810 <main+0x144>
		  }
		  else
			  send_UART("Invalid instruction.\r");
 800080a:	4811      	ldr	r0, [pc, #68]	; (8000850 <main+0x184>)
 800080c:	f000 f9fe 	bl	8000c0c <send_UART>

		  while(transmitting_to_UART());
 8000810:	bf00      	nop
 8000812:	f000 f9dd 	bl	8000bd0 <transmitting_to_UART>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d1fa      	bne.n	8000812 <main+0x146>

		  reset_UART();
 800081c:	f000 f9e4 	bl	8000be8 <reset_UART>
	  if(is_ready_read_from_UART())
 8000820:	e764      	b.n	80006ec <main+0x20>
 8000822:	bf00      	nop
 8000824:	200000a4 	.word	0x200000a4
 8000828:	200001a4 	.word	0x200001a4
 800082c:	08004ac0 	.word	0x08004ac0
 8000830:	08004ac4 	.word	0x08004ac4
 8000834:	08004ad0 	.word	0x08004ad0
 8000838:	08004adc 	.word	0x08004adc
 800083c:	08004b10 	.word	0x08004b10
 8000840:	08004b3c 	.word	0x08004b3c
 8000844:	08004b40 	.word	0x08004b40
 8000848:	08004b50 	.word	0x08004b50
 800084c:	08004b84 	.word	0x08004b84
 8000850:	08004bb0 	.word	0x08004bb0

08000854 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b094      	sub	sp, #80	; 0x50
 8000858:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800085a:	f107 031c 	add.w	r3, r7, #28
 800085e:	2234      	movs	r2, #52	; 0x34
 8000860:	2100      	movs	r1, #0
 8000862:	4618      	mov	r0, r3
 8000864:	f003 fb2a 	bl	8003ebc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000868:	f107 0308 	add.w	r3, r7, #8
 800086c:	2200      	movs	r2, #0
 800086e:	601a      	str	r2, [r3, #0]
 8000870:	605a      	str	r2, [r3, #4]
 8000872:	609a      	str	r2, [r3, #8]
 8000874:	60da      	str	r2, [r3, #12]
 8000876:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000878:	4b2c      	ldr	r3, [pc, #176]	; (800092c <SystemClock_Config+0xd8>)
 800087a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800087c:	4a2b      	ldr	r2, [pc, #172]	; (800092c <SystemClock_Config+0xd8>)
 800087e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000882:	6413      	str	r3, [r2, #64]	; 0x40
 8000884:	4b29      	ldr	r3, [pc, #164]	; (800092c <SystemClock_Config+0xd8>)
 8000886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000888:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800088c:	607b      	str	r3, [r7, #4]
 800088e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000890:	4b27      	ldr	r3, [pc, #156]	; (8000930 <SystemClock_Config+0xdc>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000898:	4a25      	ldr	r2, [pc, #148]	; (8000930 <SystemClock_Config+0xdc>)
 800089a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800089e:	6013      	str	r3, [r2, #0]
 80008a0:	4b23      	ldr	r3, [pc, #140]	; (8000930 <SystemClock_Config+0xdc>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008a8:	603b      	str	r3, [r7, #0]
 80008aa:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008ac:	2302      	movs	r3, #2
 80008ae:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008b0:	2301      	movs	r3, #1
 80008b2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008b4:	2310      	movs	r3, #16
 80008b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008b8:	2302      	movs	r3, #2
 80008ba:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008bc:	2300      	movs	r3, #0
 80008be:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80008c0:	2308      	movs	r3, #8
 80008c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 80008c4:	2360      	movs	r3, #96	; 0x60
 80008c6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008c8:	2302      	movs	r3, #2
 80008ca:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80008cc:	2304      	movs	r3, #4
 80008ce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008d0:	2302      	movs	r3, #2
 80008d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008d4:	f107 031c 	add.w	r3, r7, #28
 80008d8:	4618      	mov	r0, r3
 80008da:	f000 fe4d 	bl	8001578 <HAL_RCC_OscConfig>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80008e4:	f000 f826 	bl	8000934 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80008e8:	f000 fdf6 	bl	80014d8 <HAL_PWREx_EnableOverDrive>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80008f2:	f000 f81f 	bl	8000934 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008f6:	230f      	movs	r3, #15
 80008f8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008fa:	2302      	movs	r3, #2
 80008fc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008fe:	2300      	movs	r3, #0
 8000900:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000902:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000906:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000908:	2300      	movs	r3, #0
 800090a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800090c:	f107 0308 	add.w	r3, r7, #8
 8000910:	2103      	movs	r1, #3
 8000912:	4618      	mov	r0, r3
 8000914:	f001 f8de 	bl	8001ad4 <HAL_RCC_ClockConfig>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <SystemClock_Config+0xce>
  {
    Error_Handler();
 800091e:	f000 f809 	bl	8000934 <Error_Handler>
  }
}
 8000922:	bf00      	nop
 8000924:	3750      	adds	r7, #80	; 0x50
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	40023800 	.word	0x40023800
 8000930:	40007000 	.word	0x40007000

08000934 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000938:	b672      	cpsid	i
}
 800093a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800093c:	e7fe      	b.n	800093c <Error_Handler+0x8>
	...

08000940 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000940:	b480      	push	{r7}
 8000942:	b083      	sub	sp, #12
 8000944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000946:	4b0f      	ldr	r3, [pc, #60]	; (8000984 <HAL_MspInit+0x44>)
 8000948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800094a:	4a0e      	ldr	r2, [pc, #56]	; (8000984 <HAL_MspInit+0x44>)
 800094c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000950:	6413      	str	r3, [r2, #64]	; 0x40
 8000952:	4b0c      	ldr	r3, [pc, #48]	; (8000984 <HAL_MspInit+0x44>)
 8000954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000956:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800095a:	607b      	str	r3, [r7, #4]
 800095c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800095e:	4b09      	ldr	r3, [pc, #36]	; (8000984 <HAL_MspInit+0x44>)
 8000960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000962:	4a08      	ldr	r2, [pc, #32]	; (8000984 <HAL_MspInit+0x44>)
 8000964:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000968:	6453      	str	r3, [r2, #68]	; 0x44
 800096a:	4b06      	ldr	r3, [pc, #24]	; (8000984 <HAL_MspInit+0x44>)
 800096c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800096e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000972:	603b      	str	r3, [r7, #0]
 8000974:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000976:	bf00      	nop
 8000978:	370c      	adds	r7, #12
 800097a:	46bd      	mov	sp, r7
 800097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000980:	4770      	bx	lr
 8000982:	bf00      	nop
 8000984:	40023800 	.word	0x40023800

08000988 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800098c:	e7fe      	b.n	800098c <NMI_Handler+0x4>

0800098e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800098e:	b480      	push	{r7}
 8000990:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000992:	e7fe      	b.n	8000992 <HardFault_Handler+0x4>

08000994 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000998:	e7fe      	b.n	8000998 <MemManage_Handler+0x4>

0800099a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800099a:	b480      	push	{r7}
 800099c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800099e:	e7fe      	b.n	800099e <BusFault_Handler+0x4>

080009a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009a4:	e7fe      	b.n	80009a4 <UsageFault_Handler+0x4>

080009a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009a6:	b480      	push	{r7}
 80009a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009aa:	bf00      	nop
 80009ac:	46bd      	mov	sp, r7
 80009ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b2:	4770      	bx	lr

080009b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009b8:	bf00      	nop
 80009ba:	46bd      	mov	sp, r7
 80009bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c0:	4770      	bx	lr

080009c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009c2:	b480      	push	{r7}
 80009c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009c6:	bf00      	nop
 80009c8:	46bd      	mov	sp, r7
 80009ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ce:	4770      	bx	lr

080009d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009d4:	f000 fa10 	bl	8000df8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009d8:	bf00      	nop
 80009da:	bd80      	pop	{r7, pc}

080009dc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80009e0:	4802      	ldr	r0, [pc, #8]	; (80009ec <USART3_IRQHandler+0x10>)
 80009e2:	f001 ffab 	bl	800293c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80009e6:	bf00      	nop
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	200001a4 	.word	0x200001a4

080009f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b086      	sub	sp, #24
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009f8:	4a14      	ldr	r2, [pc, #80]	; (8000a4c <_sbrk+0x5c>)
 80009fa:	4b15      	ldr	r3, [pc, #84]	; (8000a50 <_sbrk+0x60>)
 80009fc:	1ad3      	subs	r3, r2, r3
 80009fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a00:	697b      	ldr	r3, [r7, #20]
 8000a02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a04:	4b13      	ldr	r3, [pc, #76]	; (8000a54 <_sbrk+0x64>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d102      	bne.n	8000a12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a0c:	4b11      	ldr	r3, [pc, #68]	; (8000a54 <_sbrk+0x64>)
 8000a0e:	4a12      	ldr	r2, [pc, #72]	; (8000a58 <_sbrk+0x68>)
 8000a10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a12:	4b10      	ldr	r3, [pc, #64]	; (8000a54 <_sbrk+0x64>)
 8000a14:	681a      	ldr	r2, [r3, #0]
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	4413      	add	r3, r2
 8000a1a:	693a      	ldr	r2, [r7, #16]
 8000a1c:	429a      	cmp	r2, r3
 8000a1e:	d207      	bcs.n	8000a30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a20:	f003 fa22 	bl	8003e68 <__errno>
 8000a24:	4603      	mov	r3, r0
 8000a26:	220c      	movs	r2, #12
 8000a28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a2a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a2e:	e009      	b.n	8000a44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a30:	4b08      	ldr	r3, [pc, #32]	; (8000a54 <_sbrk+0x64>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a36:	4b07      	ldr	r3, [pc, #28]	; (8000a54 <_sbrk+0x64>)
 8000a38:	681a      	ldr	r2, [r3, #0]
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	4413      	add	r3, r2
 8000a3e:	4a05      	ldr	r2, [pc, #20]	; (8000a54 <_sbrk+0x64>)
 8000a40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a42:	68fb      	ldr	r3, [r7, #12]
}
 8000a44:	4618      	mov	r0, r3
 8000a46:	3718      	adds	r7, #24
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	20080000 	.word	0x20080000
 8000a50:	00000400 	.word	0x00000400
 8000a54:	2000008c 	.word	0x2000008c
 8000a58:	20000240 	.word	0x20000240

08000a5c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a60:	4b06      	ldr	r3, [pc, #24]	; (8000a7c <SystemInit+0x20>)
 8000a62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a66:	4a05      	ldr	r2, [pc, #20]	; (8000a7c <SystemInit+0x20>)
 8000a68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a70:	bf00      	nop
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop
 8000a7c:	e000ed00 	.word	0xe000ed00

08000a80 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_Init 0 */

  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */
  UART_TX_buffer[0] = '\r';
 8000a84:	4b15      	ldr	r3, [pc, #84]	; (8000adc <MX_USART3_UART_Init+0x5c>)
 8000a86:	220d      	movs	r2, #13
 8000a88:	701a      	strb	r2, [r3, #0]
  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a8a:	4b15      	ldr	r3, [pc, #84]	; (8000ae0 <MX_USART3_UART_Init+0x60>)
 8000a8c:	4a15      	ldr	r2, [pc, #84]	; (8000ae4 <MX_USART3_UART_Init+0x64>)
 8000a8e:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a90:	4b13      	ldr	r3, [pc, #76]	; (8000ae0 <MX_USART3_UART_Init+0x60>)
 8000a92:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a96:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a98:	4b11      	ldr	r3, [pc, #68]	; (8000ae0 <MX_USART3_UART_Init+0x60>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a9e:	4b10      	ldr	r3, [pc, #64]	; (8000ae0 <MX_USART3_UART_Init+0x60>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000aa4:	4b0e      	ldr	r3, [pc, #56]	; (8000ae0 <MX_USART3_UART_Init+0x60>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000aaa:	4b0d      	ldr	r3, [pc, #52]	; (8000ae0 <MX_USART3_UART_Init+0x60>)
 8000aac:	220c      	movs	r2, #12
 8000aae:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ab0:	4b0b      	ldr	r3, [pc, #44]	; (8000ae0 <MX_USART3_UART_Init+0x60>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ab6:	4b0a      	ldr	r3, [pc, #40]	; (8000ae0 <MX_USART3_UART_Init+0x60>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000abc:	4b08      	ldr	r3, [pc, #32]	; (8000ae0 <MX_USART3_UART_Init+0x60>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ac2:	4b07      	ldr	r3, [pc, #28]	; (8000ae0 <MX_USART3_UART_Init+0x60>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ac8:	4805      	ldr	r0, [pc, #20]	; (8000ae0 <MX_USART3_UART_Init+0x60>)
 8000aca:	f001 fe2d 	bl	8002728 <HAL_UART_Init>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000ad4:	f7ff ff2e 	bl	8000934 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000ad8:	bf00      	nop
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	20000124 	.word	0x20000124
 8000ae0:	200001a4 	.word	0x200001a4
 8000ae4:	40004800 	.word	0x40004800

08000ae8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b0ae      	sub	sp, #184	; 0xb8
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000af4:	2200      	movs	r2, #0
 8000af6:	601a      	str	r2, [r3, #0]
 8000af8:	605a      	str	r2, [r3, #4]
 8000afa:	609a      	str	r2, [r3, #8]
 8000afc:	60da      	str	r2, [r3, #12]
 8000afe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b00:	f107 0314 	add.w	r3, r7, #20
 8000b04:	2290      	movs	r2, #144	; 0x90
 8000b06:	2100      	movs	r1, #0
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f003 f9d7 	bl	8003ebc <memset>
  if(uartHandle->Instance==USART3)
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	4a26      	ldr	r2, [pc, #152]	; (8000bac <HAL_UART_MspInit+0xc4>)
 8000b14:	4293      	cmp	r3, r2
 8000b16:	d144      	bne.n	8000ba2 <HAL_UART_MspInit+0xba>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000b18:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b1c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b22:	f107 0314 	add.w	r3, r7, #20
 8000b26:	4618      	mov	r0, r3
 8000b28:	f001 f9d6 	bl	8001ed8 <HAL_RCCEx_PeriphCLKConfig>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000b32:	f7ff feff 	bl	8000934 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000b36:	4b1e      	ldr	r3, [pc, #120]	; (8000bb0 <HAL_UART_MspInit+0xc8>)
 8000b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b3a:	4a1d      	ldr	r2, [pc, #116]	; (8000bb0 <HAL_UART_MspInit+0xc8>)
 8000b3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b40:	6413      	str	r3, [r2, #64]	; 0x40
 8000b42:	4b1b      	ldr	r3, [pc, #108]	; (8000bb0 <HAL_UART_MspInit+0xc8>)
 8000b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b4a:	613b      	str	r3, [r7, #16]
 8000b4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b4e:	4b18      	ldr	r3, [pc, #96]	; (8000bb0 <HAL_UART_MspInit+0xc8>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b52:	4a17      	ldr	r2, [pc, #92]	; (8000bb0 <HAL_UART_MspInit+0xc8>)
 8000b54:	f043 0308 	orr.w	r3, r3, #8
 8000b58:	6313      	str	r3, [r2, #48]	; 0x30
 8000b5a:	4b15      	ldr	r3, [pc, #84]	; (8000bb0 <HAL_UART_MspInit+0xc8>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5e:	f003 0308 	and.w	r3, r3, #8
 8000b62:	60fb      	str	r3, [r7, #12]
 8000b64:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000b66:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b6a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b6e:	2302      	movs	r3, #2
 8000b70:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b74:	2300      	movs	r3, #0
 8000b76:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b7a:	2303      	movs	r3, #3
 8000b7c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b80:	2307      	movs	r3, #7
 8000b82:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b86:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	4809      	ldr	r0, [pc, #36]	; (8000bb4 <HAL_UART_MspInit+0xcc>)
 8000b8e:	f000 faf7 	bl	8001180 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000b92:	2200      	movs	r2, #0
 8000b94:	2100      	movs	r1, #0
 8000b96:	2027      	movs	r0, #39	; 0x27
 8000b98:	f000 fa29 	bl	8000fee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000b9c:	2027      	movs	r0, #39	; 0x27
 8000b9e:	f000 fa42 	bl	8001026 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000ba2:	bf00      	nop
 8000ba4:	37b8      	adds	r7, #184	; 0xb8
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	40004800 	.word	0x40004800
 8000bb0:	40023800 	.word	0x40023800
 8000bb4:	40020c00 	.word	0x40020c00

08000bb8 <is_ready_read_from_UART>:
}

/* USER CODE BEGIN 1 */

bool is_ready_read_from_UART()
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
	return flagCPP;
 8000bbc:	4b03      	ldr	r3, [pc, #12]	; (8000bcc <is_ready_read_from_UART+0x14>)
 8000bbe:	781b      	ldrb	r3, [r3, #0]
}
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop
 8000bcc:	20000098 	.word	0x20000098

08000bd0 <transmitting_to_UART>:

bool transmitting_to_UART()
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
	return flagCPE;
 8000bd4:	4b03      	ldr	r3, [pc, #12]	; (8000be4 <transmitting_to_UART+0x14>)
 8000bd6:	781b      	ldrb	r3, [r3, #0]
}
 8000bd8:	4618      	mov	r0, r3
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop
 8000be4:	20000099 	.word	0x20000099

08000be8 <reset_UART>:

void reset_UART()
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
	// clear buffer not needed

	HAL_UART_Receive_IT(&huart3, UART_RX_buffer, 1);
 8000bec:	2201      	movs	r2, #1
 8000bee:	4904      	ldr	r1, [pc, #16]	; (8000c00 <reset_UART+0x18>)
 8000bf0:	4804      	ldr	r0, [pc, #16]	; (8000c04 <reset_UART+0x1c>)
 8000bf2:	f001 fe55 	bl	80028a0 <HAL_UART_Receive_IT>
	flagCPP = false;
 8000bf6:	4b04      	ldr	r3, [pc, #16]	; (8000c08 <reset_UART+0x20>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	701a      	strb	r2, [r3, #0]
}
 8000bfc:	bf00      	nop
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	200000a4 	.word	0x200000a4
 8000c04:	200001a4 	.word	0x200001a4
 8000c08:	20000098 	.word	0x20000098

08000c0c <send_UART>:

void send_UART(const char* msg_to_send)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
	strncpy((char*) UART_TX_buffer, msg_to_send, 128);
 8000c14:	2280      	movs	r2, #128	; 0x80
 8000c16:	6879      	ldr	r1, [r7, #4]
 8000c18:	4807      	ldr	r0, [pc, #28]	; (8000c38 <send_UART+0x2c>)
 8000c1a:	f003 f997 	bl	8003f4c <strncpy>

	flagCPE = true;
 8000c1e:	4b07      	ldr	r3, [pc, #28]	; (8000c3c <send_UART+0x30>)
 8000c20:	2201      	movs	r2, #1
 8000c22:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&huart3, UART_TX_buffer, 1);
 8000c24:	2201      	movs	r2, #1
 8000c26:	4904      	ldr	r1, [pc, #16]	; (8000c38 <send_UART+0x2c>)
 8000c28:	4805      	ldr	r0, [pc, #20]	; (8000c40 <send_UART+0x34>)
 8000c2a:	f001 fdcb 	bl	80027c4 <HAL_UART_Transmit_IT>

	return;
 8000c2e:	bf00      	nop
}
 8000c30:	3708      	adds	r7, #8
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	20000124 	.word	0x20000124
 8000c3c:	20000099 	.word	0x20000099
 8000c40:	200001a4 	.word	0x200001a4

08000c44 <read_UART>:

void read_UART(uint8_t* msg_to_read)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
	// formatar backspaces

	strncpy((char*) msg_to_read, (char*) UART_RX_buffer, 128);
 8000c4c:	2280      	movs	r2, #128	; 0x80
 8000c4e:	4904      	ldr	r1, [pc, #16]	; (8000c60 <read_UART+0x1c>)
 8000c50:	6878      	ldr	r0, [r7, #4]
 8000c52:	f003 f97b 	bl	8003f4c <strncpy>
}
 8000c56:	bf00      	nop
 8000c58:	3708      	adds	r7, #8
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	200000a4 	.word	0x200000a4

08000c64 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
	if(flagCPP)
 8000c6c:	4b11      	ldr	r3, [pc, #68]	; (8000cb4 <HAL_UART_RxCpltCallback+0x50>)
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d11b      	bne.n	8000cac <HAL_UART_RxCpltCallback+0x48>
		return;

	if(UART_RX_buffer[UART_RX_index] == '\r')
 8000c74:	4b10      	ldr	r3, [pc, #64]	; (8000cb8 <HAL_UART_RxCpltCallback+0x54>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a10      	ldr	r2, [pc, #64]	; (8000cbc <HAL_UART_RxCpltCallback+0x58>)
 8000c7a:	5cd3      	ldrb	r3, [r2, r3]
 8000c7c:	2b0d      	cmp	r3, #13
 8000c7e:	d106      	bne.n	8000c8e <HAL_UART_RxCpltCallback+0x2a>
	{
		UART_RX_index = 0;
 8000c80:	4b0d      	ldr	r3, [pc, #52]	; (8000cb8 <HAL_UART_RxCpltCallback+0x54>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	601a      	str	r2, [r3, #0]
		flagCPP = true;
 8000c86:	4b0b      	ldr	r3, [pc, #44]	; (8000cb4 <HAL_UART_RxCpltCallback+0x50>)
 8000c88:	2201      	movs	r2, #1
 8000c8a:	701a      	strb	r2, [r3, #0]
	else
	{
		HAL_UART_Receive_IT(&huart3, &UART_RX_buffer[++UART_RX_index], 1);
	}

	return;
 8000c8c:	e00f      	b.n	8000cae <HAL_UART_RxCpltCallback+0x4a>
		HAL_UART_Receive_IT(&huart3, &UART_RX_buffer[++UART_RX_index], 1);
 8000c8e:	4b0a      	ldr	r3, [pc, #40]	; (8000cb8 <HAL_UART_RxCpltCallback+0x54>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	3301      	adds	r3, #1
 8000c94:	4a08      	ldr	r2, [pc, #32]	; (8000cb8 <HAL_UART_RxCpltCallback+0x54>)
 8000c96:	6013      	str	r3, [r2, #0]
 8000c98:	4b07      	ldr	r3, [pc, #28]	; (8000cb8 <HAL_UART_RxCpltCallback+0x54>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a07      	ldr	r2, [pc, #28]	; (8000cbc <HAL_UART_RxCpltCallback+0x58>)
 8000c9e:	4413      	add	r3, r2
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	4806      	ldr	r0, [pc, #24]	; (8000cc0 <HAL_UART_RxCpltCallback+0x5c>)
 8000ca6:	f001 fdfb 	bl	80028a0 <HAL_UART_Receive_IT>
	return;
 8000caa:	e000      	b.n	8000cae <HAL_UART_RxCpltCallback+0x4a>
		return;
 8000cac:	bf00      	nop
}
 8000cae:	3708      	adds	r7, #8
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	20000098 	.word	0x20000098
 8000cb8:	20000090 	.word	0x20000090
 8000cbc:	200000a4 	.word	0x200000a4
 8000cc0:	200001a4 	.word	0x200001a4

08000cc4 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef* huart)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
	if(!flagCPE)
 8000ccc:	4b13      	ldr	r3, [pc, #76]	; (8000d1c <HAL_UART_TxCpltCallback+0x58>)
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	f083 0301 	eor.w	r3, r3, #1
 8000cd4:	b2db      	uxtb	r3, r3
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d11b      	bne.n	8000d12 <HAL_UART_TxCpltCallback+0x4e>
		return;

	if(UART_TX_buffer[UART_TX_index] == '\r')
 8000cda:	4b11      	ldr	r3, [pc, #68]	; (8000d20 <HAL_UART_TxCpltCallback+0x5c>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	4a11      	ldr	r2, [pc, #68]	; (8000d24 <HAL_UART_TxCpltCallback+0x60>)
 8000ce0:	5cd3      	ldrb	r3, [r2, r3]
 8000ce2:	2b0d      	cmp	r3, #13
 8000ce4:	d106      	bne.n	8000cf4 <HAL_UART_TxCpltCallback+0x30>
	{
		UART_TX_index = 0;
 8000ce6:	4b0e      	ldr	r3, [pc, #56]	; (8000d20 <HAL_UART_TxCpltCallback+0x5c>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	601a      	str	r2, [r3, #0]
		flagCPE = false;
 8000cec:	4b0b      	ldr	r3, [pc, #44]	; (8000d1c <HAL_UART_TxCpltCallback+0x58>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	701a      	strb	r2, [r3, #0]
	else
	{
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &UART_TX_buffer[++UART_TX_index], 1);
	}

	return;
 8000cf2:	e00f      	b.n	8000d14 <HAL_UART_TxCpltCallback+0x50>
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) &UART_TX_buffer[++UART_TX_index], 1);
 8000cf4:	4b0a      	ldr	r3, [pc, #40]	; (8000d20 <HAL_UART_TxCpltCallback+0x5c>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	3301      	adds	r3, #1
 8000cfa:	4a09      	ldr	r2, [pc, #36]	; (8000d20 <HAL_UART_TxCpltCallback+0x5c>)
 8000cfc:	6013      	str	r3, [r2, #0]
 8000cfe:	4b08      	ldr	r3, [pc, #32]	; (8000d20 <HAL_UART_TxCpltCallback+0x5c>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	4a08      	ldr	r2, [pc, #32]	; (8000d24 <HAL_UART_TxCpltCallback+0x60>)
 8000d04:	4413      	add	r3, r2
 8000d06:	2201      	movs	r2, #1
 8000d08:	4619      	mov	r1, r3
 8000d0a:	4807      	ldr	r0, [pc, #28]	; (8000d28 <HAL_UART_TxCpltCallback+0x64>)
 8000d0c:	f001 fd5a 	bl	80027c4 <HAL_UART_Transmit_IT>
	return;
 8000d10:	e000      	b.n	8000d14 <HAL_UART_TxCpltCallback+0x50>
		return;
 8000d12:	bf00      	nop
}
 8000d14:	3708      	adds	r7, #8
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	20000099 	.word	0x20000099
 8000d20:	20000094 	.word	0x20000094
 8000d24:	20000124 	.word	0x20000124
 8000d28:	200001a4 	.word	0x200001a4

08000d2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d64 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d30:	480d      	ldr	r0, [pc, #52]	; (8000d68 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d32:	490e      	ldr	r1, [pc, #56]	; (8000d6c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d34:	4a0e      	ldr	r2, [pc, #56]	; (8000d70 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d38:	e002      	b.n	8000d40 <LoopCopyDataInit>

08000d3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d3e:	3304      	adds	r3, #4

08000d40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d44:	d3f9      	bcc.n	8000d3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d46:	4a0b      	ldr	r2, [pc, #44]	; (8000d74 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d48:	4c0b      	ldr	r4, [pc, #44]	; (8000d78 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d4c:	e001      	b.n	8000d52 <LoopFillZerobss>

08000d4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d50:	3204      	adds	r2, #4

08000d52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d54:	d3fb      	bcc.n	8000d4e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d56:	f7ff fe81 	bl	8000a5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d5a:	f003 f88b 	bl	8003e74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d5e:	f7ff fcb5 	bl	80006cc <main>
  bx  lr    
 8000d62:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d64:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000d68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d6c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000d70:	08004d7c 	.word	0x08004d7c
  ldr r2, =_sbss
 8000d74:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000d78:	2000023c 	.word	0x2000023c

08000d7c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d7c:	e7fe      	b.n	8000d7c <ADC_IRQHandler>

08000d7e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d7e:	b580      	push	{r7, lr}
 8000d80:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d82:	2003      	movs	r0, #3
 8000d84:	f000 f928 	bl	8000fd8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d88:	2000      	movs	r0, #0
 8000d8a:	f000 f805 	bl	8000d98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d8e:	f7ff fdd7 	bl	8000940 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d92:	2300      	movs	r3, #0
}
 8000d94:	4618      	mov	r0, r3
 8000d96:	bd80      	pop	{r7, pc}

08000d98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000da0:	4b12      	ldr	r3, [pc, #72]	; (8000dec <HAL_InitTick+0x54>)
 8000da2:	681a      	ldr	r2, [r3, #0]
 8000da4:	4b12      	ldr	r3, [pc, #72]	; (8000df0 <HAL_InitTick+0x58>)
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	4619      	mov	r1, r3
 8000daa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dae:	fbb3 f3f1 	udiv	r3, r3, r1
 8000db2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000db6:	4618      	mov	r0, r3
 8000db8:	f000 f943 	bl	8001042 <HAL_SYSTICK_Config>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d001      	beq.n	8000dc6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	e00e      	b.n	8000de4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	2b0f      	cmp	r3, #15
 8000dca:	d80a      	bhi.n	8000de2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dcc:	2200      	movs	r2, #0
 8000dce:	6879      	ldr	r1, [r7, #4]
 8000dd0:	f04f 30ff 	mov.w	r0, #4294967295
 8000dd4:	f000 f90b 	bl	8000fee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000dd8:	4a06      	ldr	r2, [pc, #24]	; (8000df4 <HAL_InitTick+0x5c>)
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dde:	2300      	movs	r3, #0
 8000de0:	e000      	b.n	8000de4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000de2:	2301      	movs	r3, #1
}
 8000de4:	4618      	mov	r0, r3
 8000de6:	3708      	adds	r7, #8
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	20000000 	.word	0x20000000
 8000df0:	20000008 	.word	0x20000008
 8000df4:	20000004 	.word	0x20000004

08000df8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dfc:	4b06      	ldr	r3, [pc, #24]	; (8000e18 <HAL_IncTick+0x20>)
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	461a      	mov	r2, r3
 8000e02:	4b06      	ldr	r3, [pc, #24]	; (8000e1c <HAL_IncTick+0x24>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	4413      	add	r3, r2
 8000e08:	4a04      	ldr	r2, [pc, #16]	; (8000e1c <HAL_IncTick+0x24>)
 8000e0a:	6013      	str	r3, [r2, #0]
}
 8000e0c:	bf00      	nop
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	20000008 	.word	0x20000008
 8000e1c:	20000228 	.word	0x20000228

08000e20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  return uwTick;
 8000e24:	4b03      	ldr	r3, [pc, #12]	; (8000e34 <HAL_GetTick+0x14>)
 8000e26:	681b      	ldr	r3, [r3, #0]
}
 8000e28:	4618      	mov	r0, r3
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr
 8000e32:	bf00      	nop
 8000e34:	20000228 	.word	0x20000228

08000e38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b085      	sub	sp, #20
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	f003 0307 	and.w	r3, r3, #7
 8000e46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e48:	4b0b      	ldr	r3, [pc, #44]	; (8000e78 <__NVIC_SetPriorityGrouping+0x40>)
 8000e4a:	68db      	ldr	r3, [r3, #12]
 8000e4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e4e:	68ba      	ldr	r2, [r7, #8]
 8000e50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e54:	4013      	ands	r3, r2
 8000e56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e5c:	68bb      	ldr	r3, [r7, #8]
 8000e5e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000e60:	4b06      	ldr	r3, [pc, #24]	; (8000e7c <__NVIC_SetPriorityGrouping+0x44>)
 8000e62:	4313      	orrs	r3, r2
 8000e64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e66:	4a04      	ldr	r2, [pc, #16]	; (8000e78 <__NVIC_SetPriorityGrouping+0x40>)
 8000e68:	68bb      	ldr	r3, [r7, #8]
 8000e6a:	60d3      	str	r3, [r2, #12]
}
 8000e6c:	bf00      	nop
 8000e6e:	3714      	adds	r7, #20
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr
 8000e78:	e000ed00 	.word	0xe000ed00
 8000e7c:	05fa0000 	.word	0x05fa0000

08000e80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e84:	4b04      	ldr	r3, [pc, #16]	; (8000e98 <__NVIC_GetPriorityGrouping+0x18>)
 8000e86:	68db      	ldr	r3, [r3, #12]
 8000e88:	0a1b      	lsrs	r3, r3, #8
 8000e8a:	f003 0307 	and.w	r3, r3, #7
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr
 8000e98:	e000ed00 	.word	0xe000ed00

08000e9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b083      	sub	sp, #12
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ea6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	db0b      	blt.n	8000ec6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eae:	79fb      	ldrb	r3, [r7, #7]
 8000eb0:	f003 021f 	and.w	r2, r3, #31
 8000eb4:	4907      	ldr	r1, [pc, #28]	; (8000ed4 <__NVIC_EnableIRQ+0x38>)
 8000eb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eba:	095b      	lsrs	r3, r3, #5
 8000ebc:	2001      	movs	r0, #1
 8000ebe:	fa00 f202 	lsl.w	r2, r0, r2
 8000ec2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ec6:	bf00      	nop
 8000ec8:	370c      	adds	r7, #12
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	e000e100 	.word	0xe000e100

08000ed8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b083      	sub	sp, #12
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	4603      	mov	r3, r0
 8000ee0:	6039      	str	r1, [r7, #0]
 8000ee2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ee4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	db0a      	blt.n	8000f02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	b2da      	uxtb	r2, r3
 8000ef0:	490c      	ldr	r1, [pc, #48]	; (8000f24 <__NVIC_SetPriority+0x4c>)
 8000ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef6:	0112      	lsls	r2, r2, #4
 8000ef8:	b2d2      	uxtb	r2, r2
 8000efa:	440b      	add	r3, r1
 8000efc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f00:	e00a      	b.n	8000f18 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	b2da      	uxtb	r2, r3
 8000f06:	4908      	ldr	r1, [pc, #32]	; (8000f28 <__NVIC_SetPriority+0x50>)
 8000f08:	79fb      	ldrb	r3, [r7, #7]
 8000f0a:	f003 030f 	and.w	r3, r3, #15
 8000f0e:	3b04      	subs	r3, #4
 8000f10:	0112      	lsls	r2, r2, #4
 8000f12:	b2d2      	uxtb	r2, r2
 8000f14:	440b      	add	r3, r1
 8000f16:	761a      	strb	r2, [r3, #24]
}
 8000f18:	bf00      	nop
 8000f1a:	370c      	adds	r7, #12
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr
 8000f24:	e000e100 	.word	0xe000e100
 8000f28:	e000ed00 	.word	0xe000ed00

08000f2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b089      	sub	sp, #36	; 0x24
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	60f8      	str	r0, [r7, #12]
 8000f34:	60b9      	str	r1, [r7, #8]
 8000f36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	f003 0307 	and.w	r3, r3, #7
 8000f3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f40:	69fb      	ldr	r3, [r7, #28]
 8000f42:	f1c3 0307 	rsb	r3, r3, #7
 8000f46:	2b04      	cmp	r3, #4
 8000f48:	bf28      	it	cs
 8000f4a:	2304      	movcs	r3, #4
 8000f4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f4e:	69fb      	ldr	r3, [r7, #28]
 8000f50:	3304      	adds	r3, #4
 8000f52:	2b06      	cmp	r3, #6
 8000f54:	d902      	bls.n	8000f5c <NVIC_EncodePriority+0x30>
 8000f56:	69fb      	ldr	r3, [r7, #28]
 8000f58:	3b03      	subs	r3, #3
 8000f5a:	e000      	b.n	8000f5e <NVIC_EncodePriority+0x32>
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f60:	f04f 32ff 	mov.w	r2, #4294967295
 8000f64:	69bb      	ldr	r3, [r7, #24]
 8000f66:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6a:	43da      	mvns	r2, r3
 8000f6c:	68bb      	ldr	r3, [r7, #8]
 8000f6e:	401a      	ands	r2, r3
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f74:	f04f 31ff 	mov.w	r1, #4294967295
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f7e:	43d9      	mvns	r1, r3
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f84:	4313      	orrs	r3, r2
         );
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	3724      	adds	r7, #36	; 0x24
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
	...

08000f94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	3b01      	subs	r3, #1
 8000fa0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fa4:	d301      	bcc.n	8000faa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	e00f      	b.n	8000fca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000faa:	4a0a      	ldr	r2, [pc, #40]	; (8000fd4 <SysTick_Config+0x40>)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	3b01      	subs	r3, #1
 8000fb0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fb2:	210f      	movs	r1, #15
 8000fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fb8:	f7ff ff8e 	bl	8000ed8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fbc:	4b05      	ldr	r3, [pc, #20]	; (8000fd4 <SysTick_Config+0x40>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fc2:	4b04      	ldr	r3, [pc, #16]	; (8000fd4 <SysTick_Config+0x40>)
 8000fc4:	2207      	movs	r2, #7
 8000fc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fc8:	2300      	movs	r3, #0
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	3708      	adds	r7, #8
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	e000e010 	.word	0xe000e010

08000fd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fe0:	6878      	ldr	r0, [r7, #4]
 8000fe2:	f7ff ff29 	bl	8000e38 <__NVIC_SetPriorityGrouping>
}
 8000fe6:	bf00      	nop
 8000fe8:	3708      	adds	r7, #8
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}

08000fee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fee:	b580      	push	{r7, lr}
 8000ff0:	b086      	sub	sp, #24
 8000ff2:	af00      	add	r7, sp, #0
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	60b9      	str	r1, [r7, #8]
 8000ff8:	607a      	str	r2, [r7, #4]
 8000ffa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001000:	f7ff ff3e 	bl	8000e80 <__NVIC_GetPriorityGrouping>
 8001004:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001006:	687a      	ldr	r2, [r7, #4]
 8001008:	68b9      	ldr	r1, [r7, #8]
 800100a:	6978      	ldr	r0, [r7, #20]
 800100c:	f7ff ff8e 	bl	8000f2c <NVIC_EncodePriority>
 8001010:	4602      	mov	r2, r0
 8001012:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001016:	4611      	mov	r1, r2
 8001018:	4618      	mov	r0, r3
 800101a:	f7ff ff5d 	bl	8000ed8 <__NVIC_SetPriority>
}
 800101e:	bf00      	nop
 8001020:	3718      	adds	r7, #24
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}

08001026 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001026:	b580      	push	{r7, lr}
 8001028:	b082      	sub	sp, #8
 800102a:	af00      	add	r7, sp, #0
 800102c:	4603      	mov	r3, r0
 800102e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001030:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001034:	4618      	mov	r0, r3
 8001036:	f7ff ff31 	bl	8000e9c <__NVIC_EnableIRQ>
}
 800103a:	bf00      	nop
 800103c:	3708      	adds	r7, #8
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}

08001042 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001042:	b580      	push	{r7, lr}
 8001044:	b082      	sub	sp, #8
 8001046:	af00      	add	r7, sp, #0
 8001048:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800104a:	6878      	ldr	r0, [r7, #4]
 800104c:	f7ff ffa2 	bl	8000f94 <SysTick_Config>
 8001050:	4603      	mov	r3, r0
}
 8001052:	4618      	mov	r0, r3
 8001054:	3708      	adds	r7, #8
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}

0800105a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800105a:	b580      	push	{r7, lr}
 800105c:	b084      	sub	sp, #16
 800105e:	af00      	add	r7, sp, #0
 8001060:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001066:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001068:	f7ff feda 	bl	8000e20 <HAL_GetTick>
 800106c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001074:	b2db      	uxtb	r3, r3
 8001076:	2b02      	cmp	r3, #2
 8001078:	d008      	beq.n	800108c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2280      	movs	r2, #128	; 0x80
 800107e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2200      	movs	r2, #0
 8001084:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001088:	2301      	movs	r3, #1
 800108a:	e052      	b.n	8001132 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	681a      	ldr	r2, [r3, #0]
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f022 0216 	bic.w	r2, r2, #22
 800109a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	695a      	ldr	r2, [r3, #20]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80010aa:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d103      	bne.n	80010bc <HAL_DMA_Abort+0x62>
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d007      	beq.n	80010cc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	681a      	ldr	r2, [r3, #0]
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f022 0208 	bic.w	r2, r2, #8
 80010ca:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	681a      	ldr	r2, [r3, #0]
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f022 0201 	bic.w	r2, r2, #1
 80010da:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80010dc:	e013      	b.n	8001106 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80010de:	f7ff fe9f 	bl	8000e20 <HAL_GetTick>
 80010e2:	4602      	mov	r2, r0
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	1ad3      	subs	r3, r2, r3
 80010e8:	2b05      	cmp	r3, #5
 80010ea:	d90c      	bls.n	8001106 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	2220      	movs	r2, #32
 80010f0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2203      	movs	r2, #3
 80010f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	2200      	movs	r2, #0
 80010fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8001102:	2303      	movs	r3, #3
 8001104:	e015      	b.n	8001132 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f003 0301 	and.w	r3, r3, #1
 8001110:	2b00      	cmp	r3, #0
 8001112:	d1e4      	bne.n	80010de <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001118:	223f      	movs	r2, #63	; 0x3f
 800111a:	409a      	lsls	r2, r3
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2201      	movs	r2, #1
 8001124:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	2200      	movs	r2, #0
 800112c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8001130:	2300      	movs	r3, #0
}
 8001132:	4618      	mov	r0, r3
 8001134:	3710      	adds	r7, #16
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}

0800113a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800113a:	b480      	push	{r7}
 800113c:	b083      	sub	sp, #12
 800113e:	af00      	add	r7, sp, #0
 8001140:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001148:	b2db      	uxtb	r3, r3
 800114a:	2b02      	cmp	r3, #2
 800114c:	d004      	beq.n	8001158 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	2280      	movs	r2, #128	; 0x80
 8001152:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001154:	2301      	movs	r3, #1
 8001156:	e00c      	b.n	8001172 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2205      	movs	r2, #5
 800115c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	681a      	ldr	r2, [r3, #0]
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f022 0201 	bic.w	r2, r2, #1
 800116e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001170:	2300      	movs	r3, #0
}
 8001172:	4618      	mov	r0, r3
 8001174:	370c      	adds	r7, #12
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
	...

08001180 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001180:	b480      	push	{r7}
 8001182:	b089      	sub	sp, #36	; 0x24
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
 8001188:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800118a:	2300      	movs	r3, #0
 800118c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800118e:	2300      	movs	r3, #0
 8001190:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001192:	2300      	movs	r3, #0
 8001194:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001196:	2300      	movs	r3, #0
 8001198:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800119a:	2300      	movs	r3, #0
 800119c:	61fb      	str	r3, [r7, #28]
 800119e:	e175      	b.n	800148c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80011a0:	2201      	movs	r2, #1
 80011a2:	69fb      	ldr	r3, [r7, #28]
 80011a4:	fa02 f303 	lsl.w	r3, r2, r3
 80011a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	697a      	ldr	r2, [r7, #20]
 80011b0:	4013      	ands	r3, r2
 80011b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011b4:	693a      	ldr	r2, [r7, #16]
 80011b6:	697b      	ldr	r3, [r7, #20]
 80011b8:	429a      	cmp	r2, r3
 80011ba:	f040 8164 	bne.w	8001486 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	f003 0303 	and.w	r3, r3, #3
 80011c6:	2b01      	cmp	r3, #1
 80011c8:	d005      	beq.n	80011d6 <HAL_GPIO_Init+0x56>
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	f003 0303 	and.w	r3, r3, #3
 80011d2:	2b02      	cmp	r3, #2
 80011d4:	d130      	bne.n	8001238 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	689b      	ldr	r3, [r3, #8]
 80011da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80011dc:	69fb      	ldr	r3, [r7, #28]
 80011de:	005b      	lsls	r3, r3, #1
 80011e0:	2203      	movs	r2, #3
 80011e2:	fa02 f303 	lsl.w	r3, r2, r3
 80011e6:	43db      	mvns	r3, r3
 80011e8:	69ba      	ldr	r2, [r7, #24]
 80011ea:	4013      	ands	r3, r2
 80011ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	68da      	ldr	r2, [r3, #12]
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	005b      	lsls	r3, r3, #1
 80011f6:	fa02 f303 	lsl.w	r3, r2, r3
 80011fa:	69ba      	ldr	r2, [r7, #24]
 80011fc:	4313      	orrs	r3, r2
 80011fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	69ba      	ldr	r2, [r7, #24]
 8001204:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800120c:	2201      	movs	r2, #1
 800120e:	69fb      	ldr	r3, [r7, #28]
 8001210:	fa02 f303 	lsl.w	r3, r2, r3
 8001214:	43db      	mvns	r3, r3
 8001216:	69ba      	ldr	r2, [r7, #24]
 8001218:	4013      	ands	r3, r2
 800121a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	091b      	lsrs	r3, r3, #4
 8001222:	f003 0201 	and.w	r2, r3, #1
 8001226:	69fb      	ldr	r3, [r7, #28]
 8001228:	fa02 f303 	lsl.w	r3, r2, r3
 800122c:	69ba      	ldr	r2, [r7, #24]
 800122e:	4313      	orrs	r3, r2
 8001230:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	69ba      	ldr	r2, [r7, #24]
 8001236:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	f003 0303 	and.w	r3, r3, #3
 8001240:	2b03      	cmp	r3, #3
 8001242:	d017      	beq.n	8001274 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	68db      	ldr	r3, [r3, #12]
 8001248:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800124a:	69fb      	ldr	r3, [r7, #28]
 800124c:	005b      	lsls	r3, r3, #1
 800124e:	2203      	movs	r2, #3
 8001250:	fa02 f303 	lsl.w	r3, r2, r3
 8001254:	43db      	mvns	r3, r3
 8001256:	69ba      	ldr	r2, [r7, #24]
 8001258:	4013      	ands	r3, r2
 800125a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	689a      	ldr	r2, [r3, #8]
 8001260:	69fb      	ldr	r3, [r7, #28]
 8001262:	005b      	lsls	r3, r3, #1
 8001264:	fa02 f303 	lsl.w	r3, r2, r3
 8001268:	69ba      	ldr	r2, [r7, #24]
 800126a:	4313      	orrs	r3, r2
 800126c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	69ba      	ldr	r2, [r7, #24]
 8001272:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	f003 0303 	and.w	r3, r3, #3
 800127c:	2b02      	cmp	r3, #2
 800127e:	d123      	bne.n	80012c8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001280:	69fb      	ldr	r3, [r7, #28]
 8001282:	08da      	lsrs	r2, r3, #3
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	3208      	adds	r2, #8
 8001288:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800128c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800128e:	69fb      	ldr	r3, [r7, #28]
 8001290:	f003 0307 	and.w	r3, r3, #7
 8001294:	009b      	lsls	r3, r3, #2
 8001296:	220f      	movs	r2, #15
 8001298:	fa02 f303 	lsl.w	r3, r2, r3
 800129c:	43db      	mvns	r3, r3
 800129e:	69ba      	ldr	r2, [r7, #24]
 80012a0:	4013      	ands	r3, r2
 80012a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	691a      	ldr	r2, [r3, #16]
 80012a8:	69fb      	ldr	r3, [r7, #28]
 80012aa:	f003 0307 	and.w	r3, r3, #7
 80012ae:	009b      	lsls	r3, r3, #2
 80012b0:	fa02 f303 	lsl.w	r3, r2, r3
 80012b4:	69ba      	ldr	r2, [r7, #24]
 80012b6:	4313      	orrs	r3, r2
 80012b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	08da      	lsrs	r2, r3, #3
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	3208      	adds	r2, #8
 80012c2:	69b9      	ldr	r1, [r7, #24]
 80012c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80012ce:	69fb      	ldr	r3, [r7, #28]
 80012d0:	005b      	lsls	r3, r3, #1
 80012d2:	2203      	movs	r2, #3
 80012d4:	fa02 f303 	lsl.w	r3, r2, r3
 80012d8:	43db      	mvns	r3, r3
 80012da:	69ba      	ldr	r2, [r7, #24]
 80012dc:	4013      	ands	r3, r2
 80012de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	f003 0203 	and.w	r2, r3, #3
 80012e8:	69fb      	ldr	r3, [r7, #28]
 80012ea:	005b      	lsls	r3, r3, #1
 80012ec:	fa02 f303 	lsl.w	r3, r2, r3
 80012f0:	69ba      	ldr	r2, [r7, #24]
 80012f2:	4313      	orrs	r3, r2
 80012f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	69ba      	ldr	r2, [r7, #24]
 80012fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001304:	2b00      	cmp	r3, #0
 8001306:	f000 80be 	beq.w	8001486 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800130a:	4b66      	ldr	r3, [pc, #408]	; (80014a4 <HAL_GPIO_Init+0x324>)
 800130c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800130e:	4a65      	ldr	r2, [pc, #404]	; (80014a4 <HAL_GPIO_Init+0x324>)
 8001310:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001314:	6453      	str	r3, [r2, #68]	; 0x44
 8001316:	4b63      	ldr	r3, [pc, #396]	; (80014a4 <HAL_GPIO_Init+0x324>)
 8001318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800131a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800131e:	60fb      	str	r3, [r7, #12]
 8001320:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001322:	4a61      	ldr	r2, [pc, #388]	; (80014a8 <HAL_GPIO_Init+0x328>)
 8001324:	69fb      	ldr	r3, [r7, #28]
 8001326:	089b      	lsrs	r3, r3, #2
 8001328:	3302      	adds	r3, #2
 800132a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800132e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001330:	69fb      	ldr	r3, [r7, #28]
 8001332:	f003 0303 	and.w	r3, r3, #3
 8001336:	009b      	lsls	r3, r3, #2
 8001338:	220f      	movs	r2, #15
 800133a:	fa02 f303 	lsl.w	r3, r2, r3
 800133e:	43db      	mvns	r3, r3
 8001340:	69ba      	ldr	r2, [r7, #24]
 8001342:	4013      	ands	r3, r2
 8001344:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	4a58      	ldr	r2, [pc, #352]	; (80014ac <HAL_GPIO_Init+0x32c>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d037      	beq.n	80013be <HAL_GPIO_Init+0x23e>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	4a57      	ldr	r2, [pc, #348]	; (80014b0 <HAL_GPIO_Init+0x330>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d031      	beq.n	80013ba <HAL_GPIO_Init+0x23a>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	4a56      	ldr	r2, [pc, #344]	; (80014b4 <HAL_GPIO_Init+0x334>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d02b      	beq.n	80013b6 <HAL_GPIO_Init+0x236>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	4a55      	ldr	r2, [pc, #340]	; (80014b8 <HAL_GPIO_Init+0x338>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d025      	beq.n	80013b2 <HAL_GPIO_Init+0x232>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	4a54      	ldr	r2, [pc, #336]	; (80014bc <HAL_GPIO_Init+0x33c>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d01f      	beq.n	80013ae <HAL_GPIO_Init+0x22e>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	4a53      	ldr	r2, [pc, #332]	; (80014c0 <HAL_GPIO_Init+0x340>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d019      	beq.n	80013aa <HAL_GPIO_Init+0x22a>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	4a52      	ldr	r2, [pc, #328]	; (80014c4 <HAL_GPIO_Init+0x344>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d013      	beq.n	80013a6 <HAL_GPIO_Init+0x226>
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	4a51      	ldr	r2, [pc, #324]	; (80014c8 <HAL_GPIO_Init+0x348>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d00d      	beq.n	80013a2 <HAL_GPIO_Init+0x222>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	4a50      	ldr	r2, [pc, #320]	; (80014cc <HAL_GPIO_Init+0x34c>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d007      	beq.n	800139e <HAL_GPIO_Init+0x21e>
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	4a4f      	ldr	r2, [pc, #316]	; (80014d0 <HAL_GPIO_Init+0x350>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d101      	bne.n	800139a <HAL_GPIO_Init+0x21a>
 8001396:	2309      	movs	r3, #9
 8001398:	e012      	b.n	80013c0 <HAL_GPIO_Init+0x240>
 800139a:	230a      	movs	r3, #10
 800139c:	e010      	b.n	80013c0 <HAL_GPIO_Init+0x240>
 800139e:	2308      	movs	r3, #8
 80013a0:	e00e      	b.n	80013c0 <HAL_GPIO_Init+0x240>
 80013a2:	2307      	movs	r3, #7
 80013a4:	e00c      	b.n	80013c0 <HAL_GPIO_Init+0x240>
 80013a6:	2306      	movs	r3, #6
 80013a8:	e00a      	b.n	80013c0 <HAL_GPIO_Init+0x240>
 80013aa:	2305      	movs	r3, #5
 80013ac:	e008      	b.n	80013c0 <HAL_GPIO_Init+0x240>
 80013ae:	2304      	movs	r3, #4
 80013b0:	e006      	b.n	80013c0 <HAL_GPIO_Init+0x240>
 80013b2:	2303      	movs	r3, #3
 80013b4:	e004      	b.n	80013c0 <HAL_GPIO_Init+0x240>
 80013b6:	2302      	movs	r3, #2
 80013b8:	e002      	b.n	80013c0 <HAL_GPIO_Init+0x240>
 80013ba:	2301      	movs	r3, #1
 80013bc:	e000      	b.n	80013c0 <HAL_GPIO_Init+0x240>
 80013be:	2300      	movs	r3, #0
 80013c0:	69fa      	ldr	r2, [r7, #28]
 80013c2:	f002 0203 	and.w	r2, r2, #3
 80013c6:	0092      	lsls	r2, r2, #2
 80013c8:	4093      	lsls	r3, r2
 80013ca:	69ba      	ldr	r2, [r7, #24]
 80013cc:	4313      	orrs	r3, r2
 80013ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80013d0:	4935      	ldr	r1, [pc, #212]	; (80014a8 <HAL_GPIO_Init+0x328>)
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	089b      	lsrs	r3, r3, #2
 80013d6:	3302      	adds	r3, #2
 80013d8:	69ba      	ldr	r2, [r7, #24]
 80013da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013de:	4b3d      	ldr	r3, [pc, #244]	; (80014d4 <HAL_GPIO_Init+0x354>)
 80013e0:	689b      	ldr	r3, [r3, #8]
 80013e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	43db      	mvns	r3, r3
 80013e8:	69ba      	ldr	r2, [r7, #24]
 80013ea:	4013      	ands	r3, r2
 80013ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d003      	beq.n	8001402 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80013fa:	69ba      	ldr	r2, [r7, #24]
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	4313      	orrs	r3, r2
 8001400:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001402:	4a34      	ldr	r2, [pc, #208]	; (80014d4 <HAL_GPIO_Init+0x354>)
 8001404:	69bb      	ldr	r3, [r7, #24]
 8001406:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001408:	4b32      	ldr	r3, [pc, #200]	; (80014d4 <HAL_GPIO_Init+0x354>)
 800140a:	68db      	ldr	r3, [r3, #12]
 800140c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800140e:	693b      	ldr	r3, [r7, #16]
 8001410:	43db      	mvns	r3, r3
 8001412:	69ba      	ldr	r2, [r7, #24]
 8001414:	4013      	ands	r3, r2
 8001416:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001420:	2b00      	cmp	r3, #0
 8001422:	d003      	beq.n	800142c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001424:	69ba      	ldr	r2, [r7, #24]
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	4313      	orrs	r3, r2
 800142a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800142c:	4a29      	ldr	r2, [pc, #164]	; (80014d4 <HAL_GPIO_Init+0x354>)
 800142e:	69bb      	ldr	r3, [r7, #24]
 8001430:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001432:	4b28      	ldr	r3, [pc, #160]	; (80014d4 <HAL_GPIO_Init+0x354>)
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001438:	693b      	ldr	r3, [r7, #16]
 800143a:	43db      	mvns	r3, r3
 800143c:	69ba      	ldr	r2, [r7, #24]
 800143e:	4013      	ands	r3, r2
 8001440:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800144a:	2b00      	cmp	r3, #0
 800144c:	d003      	beq.n	8001456 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800144e:	69ba      	ldr	r2, [r7, #24]
 8001450:	693b      	ldr	r3, [r7, #16]
 8001452:	4313      	orrs	r3, r2
 8001454:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001456:	4a1f      	ldr	r2, [pc, #124]	; (80014d4 <HAL_GPIO_Init+0x354>)
 8001458:	69bb      	ldr	r3, [r7, #24]
 800145a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800145c:	4b1d      	ldr	r3, [pc, #116]	; (80014d4 <HAL_GPIO_Init+0x354>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	43db      	mvns	r3, r3
 8001466:	69ba      	ldr	r2, [r7, #24]
 8001468:	4013      	ands	r3, r2
 800146a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001474:	2b00      	cmp	r3, #0
 8001476:	d003      	beq.n	8001480 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001478:	69ba      	ldr	r2, [r7, #24]
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	4313      	orrs	r3, r2
 800147e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001480:	4a14      	ldr	r2, [pc, #80]	; (80014d4 <HAL_GPIO_Init+0x354>)
 8001482:	69bb      	ldr	r3, [r7, #24]
 8001484:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001486:	69fb      	ldr	r3, [r7, #28]
 8001488:	3301      	adds	r3, #1
 800148a:	61fb      	str	r3, [r7, #28]
 800148c:	69fb      	ldr	r3, [r7, #28]
 800148e:	2b0f      	cmp	r3, #15
 8001490:	f67f ae86 	bls.w	80011a0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001494:	bf00      	nop
 8001496:	bf00      	nop
 8001498:	3724      	adds	r7, #36	; 0x24
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr
 80014a2:	bf00      	nop
 80014a4:	40023800 	.word	0x40023800
 80014a8:	40013800 	.word	0x40013800
 80014ac:	40020000 	.word	0x40020000
 80014b0:	40020400 	.word	0x40020400
 80014b4:	40020800 	.word	0x40020800
 80014b8:	40020c00 	.word	0x40020c00
 80014bc:	40021000 	.word	0x40021000
 80014c0:	40021400 	.word	0x40021400
 80014c4:	40021800 	.word	0x40021800
 80014c8:	40021c00 	.word	0x40021c00
 80014cc:	40022000 	.word	0x40022000
 80014d0:	40022400 	.word	0x40022400
 80014d4:	40013c00 	.word	0x40013c00

080014d8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80014de:	2300      	movs	r3, #0
 80014e0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80014e2:	4b23      	ldr	r3, [pc, #140]	; (8001570 <HAL_PWREx_EnableOverDrive+0x98>)
 80014e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e6:	4a22      	ldr	r2, [pc, #136]	; (8001570 <HAL_PWREx_EnableOverDrive+0x98>)
 80014e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014ec:	6413      	str	r3, [r2, #64]	; 0x40
 80014ee:	4b20      	ldr	r3, [pc, #128]	; (8001570 <HAL_PWREx_EnableOverDrive+0x98>)
 80014f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014f6:	603b      	str	r3, [r7, #0]
 80014f8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80014fa:	4b1e      	ldr	r3, [pc, #120]	; (8001574 <HAL_PWREx_EnableOverDrive+0x9c>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4a1d      	ldr	r2, [pc, #116]	; (8001574 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001500:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001504:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001506:	f7ff fc8b 	bl	8000e20 <HAL_GetTick>
 800150a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800150c:	e009      	b.n	8001522 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800150e:	f7ff fc87 	bl	8000e20 <HAL_GetTick>
 8001512:	4602      	mov	r2, r0
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	1ad3      	subs	r3, r2, r3
 8001518:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800151c:	d901      	bls.n	8001522 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800151e:	2303      	movs	r3, #3
 8001520:	e022      	b.n	8001568 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001522:	4b14      	ldr	r3, [pc, #80]	; (8001574 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800152a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800152e:	d1ee      	bne.n	800150e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001530:	4b10      	ldr	r3, [pc, #64]	; (8001574 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a0f      	ldr	r2, [pc, #60]	; (8001574 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001536:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800153a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800153c:	f7ff fc70 	bl	8000e20 <HAL_GetTick>
 8001540:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001542:	e009      	b.n	8001558 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001544:	f7ff fc6c 	bl	8000e20 <HAL_GetTick>
 8001548:	4602      	mov	r2, r0
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001552:	d901      	bls.n	8001558 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001554:	2303      	movs	r3, #3
 8001556:	e007      	b.n	8001568 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001558:	4b06      	ldr	r3, [pc, #24]	; (8001574 <HAL_PWREx_EnableOverDrive+0x9c>)
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001560:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001564:	d1ee      	bne.n	8001544 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001566:	2300      	movs	r3, #0
}
 8001568:	4618      	mov	r0, r3
 800156a:	3708      	adds	r7, #8
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}
 8001570:	40023800 	.word	0x40023800
 8001574:	40007000 	.word	0x40007000

08001578 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b086      	sub	sp, #24
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001580:	2300      	movs	r3, #0
 8001582:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d101      	bne.n	800158e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800158a:	2301      	movs	r3, #1
 800158c:	e29b      	b.n	8001ac6 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f003 0301 	and.w	r3, r3, #1
 8001596:	2b00      	cmp	r3, #0
 8001598:	f000 8087 	beq.w	80016aa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800159c:	4b96      	ldr	r3, [pc, #600]	; (80017f8 <HAL_RCC_OscConfig+0x280>)
 800159e:	689b      	ldr	r3, [r3, #8]
 80015a0:	f003 030c 	and.w	r3, r3, #12
 80015a4:	2b04      	cmp	r3, #4
 80015a6:	d00c      	beq.n	80015c2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015a8:	4b93      	ldr	r3, [pc, #588]	; (80017f8 <HAL_RCC_OscConfig+0x280>)
 80015aa:	689b      	ldr	r3, [r3, #8]
 80015ac:	f003 030c 	and.w	r3, r3, #12
 80015b0:	2b08      	cmp	r3, #8
 80015b2:	d112      	bne.n	80015da <HAL_RCC_OscConfig+0x62>
 80015b4:	4b90      	ldr	r3, [pc, #576]	; (80017f8 <HAL_RCC_OscConfig+0x280>)
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80015c0:	d10b      	bne.n	80015da <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015c2:	4b8d      	ldr	r3, [pc, #564]	; (80017f8 <HAL_RCC_OscConfig+0x280>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d06c      	beq.n	80016a8 <HAL_RCC_OscConfig+0x130>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d168      	bne.n	80016a8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80015d6:	2301      	movs	r3, #1
 80015d8:	e275      	b.n	8001ac6 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015e2:	d106      	bne.n	80015f2 <HAL_RCC_OscConfig+0x7a>
 80015e4:	4b84      	ldr	r3, [pc, #528]	; (80017f8 <HAL_RCC_OscConfig+0x280>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a83      	ldr	r2, [pc, #524]	; (80017f8 <HAL_RCC_OscConfig+0x280>)
 80015ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015ee:	6013      	str	r3, [r2, #0]
 80015f0:	e02e      	b.n	8001650 <HAL_RCC_OscConfig+0xd8>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d10c      	bne.n	8001614 <HAL_RCC_OscConfig+0x9c>
 80015fa:	4b7f      	ldr	r3, [pc, #508]	; (80017f8 <HAL_RCC_OscConfig+0x280>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4a7e      	ldr	r2, [pc, #504]	; (80017f8 <HAL_RCC_OscConfig+0x280>)
 8001600:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001604:	6013      	str	r3, [r2, #0]
 8001606:	4b7c      	ldr	r3, [pc, #496]	; (80017f8 <HAL_RCC_OscConfig+0x280>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4a7b      	ldr	r2, [pc, #492]	; (80017f8 <HAL_RCC_OscConfig+0x280>)
 800160c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001610:	6013      	str	r3, [r2, #0]
 8001612:	e01d      	b.n	8001650 <HAL_RCC_OscConfig+0xd8>
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800161c:	d10c      	bne.n	8001638 <HAL_RCC_OscConfig+0xc0>
 800161e:	4b76      	ldr	r3, [pc, #472]	; (80017f8 <HAL_RCC_OscConfig+0x280>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4a75      	ldr	r2, [pc, #468]	; (80017f8 <HAL_RCC_OscConfig+0x280>)
 8001624:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001628:	6013      	str	r3, [r2, #0]
 800162a:	4b73      	ldr	r3, [pc, #460]	; (80017f8 <HAL_RCC_OscConfig+0x280>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4a72      	ldr	r2, [pc, #456]	; (80017f8 <HAL_RCC_OscConfig+0x280>)
 8001630:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001634:	6013      	str	r3, [r2, #0]
 8001636:	e00b      	b.n	8001650 <HAL_RCC_OscConfig+0xd8>
 8001638:	4b6f      	ldr	r3, [pc, #444]	; (80017f8 <HAL_RCC_OscConfig+0x280>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a6e      	ldr	r2, [pc, #440]	; (80017f8 <HAL_RCC_OscConfig+0x280>)
 800163e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001642:	6013      	str	r3, [r2, #0]
 8001644:	4b6c      	ldr	r3, [pc, #432]	; (80017f8 <HAL_RCC_OscConfig+0x280>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a6b      	ldr	r2, [pc, #428]	; (80017f8 <HAL_RCC_OscConfig+0x280>)
 800164a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800164e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d013      	beq.n	8001680 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001658:	f7ff fbe2 	bl	8000e20 <HAL_GetTick>
 800165c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800165e:	e008      	b.n	8001672 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001660:	f7ff fbde 	bl	8000e20 <HAL_GetTick>
 8001664:	4602      	mov	r2, r0
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	2b64      	cmp	r3, #100	; 0x64
 800166c:	d901      	bls.n	8001672 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800166e:	2303      	movs	r3, #3
 8001670:	e229      	b.n	8001ac6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001672:	4b61      	ldr	r3, [pc, #388]	; (80017f8 <HAL_RCC_OscConfig+0x280>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800167a:	2b00      	cmp	r3, #0
 800167c:	d0f0      	beq.n	8001660 <HAL_RCC_OscConfig+0xe8>
 800167e:	e014      	b.n	80016aa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001680:	f7ff fbce 	bl	8000e20 <HAL_GetTick>
 8001684:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001686:	e008      	b.n	800169a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001688:	f7ff fbca 	bl	8000e20 <HAL_GetTick>
 800168c:	4602      	mov	r2, r0
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	2b64      	cmp	r3, #100	; 0x64
 8001694:	d901      	bls.n	800169a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001696:	2303      	movs	r3, #3
 8001698:	e215      	b.n	8001ac6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800169a:	4b57      	ldr	r3, [pc, #348]	; (80017f8 <HAL_RCC_OscConfig+0x280>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d1f0      	bne.n	8001688 <HAL_RCC_OscConfig+0x110>
 80016a6:	e000      	b.n	80016aa <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f003 0302 	and.w	r3, r3, #2
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d069      	beq.n	800178a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80016b6:	4b50      	ldr	r3, [pc, #320]	; (80017f8 <HAL_RCC_OscConfig+0x280>)
 80016b8:	689b      	ldr	r3, [r3, #8]
 80016ba:	f003 030c 	and.w	r3, r3, #12
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d00b      	beq.n	80016da <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016c2:	4b4d      	ldr	r3, [pc, #308]	; (80017f8 <HAL_RCC_OscConfig+0x280>)
 80016c4:	689b      	ldr	r3, [r3, #8]
 80016c6:	f003 030c 	and.w	r3, r3, #12
 80016ca:	2b08      	cmp	r3, #8
 80016cc:	d11c      	bne.n	8001708 <HAL_RCC_OscConfig+0x190>
 80016ce:	4b4a      	ldr	r3, [pc, #296]	; (80017f8 <HAL_RCC_OscConfig+0x280>)
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d116      	bne.n	8001708 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016da:	4b47      	ldr	r3, [pc, #284]	; (80017f8 <HAL_RCC_OscConfig+0x280>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f003 0302 	and.w	r3, r3, #2
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d005      	beq.n	80016f2 <HAL_RCC_OscConfig+0x17a>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	68db      	ldr	r3, [r3, #12]
 80016ea:	2b01      	cmp	r3, #1
 80016ec:	d001      	beq.n	80016f2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80016ee:	2301      	movs	r3, #1
 80016f0:	e1e9      	b.n	8001ac6 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016f2:	4b41      	ldr	r3, [pc, #260]	; (80017f8 <HAL_RCC_OscConfig+0x280>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	691b      	ldr	r3, [r3, #16]
 80016fe:	00db      	lsls	r3, r3, #3
 8001700:	493d      	ldr	r1, [pc, #244]	; (80017f8 <HAL_RCC_OscConfig+0x280>)
 8001702:	4313      	orrs	r3, r2
 8001704:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001706:	e040      	b.n	800178a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	68db      	ldr	r3, [r3, #12]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d023      	beq.n	8001758 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001710:	4b39      	ldr	r3, [pc, #228]	; (80017f8 <HAL_RCC_OscConfig+0x280>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a38      	ldr	r2, [pc, #224]	; (80017f8 <HAL_RCC_OscConfig+0x280>)
 8001716:	f043 0301 	orr.w	r3, r3, #1
 800171a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800171c:	f7ff fb80 	bl	8000e20 <HAL_GetTick>
 8001720:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001722:	e008      	b.n	8001736 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001724:	f7ff fb7c 	bl	8000e20 <HAL_GetTick>
 8001728:	4602      	mov	r2, r0
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	1ad3      	subs	r3, r2, r3
 800172e:	2b02      	cmp	r3, #2
 8001730:	d901      	bls.n	8001736 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001732:	2303      	movs	r3, #3
 8001734:	e1c7      	b.n	8001ac6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001736:	4b30      	ldr	r3, [pc, #192]	; (80017f8 <HAL_RCC_OscConfig+0x280>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f003 0302 	and.w	r3, r3, #2
 800173e:	2b00      	cmp	r3, #0
 8001740:	d0f0      	beq.n	8001724 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001742:	4b2d      	ldr	r3, [pc, #180]	; (80017f8 <HAL_RCC_OscConfig+0x280>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	691b      	ldr	r3, [r3, #16]
 800174e:	00db      	lsls	r3, r3, #3
 8001750:	4929      	ldr	r1, [pc, #164]	; (80017f8 <HAL_RCC_OscConfig+0x280>)
 8001752:	4313      	orrs	r3, r2
 8001754:	600b      	str	r3, [r1, #0]
 8001756:	e018      	b.n	800178a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001758:	4b27      	ldr	r3, [pc, #156]	; (80017f8 <HAL_RCC_OscConfig+0x280>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a26      	ldr	r2, [pc, #152]	; (80017f8 <HAL_RCC_OscConfig+0x280>)
 800175e:	f023 0301 	bic.w	r3, r3, #1
 8001762:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001764:	f7ff fb5c 	bl	8000e20 <HAL_GetTick>
 8001768:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800176a:	e008      	b.n	800177e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800176c:	f7ff fb58 	bl	8000e20 <HAL_GetTick>
 8001770:	4602      	mov	r2, r0
 8001772:	693b      	ldr	r3, [r7, #16]
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	2b02      	cmp	r3, #2
 8001778:	d901      	bls.n	800177e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800177a:	2303      	movs	r3, #3
 800177c:	e1a3      	b.n	8001ac6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800177e:	4b1e      	ldr	r3, [pc, #120]	; (80017f8 <HAL_RCC_OscConfig+0x280>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f003 0302 	and.w	r3, r3, #2
 8001786:	2b00      	cmp	r3, #0
 8001788:	d1f0      	bne.n	800176c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f003 0308 	and.w	r3, r3, #8
 8001792:	2b00      	cmp	r3, #0
 8001794:	d038      	beq.n	8001808 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	695b      	ldr	r3, [r3, #20]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d019      	beq.n	80017d2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800179e:	4b16      	ldr	r3, [pc, #88]	; (80017f8 <HAL_RCC_OscConfig+0x280>)
 80017a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017a2:	4a15      	ldr	r2, [pc, #84]	; (80017f8 <HAL_RCC_OscConfig+0x280>)
 80017a4:	f043 0301 	orr.w	r3, r3, #1
 80017a8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017aa:	f7ff fb39 	bl	8000e20 <HAL_GetTick>
 80017ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017b0:	e008      	b.n	80017c4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017b2:	f7ff fb35 	bl	8000e20 <HAL_GetTick>
 80017b6:	4602      	mov	r2, r0
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	1ad3      	subs	r3, r2, r3
 80017bc:	2b02      	cmp	r3, #2
 80017be:	d901      	bls.n	80017c4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80017c0:	2303      	movs	r3, #3
 80017c2:	e180      	b.n	8001ac6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017c4:	4b0c      	ldr	r3, [pc, #48]	; (80017f8 <HAL_RCC_OscConfig+0x280>)
 80017c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017c8:	f003 0302 	and.w	r3, r3, #2
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d0f0      	beq.n	80017b2 <HAL_RCC_OscConfig+0x23a>
 80017d0:	e01a      	b.n	8001808 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017d2:	4b09      	ldr	r3, [pc, #36]	; (80017f8 <HAL_RCC_OscConfig+0x280>)
 80017d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017d6:	4a08      	ldr	r2, [pc, #32]	; (80017f8 <HAL_RCC_OscConfig+0x280>)
 80017d8:	f023 0301 	bic.w	r3, r3, #1
 80017dc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017de:	f7ff fb1f 	bl	8000e20 <HAL_GetTick>
 80017e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017e4:	e00a      	b.n	80017fc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017e6:	f7ff fb1b 	bl	8000e20 <HAL_GetTick>
 80017ea:	4602      	mov	r2, r0
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	1ad3      	subs	r3, r2, r3
 80017f0:	2b02      	cmp	r3, #2
 80017f2:	d903      	bls.n	80017fc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80017f4:	2303      	movs	r3, #3
 80017f6:	e166      	b.n	8001ac6 <HAL_RCC_OscConfig+0x54e>
 80017f8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017fc:	4b92      	ldr	r3, [pc, #584]	; (8001a48 <HAL_RCC_OscConfig+0x4d0>)
 80017fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001800:	f003 0302 	and.w	r3, r3, #2
 8001804:	2b00      	cmp	r3, #0
 8001806:	d1ee      	bne.n	80017e6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f003 0304 	and.w	r3, r3, #4
 8001810:	2b00      	cmp	r3, #0
 8001812:	f000 80a4 	beq.w	800195e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001816:	4b8c      	ldr	r3, [pc, #560]	; (8001a48 <HAL_RCC_OscConfig+0x4d0>)
 8001818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800181e:	2b00      	cmp	r3, #0
 8001820:	d10d      	bne.n	800183e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001822:	4b89      	ldr	r3, [pc, #548]	; (8001a48 <HAL_RCC_OscConfig+0x4d0>)
 8001824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001826:	4a88      	ldr	r2, [pc, #544]	; (8001a48 <HAL_RCC_OscConfig+0x4d0>)
 8001828:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800182c:	6413      	str	r3, [r2, #64]	; 0x40
 800182e:	4b86      	ldr	r3, [pc, #536]	; (8001a48 <HAL_RCC_OscConfig+0x4d0>)
 8001830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001832:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001836:	60bb      	str	r3, [r7, #8]
 8001838:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800183a:	2301      	movs	r3, #1
 800183c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800183e:	4b83      	ldr	r3, [pc, #524]	; (8001a4c <HAL_RCC_OscConfig+0x4d4>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001846:	2b00      	cmp	r3, #0
 8001848:	d118      	bne.n	800187c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800184a:	4b80      	ldr	r3, [pc, #512]	; (8001a4c <HAL_RCC_OscConfig+0x4d4>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4a7f      	ldr	r2, [pc, #508]	; (8001a4c <HAL_RCC_OscConfig+0x4d4>)
 8001850:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001854:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001856:	f7ff fae3 	bl	8000e20 <HAL_GetTick>
 800185a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800185c:	e008      	b.n	8001870 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800185e:	f7ff fadf 	bl	8000e20 <HAL_GetTick>
 8001862:	4602      	mov	r2, r0
 8001864:	693b      	ldr	r3, [r7, #16]
 8001866:	1ad3      	subs	r3, r2, r3
 8001868:	2b64      	cmp	r3, #100	; 0x64
 800186a:	d901      	bls.n	8001870 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800186c:	2303      	movs	r3, #3
 800186e:	e12a      	b.n	8001ac6 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001870:	4b76      	ldr	r3, [pc, #472]	; (8001a4c <HAL_RCC_OscConfig+0x4d4>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001878:	2b00      	cmp	r3, #0
 800187a:	d0f0      	beq.n	800185e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	689b      	ldr	r3, [r3, #8]
 8001880:	2b01      	cmp	r3, #1
 8001882:	d106      	bne.n	8001892 <HAL_RCC_OscConfig+0x31a>
 8001884:	4b70      	ldr	r3, [pc, #448]	; (8001a48 <HAL_RCC_OscConfig+0x4d0>)
 8001886:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001888:	4a6f      	ldr	r2, [pc, #444]	; (8001a48 <HAL_RCC_OscConfig+0x4d0>)
 800188a:	f043 0301 	orr.w	r3, r3, #1
 800188e:	6713      	str	r3, [r2, #112]	; 0x70
 8001890:	e02d      	b.n	80018ee <HAL_RCC_OscConfig+0x376>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	689b      	ldr	r3, [r3, #8]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d10c      	bne.n	80018b4 <HAL_RCC_OscConfig+0x33c>
 800189a:	4b6b      	ldr	r3, [pc, #428]	; (8001a48 <HAL_RCC_OscConfig+0x4d0>)
 800189c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800189e:	4a6a      	ldr	r2, [pc, #424]	; (8001a48 <HAL_RCC_OscConfig+0x4d0>)
 80018a0:	f023 0301 	bic.w	r3, r3, #1
 80018a4:	6713      	str	r3, [r2, #112]	; 0x70
 80018a6:	4b68      	ldr	r3, [pc, #416]	; (8001a48 <HAL_RCC_OscConfig+0x4d0>)
 80018a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018aa:	4a67      	ldr	r2, [pc, #412]	; (8001a48 <HAL_RCC_OscConfig+0x4d0>)
 80018ac:	f023 0304 	bic.w	r3, r3, #4
 80018b0:	6713      	str	r3, [r2, #112]	; 0x70
 80018b2:	e01c      	b.n	80018ee <HAL_RCC_OscConfig+0x376>
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	2b05      	cmp	r3, #5
 80018ba:	d10c      	bne.n	80018d6 <HAL_RCC_OscConfig+0x35e>
 80018bc:	4b62      	ldr	r3, [pc, #392]	; (8001a48 <HAL_RCC_OscConfig+0x4d0>)
 80018be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018c0:	4a61      	ldr	r2, [pc, #388]	; (8001a48 <HAL_RCC_OscConfig+0x4d0>)
 80018c2:	f043 0304 	orr.w	r3, r3, #4
 80018c6:	6713      	str	r3, [r2, #112]	; 0x70
 80018c8:	4b5f      	ldr	r3, [pc, #380]	; (8001a48 <HAL_RCC_OscConfig+0x4d0>)
 80018ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018cc:	4a5e      	ldr	r2, [pc, #376]	; (8001a48 <HAL_RCC_OscConfig+0x4d0>)
 80018ce:	f043 0301 	orr.w	r3, r3, #1
 80018d2:	6713      	str	r3, [r2, #112]	; 0x70
 80018d4:	e00b      	b.n	80018ee <HAL_RCC_OscConfig+0x376>
 80018d6:	4b5c      	ldr	r3, [pc, #368]	; (8001a48 <HAL_RCC_OscConfig+0x4d0>)
 80018d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018da:	4a5b      	ldr	r2, [pc, #364]	; (8001a48 <HAL_RCC_OscConfig+0x4d0>)
 80018dc:	f023 0301 	bic.w	r3, r3, #1
 80018e0:	6713      	str	r3, [r2, #112]	; 0x70
 80018e2:	4b59      	ldr	r3, [pc, #356]	; (8001a48 <HAL_RCC_OscConfig+0x4d0>)
 80018e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018e6:	4a58      	ldr	r2, [pc, #352]	; (8001a48 <HAL_RCC_OscConfig+0x4d0>)
 80018e8:	f023 0304 	bic.w	r3, r3, #4
 80018ec:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	689b      	ldr	r3, [r3, #8]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d015      	beq.n	8001922 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018f6:	f7ff fa93 	bl	8000e20 <HAL_GetTick>
 80018fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018fc:	e00a      	b.n	8001914 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018fe:	f7ff fa8f 	bl	8000e20 <HAL_GetTick>
 8001902:	4602      	mov	r2, r0
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	1ad3      	subs	r3, r2, r3
 8001908:	f241 3288 	movw	r2, #5000	; 0x1388
 800190c:	4293      	cmp	r3, r2
 800190e:	d901      	bls.n	8001914 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001910:	2303      	movs	r3, #3
 8001912:	e0d8      	b.n	8001ac6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001914:	4b4c      	ldr	r3, [pc, #304]	; (8001a48 <HAL_RCC_OscConfig+0x4d0>)
 8001916:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001918:	f003 0302 	and.w	r3, r3, #2
 800191c:	2b00      	cmp	r3, #0
 800191e:	d0ee      	beq.n	80018fe <HAL_RCC_OscConfig+0x386>
 8001920:	e014      	b.n	800194c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001922:	f7ff fa7d 	bl	8000e20 <HAL_GetTick>
 8001926:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001928:	e00a      	b.n	8001940 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800192a:	f7ff fa79 	bl	8000e20 <HAL_GetTick>
 800192e:	4602      	mov	r2, r0
 8001930:	693b      	ldr	r3, [r7, #16]
 8001932:	1ad3      	subs	r3, r2, r3
 8001934:	f241 3288 	movw	r2, #5000	; 0x1388
 8001938:	4293      	cmp	r3, r2
 800193a:	d901      	bls.n	8001940 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800193c:	2303      	movs	r3, #3
 800193e:	e0c2      	b.n	8001ac6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001940:	4b41      	ldr	r3, [pc, #260]	; (8001a48 <HAL_RCC_OscConfig+0x4d0>)
 8001942:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001944:	f003 0302 	and.w	r3, r3, #2
 8001948:	2b00      	cmp	r3, #0
 800194a:	d1ee      	bne.n	800192a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800194c:	7dfb      	ldrb	r3, [r7, #23]
 800194e:	2b01      	cmp	r3, #1
 8001950:	d105      	bne.n	800195e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001952:	4b3d      	ldr	r3, [pc, #244]	; (8001a48 <HAL_RCC_OscConfig+0x4d0>)
 8001954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001956:	4a3c      	ldr	r2, [pc, #240]	; (8001a48 <HAL_RCC_OscConfig+0x4d0>)
 8001958:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800195c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	699b      	ldr	r3, [r3, #24]
 8001962:	2b00      	cmp	r3, #0
 8001964:	f000 80ae 	beq.w	8001ac4 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001968:	4b37      	ldr	r3, [pc, #220]	; (8001a48 <HAL_RCC_OscConfig+0x4d0>)
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	f003 030c 	and.w	r3, r3, #12
 8001970:	2b08      	cmp	r3, #8
 8001972:	d06d      	beq.n	8001a50 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	699b      	ldr	r3, [r3, #24]
 8001978:	2b02      	cmp	r3, #2
 800197a:	d14b      	bne.n	8001a14 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800197c:	4b32      	ldr	r3, [pc, #200]	; (8001a48 <HAL_RCC_OscConfig+0x4d0>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a31      	ldr	r2, [pc, #196]	; (8001a48 <HAL_RCC_OscConfig+0x4d0>)
 8001982:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001986:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001988:	f7ff fa4a 	bl	8000e20 <HAL_GetTick>
 800198c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800198e:	e008      	b.n	80019a2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001990:	f7ff fa46 	bl	8000e20 <HAL_GetTick>
 8001994:	4602      	mov	r2, r0
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	1ad3      	subs	r3, r2, r3
 800199a:	2b02      	cmp	r3, #2
 800199c:	d901      	bls.n	80019a2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800199e:	2303      	movs	r3, #3
 80019a0:	e091      	b.n	8001ac6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019a2:	4b29      	ldr	r3, [pc, #164]	; (8001a48 <HAL_RCC_OscConfig+0x4d0>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d1f0      	bne.n	8001990 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	69da      	ldr	r2, [r3, #28]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6a1b      	ldr	r3, [r3, #32]
 80019b6:	431a      	orrs	r2, r3
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019bc:	019b      	lsls	r3, r3, #6
 80019be:	431a      	orrs	r2, r3
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019c4:	085b      	lsrs	r3, r3, #1
 80019c6:	3b01      	subs	r3, #1
 80019c8:	041b      	lsls	r3, r3, #16
 80019ca:	431a      	orrs	r2, r3
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019d0:	061b      	lsls	r3, r3, #24
 80019d2:	431a      	orrs	r2, r3
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d8:	071b      	lsls	r3, r3, #28
 80019da:	491b      	ldr	r1, [pc, #108]	; (8001a48 <HAL_RCC_OscConfig+0x4d0>)
 80019dc:	4313      	orrs	r3, r2
 80019de:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019e0:	4b19      	ldr	r3, [pc, #100]	; (8001a48 <HAL_RCC_OscConfig+0x4d0>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a18      	ldr	r2, [pc, #96]	; (8001a48 <HAL_RCC_OscConfig+0x4d0>)
 80019e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019ec:	f7ff fa18 	bl	8000e20 <HAL_GetTick>
 80019f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019f2:	e008      	b.n	8001a06 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019f4:	f7ff fa14 	bl	8000e20 <HAL_GetTick>
 80019f8:	4602      	mov	r2, r0
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	1ad3      	subs	r3, r2, r3
 80019fe:	2b02      	cmp	r3, #2
 8001a00:	d901      	bls.n	8001a06 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001a02:	2303      	movs	r3, #3
 8001a04:	e05f      	b.n	8001ac6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a06:	4b10      	ldr	r3, [pc, #64]	; (8001a48 <HAL_RCC_OscConfig+0x4d0>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d0f0      	beq.n	80019f4 <HAL_RCC_OscConfig+0x47c>
 8001a12:	e057      	b.n	8001ac4 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a14:	4b0c      	ldr	r3, [pc, #48]	; (8001a48 <HAL_RCC_OscConfig+0x4d0>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a0b      	ldr	r2, [pc, #44]	; (8001a48 <HAL_RCC_OscConfig+0x4d0>)
 8001a1a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a20:	f7ff f9fe 	bl	8000e20 <HAL_GetTick>
 8001a24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a26:	e008      	b.n	8001a3a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a28:	f7ff f9fa 	bl	8000e20 <HAL_GetTick>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	1ad3      	subs	r3, r2, r3
 8001a32:	2b02      	cmp	r3, #2
 8001a34:	d901      	bls.n	8001a3a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8001a36:	2303      	movs	r3, #3
 8001a38:	e045      	b.n	8001ac6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a3a:	4b03      	ldr	r3, [pc, #12]	; (8001a48 <HAL_RCC_OscConfig+0x4d0>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d1f0      	bne.n	8001a28 <HAL_RCC_OscConfig+0x4b0>
 8001a46:	e03d      	b.n	8001ac4 <HAL_RCC_OscConfig+0x54c>
 8001a48:	40023800 	.word	0x40023800
 8001a4c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001a50:	4b1f      	ldr	r3, [pc, #124]	; (8001ad0 <HAL_RCC_OscConfig+0x558>)
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	699b      	ldr	r3, [r3, #24]
 8001a5a:	2b01      	cmp	r3, #1
 8001a5c:	d030      	beq.n	8001ac0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	d129      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a76:	429a      	cmp	r2, r3
 8001a78:	d122      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a7a:	68fa      	ldr	r2, [r7, #12]
 8001a7c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001a80:	4013      	ands	r3, r2
 8001a82:	687a      	ldr	r2, [r7, #4]
 8001a84:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001a86:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d119      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a96:	085b      	lsrs	r3, r3, #1
 8001a98:	3b01      	subs	r3, #1
 8001a9a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d10f      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aaa:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001aac:	429a      	cmp	r2, r3
 8001aae:	d107      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aba:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001abc:	429a      	cmp	r2, r3
 8001abe:	d001      	beq.n	8001ac4 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	e000      	b.n	8001ac6 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001ac4:	2300      	movs	r3, #0
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3718      	adds	r7, #24
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	40023800 	.word	0x40023800

08001ad4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b084      	sub	sp, #16
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
 8001adc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d101      	bne.n	8001aec <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	e0d0      	b.n	8001c8e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001aec:	4b6a      	ldr	r3, [pc, #424]	; (8001c98 <HAL_RCC_ClockConfig+0x1c4>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f003 030f 	and.w	r3, r3, #15
 8001af4:	683a      	ldr	r2, [r7, #0]
 8001af6:	429a      	cmp	r2, r3
 8001af8:	d910      	bls.n	8001b1c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001afa:	4b67      	ldr	r3, [pc, #412]	; (8001c98 <HAL_RCC_ClockConfig+0x1c4>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f023 020f 	bic.w	r2, r3, #15
 8001b02:	4965      	ldr	r1, [pc, #404]	; (8001c98 <HAL_RCC_ClockConfig+0x1c4>)
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	4313      	orrs	r3, r2
 8001b08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b0a:	4b63      	ldr	r3, [pc, #396]	; (8001c98 <HAL_RCC_ClockConfig+0x1c4>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f003 030f 	and.w	r3, r3, #15
 8001b12:	683a      	ldr	r2, [r7, #0]
 8001b14:	429a      	cmp	r2, r3
 8001b16:	d001      	beq.n	8001b1c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	e0b8      	b.n	8001c8e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f003 0302 	and.w	r3, r3, #2
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d020      	beq.n	8001b6a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f003 0304 	and.w	r3, r3, #4
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d005      	beq.n	8001b40 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b34:	4b59      	ldr	r3, [pc, #356]	; (8001c9c <HAL_RCC_ClockConfig+0x1c8>)
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	4a58      	ldr	r2, [pc, #352]	; (8001c9c <HAL_RCC_ClockConfig+0x1c8>)
 8001b3a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001b3e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f003 0308 	and.w	r3, r3, #8
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d005      	beq.n	8001b58 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b4c:	4b53      	ldr	r3, [pc, #332]	; (8001c9c <HAL_RCC_ClockConfig+0x1c8>)
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	4a52      	ldr	r2, [pc, #328]	; (8001c9c <HAL_RCC_ClockConfig+0x1c8>)
 8001b52:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001b56:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b58:	4b50      	ldr	r3, [pc, #320]	; (8001c9c <HAL_RCC_ClockConfig+0x1c8>)
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	494d      	ldr	r1, [pc, #308]	; (8001c9c <HAL_RCC_ClockConfig+0x1c8>)
 8001b66:	4313      	orrs	r3, r2
 8001b68:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f003 0301 	and.w	r3, r3, #1
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d040      	beq.n	8001bf8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	2b01      	cmp	r3, #1
 8001b7c:	d107      	bne.n	8001b8e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b7e:	4b47      	ldr	r3, [pc, #284]	; (8001c9c <HAL_RCC_ClockConfig+0x1c8>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d115      	bne.n	8001bb6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e07f      	b.n	8001c8e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	2b02      	cmp	r3, #2
 8001b94:	d107      	bne.n	8001ba6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b96:	4b41      	ldr	r3, [pc, #260]	; (8001c9c <HAL_RCC_ClockConfig+0x1c8>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d109      	bne.n	8001bb6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e073      	b.n	8001c8e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ba6:	4b3d      	ldr	r3, [pc, #244]	; (8001c9c <HAL_RCC_ClockConfig+0x1c8>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 0302 	and.w	r3, r3, #2
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d101      	bne.n	8001bb6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e06b      	b.n	8001c8e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001bb6:	4b39      	ldr	r3, [pc, #228]	; (8001c9c <HAL_RCC_ClockConfig+0x1c8>)
 8001bb8:	689b      	ldr	r3, [r3, #8]
 8001bba:	f023 0203 	bic.w	r2, r3, #3
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	4936      	ldr	r1, [pc, #216]	; (8001c9c <HAL_RCC_ClockConfig+0x1c8>)
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001bc8:	f7ff f92a 	bl	8000e20 <HAL_GetTick>
 8001bcc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bce:	e00a      	b.n	8001be6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bd0:	f7ff f926 	bl	8000e20 <HAL_GetTick>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	1ad3      	subs	r3, r2, r3
 8001bda:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d901      	bls.n	8001be6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001be2:	2303      	movs	r3, #3
 8001be4:	e053      	b.n	8001c8e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001be6:	4b2d      	ldr	r3, [pc, #180]	; (8001c9c <HAL_RCC_ClockConfig+0x1c8>)
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	f003 020c 	and.w	r2, r3, #12
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	d1eb      	bne.n	8001bd0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001bf8:	4b27      	ldr	r3, [pc, #156]	; (8001c98 <HAL_RCC_ClockConfig+0x1c4>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f003 030f 	and.w	r3, r3, #15
 8001c00:	683a      	ldr	r2, [r7, #0]
 8001c02:	429a      	cmp	r2, r3
 8001c04:	d210      	bcs.n	8001c28 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c06:	4b24      	ldr	r3, [pc, #144]	; (8001c98 <HAL_RCC_ClockConfig+0x1c4>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f023 020f 	bic.w	r2, r3, #15
 8001c0e:	4922      	ldr	r1, [pc, #136]	; (8001c98 <HAL_RCC_ClockConfig+0x1c4>)
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	4313      	orrs	r3, r2
 8001c14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c16:	4b20      	ldr	r3, [pc, #128]	; (8001c98 <HAL_RCC_ClockConfig+0x1c4>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 030f 	and.w	r3, r3, #15
 8001c1e:	683a      	ldr	r2, [r7, #0]
 8001c20:	429a      	cmp	r2, r3
 8001c22:	d001      	beq.n	8001c28 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001c24:	2301      	movs	r3, #1
 8001c26:	e032      	b.n	8001c8e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f003 0304 	and.w	r3, r3, #4
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d008      	beq.n	8001c46 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c34:	4b19      	ldr	r3, [pc, #100]	; (8001c9c <HAL_RCC_ClockConfig+0x1c8>)
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	68db      	ldr	r3, [r3, #12]
 8001c40:	4916      	ldr	r1, [pc, #88]	; (8001c9c <HAL_RCC_ClockConfig+0x1c8>)
 8001c42:	4313      	orrs	r3, r2
 8001c44:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 0308 	and.w	r3, r3, #8
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d009      	beq.n	8001c66 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001c52:	4b12      	ldr	r3, [pc, #72]	; (8001c9c <HAL_RCC_ClockConfig+0x1c8>)
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	691b      	ldr	r3, [r3, #16]
 8001c5e:	00db      	lsls	r3, r3, #3
 8001c60:	490e      	ldr	r1, [pc, #56]	; (8001c9c <HAL_RCC_ClockConfig+0x1c8>)
 8001c62:	4313      	orrs	r3, r2
 8001c64:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001c66:	f000 f821 	bl	8001cac <HAL_RCC_GetSysClockFreq>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	4b0b      	ldr	r3, [pc, #44]	; (8001c9c <HAL_RCC_ClockConfig+0x1c8>)
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	091b      	lsrs	r3, r3, #4
 8001c72:	f003 030f 	and.w	r3, r3, #15
 8001c76:	490a      	ldr	r1, [pc, #40]	; (8001ca0 <HAL_RCC_ClockConfig+0x1cc>)
 8001c78:	5ccb      	ldrb	r3, [r1, r3]
 8001c7a:	fa22 f303 	lsr.w	r3, r2, r3
 8001c7e:	4a09      	ldr	r2, [pc, #36]	; (8001ca4 <HAL_RCC_ClockConfig+0x1d0>)
 8001c80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001c82:	4b09      	ldr	r3, [pc, #36]	; (8001ca8 <HAL_RCC_ClockConfig+0x1d4>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4618      	mov	r0, r3
 8001c88:	f7ff f886 	bl	8000d98 <HAL_InitTick>

  return HAL_OK;
 8001c8c:	2300      	movs	r3, #0
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	3710      	adds	r7, #16
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	40023c00 	.word	0x40023c00
 8001c9c:	40023800 	.word	0x40023800
 8001ca0:	08004bd4 	.word	0x08004bd4
 8001ca4:	20000000 	.word	0x20000000
 8001ca8:	20000004 	.word	0x20000004

08001cac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cac:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001cb0:	b084      	sub	sp, #16
 8001cb2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	607b      	str	r3, [r7, #4]
 8001cb8:	2300      	movs	r3, #0
 8001cba:	60fb      	str	r3, [r7, #12]
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001cc4:	4b67      	ldr	r3, [pc, #412]	; (8001e64 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	f003 030c 	and.w	r3, r3, #12
 8001ccc:	2b08      	cmp	r3, #8
 8001cce:	d00d      	beq.n	8001cec <HAL_RCC_GetSysClockFreq+0x40>
 8001cd0:	2b08      	cmp	r3, #8
 8001cd2:	f200 80bd 	bhi.w	8001e50 <HAL_RCC_GetSysClockFreq+0x1a4>
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d002      	beq.n	8001ce0 <HAL_RCC_GetSysClockFreq+0x34>
 8001cda:	2b04      	cmp	r3, #4
 8001cdc:	d003      	beq.n	8001ce6 <HAL_RCC_GetSysClockFreq+0x3a>
 8001cde:	e0b7      	b.n	8001e50 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ce0:	4b61      	ldr	r3, [pc, #388]	; (8001e68 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001ce2:	60bb      	str	r3, [r7, #8]
      break;
 8001ce4:	e0b7      	b.n	8001e56 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001ce6:	4b61      	ldr	r3, [pc, #388]	; (8001e6c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001ce8:	60bb      	str	r3, [r7, #8]
      break;
 8001cea:	e0b4      	b.n	8001e56 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001cec:	4b5d      	ldr	r3, [pc, #372]	; (8001e64 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001cf4:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001cf6:	4b5b      	ldr	r3, [pc, #364]	; (8001e64 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d04d      	beq.n	8001d9e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d02:	4b58      	ldr	r3, [pc, #352]	; (8001e64 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	099b      	lsrs	r3, r3, #6
 8001d08:	461a      	mov	r2, r3
 8001d0a:	f04f 0300 	mov.w	r3, #0
 8001d0e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001d12:	f04f 0100 	mov.w	r1, #0
 8001d16:	ea02 0800 	and.w	r8, r2, r0
 8001d1a:	ea03 0901 	and.w	r9, r3, r1
 8001d1e:	4640      	mov	r0, r8
 8001d20:	4649      	mov	r1, r9
 8001d22:	f04f 0200 	mov.w	r2, #0
 8001d26:	f04f 0300 	mov.w	r3, #0
 8001d2a:	014b      	lsls	r3, r1, #5
 8001d2c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001d30:	0142      	lsls	r2, r0, #5
 8001d32:	4610      	mov	r0, r2
 8001d34:	4619      	mov	r1, r3
 8001d36:	ebb0 0008 	subs.w	r0, r0, r8
 8001d3a:	eb61 0109 	sbc.w	r1, r1, r9
 8001d3e:	f04f 0200 	mov.w	r2, #0
 8001d42:	f04f 0300 	mov.w	r3, #0
 8001d46:	018b      	lsls	r3, r1, #6
 8001d48:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001d4c:	0182      	lsls	r2, r0, #6
 8001d4e:	1a12      	subs	r2, r2, r0
 8001d50:	eb63 0301 	sbc.w	r3, r3, r1
 8001d54:	f04f 0000 	mov.w	r0, #0
 8001d58:	f04f 0100 	mov.w	r1, #0
 8001d5c:	00d9      	lsls	r1, r3, #3
 8001d5e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001d62:	00d0      	lsls	r0, r2, #3
 8001d64:	4602      	mov	r2, r0
 8001d66:	460b      	mov	r3, r1
 8001d68:	eb12 0208 	adds.w	r2, r2, r8
 8001d6c:	eb43 0309 	adc.w	r3, r3, r9
 8001d70:	f04f 0000 	mov.w	r0, #0
 8001d74:	f04f 0100 	mov.w	r1, #0
 8001d78:	0259      	lsls	r1, r3, #9
 8001d7a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001d7e:	0250      	lsls	r0, r2, #9
 8001d80:	4602      	mov	r2, r0
 8001d82:	460b      	mov	r3, r1
 8001d84:	4610      	mov	r0, r2
 8001d86:	4619      	mov	r1, r3
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	461a      	mov	r2, r3
 8001d8c:	f04f 0300 	mov.w	r3, #0
 8001d90:	f7fe faae 	bl	80002f0 <__aeabi_uldivmod>
 8001d94:	4602      	mov	r2, r0
 8001d96:	460b      	mov	r3, r1
 8001d98:	4613      	mov	r3, r2
 8001d9a:	60fb      	str	r3, [r7, #12]
 8001d9c:	e04a      	b.n	8001e34 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d9e:	4b31      	ldr	r3, [pc, #196]	; (8001e64 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	099b      	lsrs	r3, r3, #6
 8001da4:	461a      	mov	r2, r3
 8001da6:	f04f 0300 	mov.w	r3, #0
 8001daa:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001dae:	f04f 0100 	mov.w	r1, #0
 8001db2:	ea02 0400 	and.w	r4, r2, r0
 8001db6:	ea03 0501 	and.w	r5, r3, r1
 8001dba:	4620      	mov	r0, r4
 8001dbc:	4629      	mov	r1, r5
 8001dbe:	f04f 0200 	mov.w	r2, #0
 8001dc2:	f04f 0300 	mov.w	r3, #0
 8001dc6:	014b      	lsls	r3, r1, #5
 8001dc8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001dcc:	0142      	lsls	r2, r0, #5
 8001dce:	4610      	mov	r0, r2
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	1b00      	subs	r0, r0, r4
 8001dd4:	eb61 0105 	sbc.w	r1, r1, r5
 8001dd8:	f04f 0200 	mov.w	r2, #0
 8001ddc:	f04f 0300 	mov.w	r3, #0
 8001de0:	018b      	lsls	r3, r1, #6
 8001de2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001de6:	0182      	lsls	r2, r0, #6
 8001de8:	1a12      	subs	r2, r2, r0
 8001dea:	eb63 0301 	sbc.w	r3, r3, r1
 8001dee:	f04f 0000 	mov.w	r0, #0
 8001df2:	f04f 0100 	mov.w	r1, #0
 8001df6:	00d9      	lsls	r1, r3, #3
 8001df8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001dfc:	00d0      	lsls	r0, r2, #3
 8001dfe:	4602      	mov	r2, r0
 8001e00:	460b      	mov	r3, r1
 8001e02:	1912      	adds	r2, r2, r4
 8001e04:	eb45 0303 	adc.w	r3, r5, r3
 8001e08:	f04f 0000 	mov.w	r0, #0
 8001e0c:	f04f 0100 	mov.w	r1, #0
 8001e10:	0299      	lsls	r1, r3, #10
 8001e12:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001e16:	0290      	lsls	r0, r2, #10
 8001e18:	4602      	mov	r2, r0
 8001e1a:	460b      	mov	r3, r1
 8001e1c:	4610      	mov	r0, r2
 8001e1e:	4619      	mov	r1, r3
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	461a      	mov	r2, r3
 8001e24:	f04f 0300 	mov.w	r3, #0
 8001e28:	f7fe fa62 	bl	80002f0 <__aeabi_uldivmod>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	460b      	mov	r3, r1
 8001e30:	4613      	mov	r3, r2
 8001e32:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001e34:	4b0b      	ldr	r3, [pc, #44]	; (8001e64 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	0c1b      	lsrs	r3, r3, #16
 8001e3a:	f003 0303 	and.w	r3, r3, #3
 8001e3e:	3301      	adds	r3, #1
 8001e40:	005b      	lsls	r3, r3, #1
 8001e42:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8001e44:	68fa      	ldr	r2, [r7, #12]
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e4c:	60bb      	str	r3, [r7, #8]
      break;
 8001e4e:	e002      	b.n	8001e56 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e50:	4b05      	ldr	r3, [pc, #20]	; (8001e68 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001e52:	60bb      	str	r3, [r7, #8]
      break;
 8001e54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e56:	68bb      	ldr	r3, [r7, #8]
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	3710      	adds	r7, #16
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001e62:	bf00      	nop
 8001e64:	40023800 	.word	0x40023800
 8001e68:	00f42400 	.word	0x00f42400
 8001e6c:	007a1200 	.word	0x007a1200

08001e70 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e74:	4b03      	ldr	r3, [pc, #12]	; (8001e84 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e76:	681b      	ldr	r3, [r3, #0]
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr
 8001e82:	bf00      	nop
 8001e84:	20000000 	.word	0x20000000

08001e88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001e8c:	f7ff fff0 	bl	8001e70 <HAL_RCC_GetHCLKFreq>
 8001e90:	4602      	mov	r2, r0
 8001e92:	4b05      	ldr	r3, [pc, #20]	; (8001ea8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	0a9b      	lsrs	r3, r3, #10
 8001e98:	f003 0307 	and.w	r3, r3, #7
 8001e9c:	4903      	ldr	r1, [pc, #12]	; (8001eac <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e9e:	5ccb      	ldrb	r3, [r1, r3]
 8001ea0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	40023800 	.word	0x40023800
 8001eac:	08004be4 	.word	0x08004be4

08001eb0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001eb4:	f7ff ffdc 	bl	8001e70 <HAL_RCC_GetHCLKFreq>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	4b05      	ldr	r3, [pc, #20]	; (8001ed0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	0b5b      	lsrs	r3, r3, #13
 8001ec0:	f003 0307 	and.w	r3, r3, #7
 8001ec4:	4903      	ldr	r1, [pc, #12]	; (8001ed4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ec6:	5ccb      	ldrb	r3, [r1, r3]
 8001ec8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	40023800 	.word	0x40023800
 8001ed4:	08004be4 	.word	0x08004be4

08001ed8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b088      	sub	sp, #32
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001eec:	2300      	movs	r3, #0
 8001eee:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f003 0301 	and.w	r3, r3, #1
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d012      	beq.n	8001f26 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001f00:	4b69      	ldr	r3, [pc, #420]	; (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	4a68      	ldr	r2, [pc, #416]	; (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f06:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001f0a:	6093      	str	r3, [r2, #8]
 8001f0c:	4b66      	ldr	r3, [pc, #408]	; (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f0e:	689a      	ldr	r2, [r3, #8]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f14:	4964      	ldr	r1, [pc, #400]	; (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f16:	4313      	orrs	r3, r2
 8001f18:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d101      	bne.n	8001f26 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001f22:	2301      	movs	r3, #1
 8001f24:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d017      	beq.n	8001f62 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001f32:	4b5d      	ldr	r3, [pc, #372]	; (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f38:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f40:	4959      	ldr	r1, [pc, #356]	; (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f42:	4313      	orrs	r3, r2
 8001f44:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f4c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001f50:	d101      	bne.n	8001f56 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8001f52:	2301      	movs	r3, #1
 8001f54:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d101      	bne.n	8001f62 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d017      	beq.n	8001f9e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001f6e:	4b4e      	ldr	r3, [pc, #312]	; (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f74:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7c:	494a      	ldr	r1, [pc, #296]	; (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f88:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f8c:	d101      	bne.n	8001f92 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d101      	bne.n	8001f9e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d001      	beq.n	8001fae <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8001faa:	2301      	movs	r3, #1
 8001fac:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 0320 	and.w	r3, r3, #32
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	f000 808b 	beq.w	80020d2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001fbc:	4b3a      	ldr	r3, [pc, #232]	; (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc0:	4a39      	ldr	r2, [pc, #228]	; (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fc6:	6413      	str	r3, [r2, #64]	; 0x40
 8001fc8:	4b37      	ldr	r3, [pc, #220]	; (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fd0:	60bb      	str	r3, [r7, #8]
 8001fd2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001fd4:	4b35      	ldr	r3, [pc, #212]	; (80020ac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a34      	ldr	r2, [pc, #208]	; (80020ac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001fda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fde:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001fe0:	f7fe ff1e 	bl	8000e20 <HAL_GetTick>
 8001fe4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001fe6:	e008      	b.n	8001ffa <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fe8:	f7fe ff1a 	bl	8000e20 <HAL_GetTick>
 8001fec:	4602      	mov	r2, r0
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	1ad3      	subs	r3, r2, r3
 8001ff2:	2b64      	cmp	r3, #100	; 0x64
 8001ff4:	d901      	bls.n	8001ffa <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	e38f      	b.n	800271a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001ffa:	4b2c      	ldr	r3, [pc, #176]	; (80020ac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002002:	2b00      	cmp	r3, #0
 8002004:	d0f0      	beq.n	8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002006:	4b28      	ldr	r3, [pc, #160]	; (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002008:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800200a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800200e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002010:	693b      	ldr	r3, [r7, #16]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d035      	beq.n	8002082 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800201e:	693a      	ldr	r2, [r7, #16]
 8002020:	429a      	cmp	r2, r3
 8002022:	d02e      	beq.n	8002082 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002024:	4b20      	ldr	r3, [pc, #128]	; (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002026:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002028:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800202c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800202e:	4b1e      	ldr	r3, [pc, #120]	; (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002030:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002032:	4a1d      	ldr	r2, [pc, #116]	; (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002034:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002038:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800203a:	4b1b      	ldr	r3, [pc, #108]	; (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800203c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800203e:	4a1a      	ldr	r2, [pc, #104]	; (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002040:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002044:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002046:	4a18      	ldr	r2, [pc, #96]	; (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800204c:	4b16      	ldr	r3, [pc, #88]	; (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800204e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002050:	f003 0301 	and.w	r3, r3, #1
 8002054:	2b01      	cmp	r3, #1
 8002056:	d114      	bne.n	8002082 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002058:	f7fe fee2 	bl	8000e20 <HAL_GetTick>
 800205c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800205e:	e00a      	b.n	8002076 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002060:	f7fe fede 	bl	8000e20 <HAL_GetTick>
 8002064:	4602      	mov	r2, r0
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	1ad3      	subs	r3, r2, r3
 800206a:	f241 3288 	movw	r2, #5000	; 0x1388
 800206e:	4293      	cmp	r3, r2
 8002070:	d901      	bls.n	8002076 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002072:	2303      	movs	r3, #3
 8002074:	e351      	b.n	800271a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002076:	4b0c      	ldr	r3, [pc, #48]	; (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002078:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800207a:	f003 0302 	and.w	r3, r3, #2
 800207e:	2b00      	cmp	r3, #0
 8002080:	d0ee      	beq.n	8002060 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002086:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800208a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800208e:	d111      	bne.n	80020b4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002090:	4b05      	ldr	r3, [pc, #20]	; (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800209c:	4b04      	ldr	r3, [pc, #16]	; (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800209e:	400b      	ands	r3, r1
 80020a0:	4901      	ldr	r1, [pc, #4]	; (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020a2:	4313      	orrs	r3, r2
 80020a4:	608b      	str	r3, [r1, #8]
 80020a6:	e00b      	b.n	80020c0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80020a8:	40023800 	.word	0x40023800
 80020ac:	40007000 	.word	0x40007000
 80020b0:	0ffffcff 	.word	0x0ffffcff
 80020b4:	4bb3      	ldr	r3, [pc, #716]	; (8002384 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	4ab2      	ldr	r2, [pc, #712]	; (8002384 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80020ba:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80020be:	6093      	str	r3, [r2, #8]
 80020c0:	4bb0      	ldr	r3, [pc, #704]	; (8002384 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80020c2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020cc:	49ad      	ldr	r1, [pc, #692]	; (8002384 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80020ce:	4313      	orrs	r3, r2
 80020d0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 0310 	and.w	r3, r3, #16
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d010      	beq.n	8002100 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80020de:	4ba9      	ldr	r3, [pc, #676]	; (8002384 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80020e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80020e4:	4aa7      	ldr	r2, [pc, #668]	; (8002384 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80020e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80020ea:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80020ee:	4ba5      	ldr	r3, [pc, #660]	; (8002384 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80020f0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020f8:	49a2      	ldr	r1, [pc, #648]	; (8002384 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80020fa:	4313      	orrs	r3, r2
 80020fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002108:	2b00      	cmp	r3, #0
 800210a:	d00a      	beq.n	8002122 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800210c:	4b9d      	ldr	r3, [pc, #628]	; (8002384 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800210e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002112:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800211a:	499a      	ldr	r1, [pc, #616]	; (8002384 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800211c:	4313      	orrs	r3, r2
 800211e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800212a:	2b00      	cmp	r3, #0
 800212c:	d00a      	beq.n	8002144 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800212e:	4b95      	ldr	r3, [pc, #596]	; (8002384 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002130:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002134:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800213c:	4991      	ldr	r1, [pc, #580]	; (8002384 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800213e:	4313      	orrs	r3, r2
 8002140:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800214c:	2b00      	cmp	r3, #0
 800214e:	d00a      	beq.n	8002166 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002150:	4b8c      	ldr	r3, [pc, #560]	; (8002384 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002152:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002156:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800215e:	4989      	ldr	r1, [pc, #548]	; (8002384 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002160:	4313      	orrs	r3, r2
 8002162:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800216e:	2b00      	cmp	r3, #0
 8002170:	d00a      	beq.n	8002188 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002172:	4b84      	ldr	r3, [pc, #528]	; (8002384 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002174:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002178:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002180:	4980      	ldr	r1, [pc, #512]	; (8002384 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002182:	4313      	orrs	r3, r2
 8002184:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002190:	2b00      	cmp	r3, #0
 8002192:	d00a      	beq.n	80021aa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002194:	4b7b      	ldr	r3, [pc, #492]	; (8002384 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002196:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800219a:	f023 0203 	bic.w	r2, r3, #3
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021a2:	4978      	ldr	r1, [pc, #480]	; (8002384 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80021a4:	4313      	orrs	r3, r2
 80021a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d00a      	beq.n	80021cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80021b6:	4b73      	ldr	r3, [pc, #460]	; (8002384 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80021b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021bc:	f023 020c 	bic.w	r2, r3, #12
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021c4:	496f      	ldr	r1, [pc, #444]	; (8002384 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80021c6:	4313      	orrs	r3, r2
 80021c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d00a      	beq.n	80021ee <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80021d8:	4b6a      	ldr	r3, [pc, #424]	; (8002384 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80021da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021de:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021e6:	4967      	ldr	r1, [pc, #412]	; (8002384 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80021e8:	4313      	orrs	r3, r2
 80021ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d00a      	beq.n	8002210 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80021fa:	4b62      	ldr	r3, [pc, #392]	; (8002384 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80021fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002200:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002208:	495e      	ldr	r1, [pc, #376]	; (8002384 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800220a:	4313      	orrs	r3, r2
 800220c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002218:	2b00      	cmp	r3, #0
 800221a:	d00a      	beq.n	8002232 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800221c:	4b59      	ldr	r3, [pc, #356]	; (8002384 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800221e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002222:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800222a:	4956      	ldr	r1, [pc, #344]	; (8002384 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800222c:	4313      	orrs	r3, r2
 800222e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800223a:	2b00      	cmp	r3, #0
 800223c:	d00a      	beq.n	8002254 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800223e:	4b51      	ldr	r3, [pc, #324]	; (8002384 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002240:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002244:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800224c:	494d      	ldr	r1, [pc, #308]	; (8002384 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800224e:	4313      	orrs	r3, r2
 8002250:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800225c:	2b00      	cmp	r3, #0
 800225e:	d00a      	beq.n	8002276 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002260:	4b48      	ldr	r3, [pc, #288]	; (8002384 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002262:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002266:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800226e:	4945      	ldr	r1, [pc, #276]	; (8002384 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002270:	4313      	orrs	r3, r2
 8002272:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800227e:	2b00      	cmp	r3, #0
 8002280:	d00a      	beq.n	8002298 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002282:	4b40      	ldr	r3, [pc, #256]	; (8002384 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002284:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002288:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002290:	493c      	ldr	r1, [pc, #240]	; (8002384 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002292:	4313      	orrs	r3, r2
 8002294:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d00a      	beq.n	80022ba <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80022a4:	4b37      	ldr	r3, [pc, #220]	; (8002384 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80022a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022aa:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80022b2:	4934      	ldr	r1, [pc, #208]	; (8002384 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80022b4:	4313      	orrs	r3, r2
 80022b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d011      	beq.n	80022ea <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80022c6:	4b2f      	ldr	r3, [pc, #188]	; (8002384 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80022c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022cc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80022d4:	492b      	ldr	r1, [pc, #172]	; (8002384 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80022d6:	4313      	orrs	r3, r2
 80022d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80022e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80022e4:	d101      	bne.n	80022ea <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80022e6:	2301      	movs	r3, #1
 80022e8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 0308 	and.w	r3, r3, #8
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d001      	beq.n	80022fa <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80022f6:	2301      	movs	r3, #1
 80022f8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002302:	2b00      	cmp	r3, #0
 8002304:	d00a      	beq.n	800231c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002306:	4b1f      	ldr	r3, [pc, #124]	; (8002384 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002308:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800230c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002314:	491b      	ldr	r1, [pc, #108]	; (8002384 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002316:	4313      	orrs	r3, r2
 8002318:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002324:	2b00      	cmp	r3, #0
 8002326:	d00b      	beq.n	8002340 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002328:	4b16      	ldr	r3, [pc, #88]	; (8002384 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800232a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800232e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002338:	4912      	ldr	r1, [pc, #72]	; (8002384 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800233a:	4313      	orrs	r3, r2
 800233c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002348:	2b00      	cmp	r3, #0
 800234a:	d00b      	beq.n	8002364 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800234c:	4b0d      	ldr	r3, [pc, #52]	; (8002384 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800234e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002352:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800235c:	4909      	ldr	r1, [pc, #36]	; (8002384 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800235e:	4313      	orrs	r3, r2
 8002360:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800236c:	2b00      	cmp	r3, #0
 800236e:	d00f      	beq.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002370:	4b04      	ldr	r3, [pc, #16]	; (8002384 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002372:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002376:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002380:	e002      	b.n	8002388 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8002382:	bf00      	nop
 8002384:	40023800 	.word	0x40023800
 8002388:	4986      	ldr	r1, [pc, #536]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800238a:	4313      	orrs	r3, r2
 800238c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002398:	2b00      	cmp	r3, #0
 800239a:	d00b      	beq.n	80023b4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800239c:	4b81      	ldr	r3, [pc, #516]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800239e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80023a2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80023ac:	497d      	ldr	r1, [pc, #500]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023ae:	4313      	orrs	r3, r2
 80023b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80023b4:	69fb      	ldr	r3, [r7, #28]
 80023b6:	2b01      	cmp	r3, #1
 80023b8:	d006      	beq.n	80023c8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	f000 80d6 	beq.w	8002574 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80023c8:	4b76      	ldr	r3, [pc, #472]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a75      	ldr	r2, [pc, #468]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023ce:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80023d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023d4:	f7fe fd24 	bl	8000e20 <HAL_GetTick>
 80023d8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80023da:	e008      	b.n	80023ee <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80023dc:	f7fe fd20 	bl	8000e20 <HAL_GetTick>
 80023e0:	4602      	mov	r2, r0
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	2b64      	cmp	r3, #100	; 0x64
 80023e8:	d901      	bls.n	80023ee <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80023ea:	2303      	movs	r3, #3
 80023ec:	e195      	b.n	800271a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80023ee:	4b6d      	ldr	r3, [pc, #436]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d1f0      	bne.n	80023dc <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 0301 	and.w	r3, r3, #1
 8002402:	2b00      	cmp	r3, #0
 8002404:	d021      	beq.n	800244a <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800240a:	2b00      	cmp	r3, #0
 800240c:	d11d      	bne.n	800244a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800240e:	4b65      	ldr	r3, [pc, #404]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002410:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002414:	0c1b      	lsrs	r3, r3, #16
 8002416:	f003 0303 	and.w	r3, r3, #3
 800241a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800241c:	4b61      	ldr	r3, [pc, #388]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800241e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002422:	0e1b      	lsrs	r3, r3, #24
 8002424:	f003 030f 	and.w	r3, r3, #15
 8002428:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	019a      	lsls	r2, r3, #6
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	041b      	lsls	r3, r3, #16
 8002434:	431a      	orrs	r2, r3
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	061b      	lsls	r3, r3, #24
 800243a:	431a      	orrs	r2, r3
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	071b      	lsls	r3, r3, #28
 8002442:	4958      	ldr	r1, [pc, #352]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002444:	4313      	orrs	r3, r2
 8002446:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002452:	2b00      	cmp	r3, #0
 8002454:	d004      	beq.n	8002460 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800245a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800245e:	d00a      	beq.n	8002476 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002468:	2b00      	cmp	r3, #0
 800246a:	d02e      	beq.n	80024ca <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002470:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002474:	d129      	bne.n	80024ca <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002476:	4b4b      	ldr	r3, [pc, #300]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002478:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800247c:	0c1b      	lsrs	r3, r3, #16
 800247e:	f003 0303 	and.w	r3, r3, #3
 8002482:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002484:	4b47      	ldr	r3, [pc, #284]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002486:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800248a:	0f1b      	lsrs	r3, r3, #28
 800248c:	f003 0307 	and.w	r3, r3, #7
 8002490:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	019a      	lsls	r2, r3, #6
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	041b      	lsls	r3, r3, #16
 800249c:	431a      	orrs	r2, r3
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	68db      	ldr	r3, [r3, #12]
 80024a2:	061b      	lsls	r3, r3, #24
 80024a4:	431a      	orrs	r2, r3
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	071b      	lsls	r3, r3, #28
 80024aa:	493e      	ldr	r1, [pc, #248]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024ac:	4313      	orrs	r3, r2
 80024ae:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80024b2:	4b3c      	ldr	r3, [pc, #240]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80024b8:	f023 021f 	bic.w	r2, r3, #31
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c0:	3b01      	subs	r3, #1
 80024c2:	4938      	ldr	r1, [pc, #224]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024c4:	4313      	orrs	r3, r2
 80024c6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d01d      	beq.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80024d6:	4b33      	ldr	r3, [pc, #204]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80024dc:	0e1b      	lsrs	r3, r3, #24
 80024de:	f003 030f 	and.w	r3, r3, #15
 80024e2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80024e4:	4b2f      	ldr	r3, [pc, #188]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80024ea:	0f1b      	lsrs	r3, r3, #28
 80024ec:	f003 0307 	and.w	r3, r3, #7
 80024f0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	019a      	lsls	r2, r3, #6
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	691b      	ldr	r3, [r3, #16]
 80024fc:	041b      	lsls	r3, r3, #16
 80024fe:	431a      	orrs	r2, r3
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	061b      	lsls	r3, r3, #24
 8002504:	431a      	orrs	r2, r3
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	071b      	lsls	r3, r3, #28
 800250a:	4926      	ldr	r1, [pc, #152]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800250c:	4313      	orrs	r3, r2
 800250e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d011      	beq.n	8002542 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	019a      	lsls	r2, r3, #6
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	691b      	ldr	r3, [r3, #16]
 8002528:	041b      	lsls	r3, r3, #16
 800252a:	431a      	orrs	r2, r3
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	061b      	lsls	r3, r3, #24
 8002532:	431a      	orrs	r2, r3
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	071b      	lsls	r3, r3, #28
 800253a:	491a      	ldr	r1, [pc, #104]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800253c:	4313      	orrs	r3, r2
 800253e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002542:	4b18      	ldr	r3, [pc, #96]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a17      	ldr	r2, [pc, #92]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002548:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800254c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800254e:	f7fe fc67 	bl	8000e20 <HAL_GetTick>
 8002552:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002554:	e008      	b.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002556:	f7fe fc63 	bl	8000e20 <HAL_GetTick>
 800255a:	4602      	mov	r2, r0
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	1ad3      	subs	r3, r2, r3
 8002560:	2b64      	cmp	r3, #100	; 0x64
 8002562:	d901      	bls.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002564:	2303      	movs	r3, #3
 8002566:	e0d8      	b.n	800271a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002568:	4b0e      	ldr	r3, [pc, #56]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002570:	2b00      	cmp	r3, #0
 8002572:	d0f0      	beq.n	8002556 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002574:	69bb      	ldr	r3, [r7, #24]
 8002576:	2b01      	cmp	r3, #1
 8002578:	f040 80ce 	bne.w	8002718 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800257c:	4b09      	ldr	r3, [pc, #36]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a08      	ldr	r2, [pc, #32]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002582:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002586:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002588:	f7fe fc4a 	bl	8000e20 <HAL_GetTick>
 800258c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800258e:	e00b      	b.n	80025a8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002590:	f7fe fc46 	bl	8000e20 <HAL_GetTick>
 8002594:	4602      	mov	r2, r0
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	1ad3      	subs	r3, r2, r3
 800259a:	2b64      	cmp	r3, #100	; 0x64
 800259c:	d904      	bls.n	80025a8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800259e:	2303      	movs	r3, #3
 80025a0:	e0bb      	b.n	800271a <HAL_RCCEx_PeriphCLKConfig+0x842>
 80025a2:	bf00      	nop
 80025a4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80025a8:	4b5e      	ldr	r3, [pc, #376]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80025b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80025b4:	d0ec      	beq.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d003      	beq.n	80025ca <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d009      	beq.n	80025de <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d02e      	beq.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d12a      	bne.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80025de:	4b51      	ldr	r3, [pc, #324]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80025e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025e4:	0c1b      	lsrs	r3, r3, #16
 80025e6:	f003 0303 	and.w	r3, r3, #3
 80025ea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80025ec:	4b4d      	ldr	r3, [pc, #308]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80025ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025f2:	0f1b      	lsrs	r3, r3, #28
 80025f4:	f003 0307 	and.w	r3, r3, #7
 80025f8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	695b      	ldr	r3, [r3, #20]
 80025fe:	019a      	lsls	r2, r3, #6
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	041b      	lsls	r3, r3, #16
 8002604:	431a      	orrs	r2, r3
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	699b      	ldr	r3, [r3, #24]
 800260a:	061b      	lsls	r3, r3, #24
 800260c:	431a      	orrs	r2, r3
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	071b      	lsls	r3, r3, #28
 8002612:	4944      	ldr	r1, [pc, #272]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002614:	4313      	orrs	r3, r2
 8002616:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800261a:	4b42      	ldr	r3, [pc, #264]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800261c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002620:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002628:	3b01      	subs	r3, #1
 800262a:	021b      	lsls	r3, r3, #8
 800262c:	493d      	ldr	r1, [pc, #244]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800262e:	4313      	orrs	r3, r2
 8002630:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800263c:	2b00      	cmp	r3, #0
 800263e:	d022      	beq.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002644:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002648:	d11d      	bne.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800264a:	4b36      	ldr	r3, [pc, #216]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800264c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002650:	0e1b      	lsrs	r3, r3, #24
 8002652:	f003 030f 	and.w	r3, r3, #15
 8002656:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002658:	4b32      	ldr	r3, [pc, #200]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800265a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800265e:	0f1b      	lsrs	r3, r3, #28
 8002660:	f003 0307 	and.w	r3, r3, #7
 8002664:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	695b      	ldr	r3, [r3, #20]
 800266a:	019a      	lsls	r2, r3, #6
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6a1b      	ldr	r3, [r3, #32]
 8002670:	041b      	lsls	r3, r3, #16
 8002672:	431a      	orrs	r2, r3
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	061b      	lsls	r3, r3, #24
 8002678:	431a      	orrs	r2, r3
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	071b      	lsls	r3, r3, #28
 800267e:	4929      	ldr	r1, [pc, #164]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002680:	4313      	orrs	r3, r2
 8002682:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 0308 	and.w	r3, r3, #8
 800268e:	2b00      	cmp	r3, #0
 8002690:	d028      	beq.n	80026e4 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002692:	4b24      	ldr	r3, [pc, #144]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002694:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002698:	0e1b      	lsrs	r3, r3, #24
 800269a:	f003 030f 	and.w	r3, r3, #15
 800269e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80026a0:	4b20      	ldr	r3, [pc, #128]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80026a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026a6:	0c1b      	lsrs	r3, r3, #16
 80026a8:	f003 0303 	and.w	r3, r3, #3
 80026ac:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	695b      	ldr	r3, [r3, #20]
 80026b2:	019a      	lsls	r2, r3, #6
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	041b      	lsls	r3, r3, #16
 80026b8:	431a      	orrs	r2, r3
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	061b      	lsls	r3, r3, #24
 80026be:	431a      	orrs	r2, r3
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	69db      	ldr	r3, [r3, #28]
 80026c4:	071b      	lsls	r3, r3, #28
 80026c6:	4917      	ldr	r1, [pc, #92]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80026c8:	4313      	orrs	r3, r2
 80026ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80026ce:	4b15      	ldr	r3, [pc, #84]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80026d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80026d4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026dc:	4911      	ldr	r1, [pc, #68]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80026de:	4313      	orrs	r3, r2
 80026e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80026e4:	4b0f      	ldr	r3, [pc, #60]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a0e      	ldr	r2, [pc, #56]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80026ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026f0:	f7fe fb96 	bl	8000e20 <HAL_GetTick>
 80026f4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80026f6:	e008      	b.n	800270a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80026f8:	f7fe fb92 	bl	8000e20 <HAL_GetTick>
 80026fc:	4602      	mov	r2, r0
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	1ad3      	subs	r3, r2, r3
 8002702:	2b64      	cmp	r3, #100	; 0x64
 8002704:	d901      	bls.n	800270a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002706:	2303      	movs	r3, #3
 8002708:	e007      	b.n	800271a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800270a:	4b06      	ldr	r3, [pc, #24]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002712:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002716:	d1ef      	bne.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8002718:	2300      	movs	r3, #0
}
 800271a:	4618      	mov	r0, r3
 800271c:	3720      	adds	r7, #32
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}
 8002722:	bf00      	nop
 8002724:	40023800 	.word	0x40023800

08002728 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b082      	sub	sp, #8
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d101      	bne.n	800273a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e040      	b.n	80027bc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800273e:	2b00      	cmp	r3, #0
 8002740:	d106      	bne.n	8002750 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2200      	movs	r2, #0
 8002746:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	f7fe f9cc 	bl	8000ae8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2224      	movs	r2, #36	; 0x24
 8002754:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f022 0201 	bic.w	r2, r2, #1
 8002764:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	f000 fbe8 	bl	8002f3c <UART_SetConfig>
 800276c:	4603      	mov	r3, r0
 800276e:	2b01      	cmp	r3, #1
 8002770:	d101      	bne.n	8002776 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	e022      	b.n	80027bc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800277a:	2b00      	cmp	r3, #0
 800277c:	d002      	beq.n	8002784 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	f000 fe3e 	bl	8003400 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	685a      	ldr	r2, [r3, #4]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002792:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	689a      	ldr	r2, [r3, #8]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80027a2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f042 0201 	orr.w	r2, r2, #1
 80027b2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80027b4:	6878      	ldr	r0, [r7, #4]
 80027b6:	f000 fec5 	bl	8003544 <UART_CheckIdleState>
 80027ba:	4603      	mov	r3, r0
}
 80027bc:	4618      	mov	r0, r3
 80027be:	3708      	adds	r7, #8
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}

080027c4 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b08b      	sub	sp, #44	; 0x2c
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	60f8      	str	r0, [r7, #12]
 80027cc:	60b9      	str	r1, [r7, #8]
 80027ce:	4613      	mov	r3, r2
 80027d0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80027d6:	2b20      	cmp	r3, #32
 80027d8:	d156      	bne.n	8002888 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d002      	beq.n	80027e6 <HAL_UART_Transmit_IT+0x22>
 80027e0:	88fb      	ldrh	r3, [r7, #6]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d101      	bne.n	80027ea <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e04f      	b.n	800288a <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d101      	bne.n	80027f8 <HAL_UART_Transmit_IT+0x34>
 80027f4:	2302      	movs	r3, #2
 80027f6:	e048      	b.n	800288a <HAL_UART_Transmit_IT+0xc6>
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	2201      	movs	r2, #1
 80027fc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	68ba      	ldr	r2, [r7, #8]
 8002804:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	88fa      	ldrh	r2, [r7, #6]
 800280a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	88fa      	ldrh	r2, [r7, #6]
 8002812:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	2200      	movs	r2, #0
 800281a:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2200      	movs	r2, #0
 8002820:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	2221      	movs	r2, #33	; 0x21
 8002828:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002832:	d107      	bne.n	8002844 <HAL_UART_Transmit_IT+0x80>
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	691b      	ldr	r3, [r3, #16]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d103      	bne.n	8002844 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	4a16      	ldr	r2, [pc, #88]	; (8002898 <HAL_UART_Transmit_IT+0xd4>)
 8002840:	669a      	str	r2, [r3, #104]	; 0x68
 8002842:	e002      	b.n	800284a <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	4a15      	ldr	r2, [pc, #84]	; (800289c <HAL_UART_Transmit_IT+0xd8>)
 8002848:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	2200      	movs	r2, #0
 800284e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	e853 3f00 	ldrex	r3, [r3]
 800285e:	613b      	str	r3, [r7, #16]
   return(result);
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002866:	627b      	str	r3, [r7, #36]	; 0x24
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	461a      	mov	r2, r3
 800286e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002870:	623b      	str	r3, [r7, #32]
 8002872:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002874:	69f9      	ldr	r1, [r7, #28]
 8002876:	6a3a      	ldr	r2, [r7, #32]
 8002878:	e841 2300 	strex	r3, r2, [r1]
 800287c:	61bb      	str	r3, [r7, #24]
   return(result);
 800287e:	69bb      	ldr	r3, [r7, #24]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d1e6      	bne.n	8002852 <HAL_UART_Transmit_IT+0x8e>

    return HAL_OK;
 8002884:	2300      	movs	r3, #0
 8002886:	e000      	b.n	800288a <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 8002888:	2302      	movs	r3, #2
  }
}
 800288a:	4618      	mov	r0, r3
 800288c:	372c      	adds	r7, #44	; 0x2c
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr
 8002896:	bf00      	nop
 8002898:	08003a9d 	.word	0x08003a9d
 800289c:	080039e7 	.word	0x080039e7

080028a0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b08a      	sub	sp, #40	; 0x28
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	60f8      	str	r0, [r7, #12]
 80028a8:	60b9      	str	r1, [r7, #8]
 80028aa:	4613      	mov	r3, r2
 80028ac:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80028b2:	2b20      	cmp	r3, #32
 80028b4:	d13d      	bne.n	8002932 <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d002      	beq.n	80028c2 <HAL_UART_Receive_IT+0x22>
 80028bc:	88fb      	ldrh	r3, [r7, #6]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d101      	bne.n	80028c6 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e036      	b.n	8002934 <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80028cc:	2b01      	cmp	r3, #1
 80028ce:	d101      	bne.n	80028d4 <HAL_UART_Receive_IT+0x34>
 80028d0:	2302      	movs	r3, #2
 80028d2:	e02f      	b.n	8002934 <HAL_UART_Receive_IT+0x94>
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	2201      	movs	r2, #1
 80028d8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	2200      	movs	r2, #0
 80028e0:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d018      	beq.n	8002922 <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	e853 3f00 	ldrex	r3, [r3]
 80028fc:	613b      	str	r3, [r7, #16]
   return(result);
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002904:	627b      	str	r3, [r7, #36]	; 0x24
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	461a      	mov	r2, r3
 800290c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800290e:	623b      	str	r3, [r7, #32]
 8002910:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002912:	69f9      	ldr	r1, [r7, #28]
 8002914:	6a3a      	ldr	r2, [r7, #32]
 8002916:	e841 2300 	strex	r3, r2, [r1]
 800291a:	61bb      	str	r3, [r7, #24]
   return(result);
 800291c:	69bb      	ldr	r3, [r7, #24]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d1e6      	bne.n	80028f0 <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002922:	88fb      	ldrh	r3, [r7, #6]
 8002924:	461a      	mov	r2, r3
 8002926:	68b9      	ldr	r1, [r7, #8]
 8002928:	68f8      	ldr	r0, [r7, #12]
 800292a:	f000 ff19 	bl	8003760 <UART_Start_Receive_IT>
 800292e:	4603      	mov	r3, r0
 8002930:	e000      	b.n	8002934 <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002932:	2302      	movs	r3, #2
  }
}
 8002934:	4618      	mov	r0, r3
 8002936:	3728      	adds	r7, #40	; 0x28
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}

0800293c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b0ba      	sub	sp, #232	; 0xe8
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	69db      	ldr	r3, [r3, #28]
 800294a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002962:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002966:	f640 030f 	movw	r3, #2063	; 0x80f
 800296a:	4013      	ands	r3, r2
 800296c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002970:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002974:	2b00      	cmp	r3, #0
 8002976:	d115      	bne.n	80029a4 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002978:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800297c:	f003 0320 	and.w	r3, r3, #32
 8002980:	2b00      	cmp	r3, #0
 8002982:	d00f      	beq.n	80029a4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002984:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002988:	f003 0320 	and.w	r3, r3, #32
 800298c:	2b00      	cmp	r3, #0
 800298e:	d009      	beq.n	80029a4 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002994:	2b00      	cmp	r3, #0
 8002996:	f000 82a4 	beq.w	8002ee2 <HAL_UART_IRQHandler+0x5a6>
      {
        huart->RxISR(huart);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	4798      	blx	r3
      }
      return;
 80029a2:	e29e      	b.n	8002ee2 <HAL_UART_IRQHandler+0x5a6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80029a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	f000 8117 	beq.w	8002bdc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80029ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80029b2:	f003 0301 	and.w	r3, r3, #1
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d106      	bne.n	80029c8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80029ba:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80029be:	4b85      	ldr	r3, [pc, #532]	; (8002bd4 <HAL_UART_IRQHandler+0x298>)
 80029c0:	4013      	ands	r3, r2
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	f000 810a 	beq.w	8002bdc <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80029c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029cc:	f003 0301 	and.w	r3, r3, #1
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d011      	beq.n	80029f8 <HAL_UART_IRQHandler+0xbc>
 80029d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d00b      	beq.n	80029f8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	2201      	movs	r2, #1
 80029e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80029ee:	f043 0201 	orr.w	r2, r3, #1
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80029f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029fc:	f003 0302 	and.w	r3, r3, #2
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d011      	beq.n	8002a28 <HAL_UART_IRQHandler+0xec>
 8002a04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a08:	f003 0301 	and.w	r3, r3, #1
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d00b      	beq.n	8002a28 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	2202      	movs	r2, #2
 8002a16:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a1e:	f043 0204 	orr.w	r2, r3, #4
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002a28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a2c:	f003 0304 	and.w	r3, r3, #4
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d011      	beq.n	8002a58 <HAL_UART_IRQHandler+0x11c>
 8002a34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a38:	f003 0301 	and.w	r3, r3, #1
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d00b      	beq.n	8002a58 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	2204      	movs	r2, #4
 8002a46:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a4e:	f043 0202 	orr.w	r2, r3, #2
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002a58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a5c:	f003 0308 	and.w	r3, r3, #8
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d017      	beq.n	8002a94 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002a64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a68:	f003 0320 	and.w	r3, r3, #32
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d105      	bne.n	8002a7c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002a70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a74:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d00b      	beq.n	8002a94 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	2208      	movs	r2, #8
 8002a82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a8a:	f043 0208 	orr.w	r2, r3, #8
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002a94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d012      	beq.n	8002ac6 <HAL_UART_IRQHandler+0x18a>
 8002aa0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002aa4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d00c      	beq.n	8002ac6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002ab4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002abc:	f043 0220 	orr.w	r2, r3, #32
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	f000 820a 	beq.w	8002ee6 <HAL_UART_IRQHandler+0x5aa>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002ad2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ad6:	f003 0320 	and.w	r3, r3, #32
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d00d      	beq.n	8002afa <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002ade:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ae2:	f003 0320 	and.w	r3, r3, #32
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d007      	beq.n	8002afa <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d003      	beq.n	8002afa <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b00:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b0e:	2b40      	cmp	r3, #64	; 0x40
 8002b10:	d005      	beq.n	8002b1e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002b12:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002b16:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d04f      	beq.n	8002bbe <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	f000 fee8 	bl	80038f4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b2e:	2b40      	cmp	r3, #64	; 0x40
 8002b30:	d141      	bne.n	8002bb6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	3308      	adds	r3, #8
 8002b38:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b3c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002b40:	e853 3f00 	ldrex	r3, [r3]
 8002b44:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002b48:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002b4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b50:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	3308      	adds	r3, #8
 8002b5a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002b5e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002b62:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b66:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002b6a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002b6e:	e841 2300 	strex	r3, r2, [r1]
 8002b72:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002b76:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d1d9      	bne.n	8002b32 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d013      	beq.n	8002bae <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b8a:	4a13      	ldr	r2, [pc, #76]	; (8002bd8 <HAL_UART_IRQHandler+0x29c>)
 8002b8c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b92:	4618      	mov	r0, r3
 8002b94:	f7fe fad1 	bl	800113a <HAL_DMA_Abort_IT>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d017      	beq.n	8002bce <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ba2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ba4:	687a      	ldr	r2, [r7, #4]
 8002ba6:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8002ba8:	4610      	mov	r0, r2
 8002baa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bac:	e00f      	b.n	8002bce <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002bae:	6878      	ldr	r0, [r7, #4]
 8002bb0:	f000 f9a4 	bl	8002efc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bb4:	e00b      	b.n	8002bce <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002bb6:	6878      	ldr	r0, [r7, #4]
 8002bb8:	f000 f9a0 	bl	8002efc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bbc:	e007      	b.n	8002bce <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002bbe:	6878      	ldr	r0, [r7, #4]
 8002bc0:	f000 f99c 	bl	8002efc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8002bcc:	e18b      	b.n	8002ee6 <HAL_UART_IRQHandler+0x5aa>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bce:	bf00      	nop
    return;
 8002bd0:	e189      	b.n	8002ee6 <HAL_UART_IRQHandler+0x5aa>
 8002bd2:	bf00      	nop
 8002bd4:	04000120 	.word	0x04000120
 8002bd8:	080039bb 	.word	0x080039bb

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	f040 8144 	bne.w	8002e6e <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002be6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bea:	f003 0310 	and.w	r3, r3, #16
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	f000 813d 	beq.w	8002e6e <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002bf4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002bf8:	f003 0310 	and.w	r3, r3, #16
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	f000 8136 	beq.w	8002e6e <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	2210      	movs	r2, #16
 8002c08:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c14:	2b40      	cmp	r3, #64	; 0x40
 8002c16:	f040 80b2 	bne.w	8002d7e <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002c26:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	f000 815d 	beq.w	8002eea <HAL_UART_IRQHandler+0x5ae>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8002c36:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002c3a:	429a      	cmp	r2, r3
 8002c3c:	f080 8155 	bcs.w	8002eea <HAL_UART_IRQHandler+0x5ae>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002c46:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c4e:	69db      	ldr	r3, [r3, #28]
 8002c50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c54:	f000 8085 	beq.w	8002d62 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c60:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002c64:	e853 3f00 	ldrex	r3, [r3]
 8002c68:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002c6c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002c70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c74:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	461a      	mov	r2, r3
 8002c7e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002c82:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002c86:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c8a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002c8e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002c92:	e841 2300 	strex	r3, r2, [r1]
 8002c96:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002c9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d1da      	bne.n	8002c58 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	3308      	adds	r3, #8
 8002ca8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002caa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002cac:	e853 3f00 	ldrex	r3, [r3]
 8002cb0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002cb2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002cb4:	f023 0301 	bic.w	r3, r3, #1
 8002cb8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	3308      	adds	r3, #8
 8002cc2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002cc6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002cca:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ccc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002cce:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002cd2:	e841 2300 	strex	r3, r2, [r1]
 8002cd6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002cd8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d1e1      	bne.n	8002ca2 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	3308      	adds	r3, #8
 8002ce4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ce6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ce8:	e853 3f00 	ldrex	r3, [r3]
 8002cec:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002cee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002cf0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002cf4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	3308      	adds	r3, #8
 8002cfe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002d02:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002d04:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d06:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002d08:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002d0a:	e841 2300 	strex	r3, r2, [r1]
 8002d0e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002d10:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d1e3      	bne.n	8002cde <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2220      	movs	r2, #32
 8002d1a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d2a:	e853 3f00 	ldrex	r3, [r3]
 8002d2e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002d30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d32:	f023 0310 	bic.w	r3, r3, #16
 8002d36:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	461a      	mov	r2, r3
 8002d40:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002d44:	65bb      	str	r3, [r7, #88]	; 0x58
 8002d46:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d48:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002d4a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002d4c:	e841 2300 	strex	r3, r2, [r1]
 8002d50:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002d52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d1e4      	bne.n	8002d22 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f7fe f97c 	bl	800105a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002d6e:	b29b      	uxth	r3, r3
 8002d70:	1ad3      	subs	r3, r2, r3
 8002d72:	b29b      	uxth	r3, r3
 8002d74:	4619      	mov	r1, r3
 8002d76:	6878      	ldr	r0, [r7, #4]
 8002d78:	f000 f8ca 	bl	8002f10 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002d7c:	e0b5      	b.n	8002eea <HAL_UART_IRQHandler+0x5ae>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002d8a:	b29b      	uxth	r3, r3
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002d98:	b29b      	uxth	r3, r3
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	f000 80a7 	beq.w	8002eee <HAL_UART_IRQHandler+0x5b2>
          && (nb_rx_data > 0U))
 8002da0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	f000 80a2 	beq.w	8002eee <HAL_UART_IRQHandler+0x5b2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002db0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002db2:	e853 3f00 	ldrex	r3, [r3]
 8002db6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002db8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002dbe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	461a      	mov	r2, r3
 8002dc8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002dcc:	647b      	str	r3, [r7, #68]	; 0x44
 8002dce:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dd0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002dd2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002dd4:	e841 2300 	strex	r3, r2, [r1]
 8002dd8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002dda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d1e4      	bne.n	8002daa <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	3308      	adds	r3, #8
 8002de6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dea:	e853 3f00 	ldrex	r3, [r3]
 8002dee:	623b      	str	r3, [r7, #32]
   return(result);
 8002df0:	6a3b      	ldr	r3, [r7, #32]
 8002df2:	f023 0301 	bic.w	r3, r3, #1
 8002df6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	3308      	adds	r3, #8
 8002e00:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002e04:	633a      	str	r2, [r7, #48]	; 0x30
 8002e06:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e08:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002e0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e0c:	e841 2300 	strex	r3, r2, [r1]
 8002e10:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d1e3      	bne.n	8002de0 <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2220      	movs	r2, #32
 8002e1c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2200      	movs	r2, #0
 8002e22:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2200      	movs	r2, #0
 8002e28:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	e853 3f00 	ldrex	r3, [r3]
 8002e36:	60fb      	str	r3, [r7, #12]
   return(result);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	f023 0310 	bic.w	r3, r3, #16
 8002e3e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	461a      	mov	r2, r3
 8002e48:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002e4c:	61fb      	str	r3, [r7, #28]
 8002e4e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e50:	69b9      	ldr	r1, [r7, #24]
 8002e52:	69fa      	ldr	r2, [r7, #28]
 8002e54:	e841 2300 	strex	r3, r2, [r1]
 8002e58:	617b      	str	r3, [r7, #20]
   return(result);
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d1e4      	bne.n	8002e2a <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002e60:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002e64:	4619      	mov	r1, r3
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	f000 f852 	bl	8002f10 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002e6c:	e03f      	b.n	8002eee <HAL_UART_IRQHandler+0x5b2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002e6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d00e      	beq.n	8002e98 <HAL_UART_IRQHandler+0x55c>
 8002e7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002e7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d008      	beq.n	8002e98 <HAL_UART_IRQHandler+0x55c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002e8e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002e90:	6878      	ldr	r0, [r7, #4]
 8002e92:	f000 f849 	bl	8002f28 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002e96:	e02d      	b.n	8002ef4 <HAL_UART_IRQHandler+0x5b8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002e98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d00e      	beq.n	8002ec2 <HAL_UART_IRQHandler+0x586>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002ea4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ea8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d008      	beq.n	8002ec2 <HAL_UART_IRQHandler+0x586>
  {
    if (huart->TxISR != NULL)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d01c      	beq.n	8002ef2 <HAL_UART_IRQHandler+0x5b6>
    {
      huart->TxISR(huart);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ebc:	6878      	ldr	r0, [r7, #4]
 8002ebe:	4798      	blx	r3
    }
    return;
 8002ec0:	e017      	b.n	8002ef2 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002ec2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ec6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d012      	beq.n	8002ef4 <HAL_UART_IRQHandler+0x5b8>
 8002ece:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ed2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d00c      	beq.n	8002ef4 <HAL_UART_IRQHandler+0x5b8>
  {
    UART_EndTransmit_IT(huart);
 8002eda:	6878      	ldr	r0, [r7, #4]
 8002edc:	f000 fe3e 	bl	8003b5c <UART_EndTransmit_IT>
    return;
 8002ee0:	e008      	b.n	8002ef4 <HAL_UART_IRQHandler+0x5b8>
      return;
 8002ee2:	bf00      	nop
 8002ee4:	e006      	b.n	8002ef4 <HAL_UART_IRQHandler+0x5b8>
    return;
 8002ee6:	bf00      	nop
 8002ee8:	e004      	b.n	8002ef4 <HAL_UART_IRQHandler+0x5b8>
      return;
 8002eea:	bf00      	nop
 8002eec:	e002      	b.n	8002ef4 <HAL_UART_IRQHandler+0x5b8>
      return;
 8002eee:	bf00      	nop
 8002ef0:	e000      	b.n	8002ef4 <HAL_UART_IRQHandler+0x5b8>
    return;
 8002ef2:	bf00      	nop
  }

}
 8002ef4:	37e8      	adds	r7, #232	; 0xe8
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}
 8002efa:	bf00      	nop

08002efc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002efc:	b480      	push	{r7}
 8002efe:	b083      	sub	sp, #12
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002f04:	bf00      	nop
 8002f06:	370c      	adds	r7, #12
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0e:	4770      	bx	lr

08002f10 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b083      	sub	sp, #12
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
 8002f18:	460b      	mov	r3, r1
 8002f1a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002f1c:	bf00      	nop
 8002f1e:	370c      	adds	r7, #12
 8002f20:	46bd      	mov	sp, r7
 8002f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f26:	4770      	bx	lr

08002f28 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b083      	sub	sp, #12
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8002f30:	bf00      	nop
 8002f32:	370c      	adds	r7, #12
 8002f34:	46bd      	mov	sp, r7
 8002f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3a:	4770      	bx	lr

08002f3c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b088      	sub	sp, #32
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002f44:	2300      	movs	r3, #0
 8002f46:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	689a      	ldr	r2, [r3, #8]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	691b      	ldr	r3, [r3, #16]
 8002f50:	431a      	orrs	r2, r3
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	695b      	ldr	r3, [r3, #20]
 8002f56:	431a      	orrs	r2, r3
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	69db      	ldr	r3, [r3, #28]
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	4ba7      	ldr	r3, [pc, #668]	; (8003204 <UART_SetConfig+0x2c8>)
 8002f68:	4013      	ands	r3, r2
 8002f6a:	687a      	ldr	r2, [r7, #4]
 8002f6c:	6812      	ldr	r2, [r2, #0]
 8002f6e:	6979      	ldr	r1, [r7, #20]
 8002f70:	430b      	orrs	r3, r1
 8002f72:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	68da      	ldr	r2, [r3, #12]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	430a      	orrs	r2, r1
 8002f88:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	699b      	ldr	r3, [r3, #24]
 8002f8e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6a1b      	ldr	r3, [r3, #32]
 8002f94:	697a      	ldr	r2, [r7, #20]
 8002f96:	4313      	orrs	r3, r2
 8002f98:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	697a      	ldr	r2, [r7, #20]
 8002faa:	430a      	orrs	r2, r1
 8002fac:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a95      	ldr	r2, [pc, #596]	; (8003208 <UART_SetConfig+0x2cc>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d120      	bne.n	8002ffa <UART_SetConfig+0xbe>
 8002fb8:	4b94      	ldr	r3, [pc, #592]	; (800320c <UART_SetConfig+0x2d0>)
 8002fba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fbe:	f003 0303 	and.w	r3, r3, #3
 8002fc2:	2b03      	cmp	r3, #3
 8002fc4:	d816      	bhi.n	8002ff4 <UART_SetConfig+0xb8>
 8002fc6:	a201      	add	r2, pc, #4	; (adr r2, 8002fcc <UART_SetConfig+0x90>)
 8002fc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fcc:	08002fdd 	.word	0x08002fdd
 8002fd0:	08002fe9 	.word	0x08002fe9
 8002fd4:	08002fe3 	.word	0x08002fe3
 8002fd8:	08002fef 	.word	0x08002fef
 8002fdc:	2301      	movs	r3, #1
 8002fde:	77fb      	strb	r3, [r7, #31]
 8002fe0:	e14f      	b.n	8003282 <UART_SetConfig+0x346>
 8002fe2:	2302      	movs	r3, #2
 8002fe4:	77fb      	strb	r3, [r7, #31]
 8002fe6:	e14c      	b.n	8003282 <UART_SetConfig+0x346>
 8002fe8:	2304      	movs	r3, #4
 8002fea:	77fb      	strb	r3, [r7, #31]
 8002fec:	e149      	b.n	8003282 <UART_SetConfig+0x346>
 8002fee:	2308      	movs	r3, #8
 8002ff0:	77fb      	strb	r3, [r7, #31]
 8002ff2:	e146      	b.n	8003282 <UART_SetConfig+0x346>
 8002ff4:	2310      	movs	r3, #16
 8002ff6:	77fb      	strb	r3, [r7, #31]
 8002ff8:	e143      	b.n	8003282 <UART_SetConfig+0x346>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a84      	ldr	r2, [pc, #528]	; (8003210 <UART_SetConfig+0x2d4>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d132      	bne.n	800306a <UART_SetConfig+0x12e>
 8003004:	4b81      	ldr	r3, [pc, #516]	; (800320c <UART_SetConfig+0x2d0>)
 8003006:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800300a:	f003 030c 	and.w	r3, r3, #12
 800300e:	2b0c      	cmp	r3, #12
 8003010:	d828      	bhi.n	8003064 <UART_SetConfig+0x128>
 8003012:	a201      	add	r2, pc, #4	; (adr r2, 8003018 <UART_SetConfig+0xdc>)
 8003014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003018:	0800304d 	.word	0x0800304d
 800301c:	08003065 	.word	0x08003065
 8003020:	08003065 	.word	0x08003065
 8003024:	08003065 	.word	0x08003065
 8003028:	08003059 	.word	0x08003059
 800302c:	08003065 	.word	0x08003065
 8003030:	08003065 	.word	0x08003065
 8003034:	08003065 	.word	0x08003065
 8003038:	08003053 	.word	0x08003053
 800303c:	08003065 	.word	0x08003065
 8003040:	08003065 	.word	0x08003065
 8003044:	08003065 	.word	0x08003065
 8003048:	0800305f 	.word	0x0800305f
 800304c:	2300      	movs	r3, #0
 800304e:	77fb      	strb	r3, [r7, #31]
 8003050:	e117      	b.n	8003282 <UART_SetConfig+0x346>
 8003052:	2302      	movs	r3, #2
 8003054:	77fb      	strb	r3, [r7, #31]
 8003056:	e114      	b.n	8003282 <UART_SetConfig+0x346>
 8003058:	2304      	movs	r3, #4
 800305a:	77fb      	strb	r3, [r7, #31]
 800305c:	e111      	b.n	8003282 <UART_SetConfig+0x346>
 800305e:	2308      	movs	r3, #8
 8003060:	77fb      	strb	r3, [r7, #31]
 8003062:	e10e      	b.n	8003282 <UART_SetConfig+0x346>
 8003064:	2310      	movs	r3, #16
 8003066:	77fb      	strb	r3, [r7, #31]
 8003068:	e10b      	b.n	8003282 <UART_SetConfig+0x346>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a69      	ldr	r2, [pc, #420]	; (8003214 <UART_SetConfig+0x2d8>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d120      	bne.n	80030b6 <UART_SetConfig+0x17a>
 8003074:	4b65      	ldr	r3, [pc, #404]	; (800320c <UART_SetConfig+0x2d0>)
 8003076:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800307a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800307e:	2b30      	cmp	r3, #48	; 0x30
 8003080:	d013      	beq.n	80030aa <UART_SetConfig+0x16e>
 8003082:	2b30      	cmp	r3, #48	; 0x30
 8003084:	d814      	bhi.n	80030b0 <UART_SetConfig+0x174>
 8003086:	2b20      	cmp	r3, #32
 8003088:	d009      	beq.n	800309e <UART_SetConfig+0x162>
 800308a:	2b20      	cmp	r3, #32
 800308c:	d810      	bhi.n	80030b0 <UART_SetConfig+0x174>
 800308e:	2b00      	cmp	r3, #0
 8003090:	d002      	beq.n	8003098 <UART_SetConfig+0x15c>
 8003092:	2b10      	cmp	r3, #16
 8003094:	d006      	beq.n	80030a4 <UART_SetConfig+0x168>
 8003096:	e00b      	b.n	80030b0 <UART_SetConfig+0x174>
 8003098:	2300      	movs	r3, #0
 800309a:	77fb      	strb	r3, [r7, #31]
 800309c:	e0f1      	b.n	8003282 <UART_SetConfig+0x346>
 800309e:	2302      	movs	r3, #2
 80030a0:	77fb      	strb	r3, [r7, #31]
 80030a2:	e0ee      	b.n	8003282 <UART_SetConfig+0x346>
 80030a4:	2304      	movs	r3, #4
 80030a6:	77fb      	strb	r3, [r7, #31]
 80030a8:	e0eb      	b.n	8003282 <UART_SetConfig+0x346>
 80030aa:	2308      	movs	r3, #8
 80030ac:	77fb      	strb	r3, [r7, #31]
 80030ae:	e0e8      	b.n	8003282 <UART_SetConfig+0x346>
 80030b0:	2310      	movs	r3, #16
 80030b2:	77fb      	strb	r3, [r7, #31]
 80030b4:	e0e5      	b.n	8003282 <UART_SetConfig+0x346>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a57      	ldr	r2, [pc, #348]	; (8003218 <UART_SetConfig+0x2dc>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d120      	bne.n	8003102 <UART_SetConfig+0x1c6>
 80030c0:	4b52      	ldr	r3, [pc, #328]	; (800320c <UART_SetConfig+0x2d0>)
 80030c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030c6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80030ca:	2bc0      	cmp	r3, #192	; 0xc0
 80030cc:	d013      	beq.n	80030f6 <UART_SetConfig+0x1ba>
 80030ce:	2bc0      	cmp	r3, #192	; 0xc0
 80030d0:	d814      	bhi.n	80030fc <UART_SetConfig+0x1c0>
 80030d2:	2b80      	cmp	r3, #128	; 0x80
 80030d4:	d009      	beq.n	80030ea <UART_SetConfig+0x1ae>
 80030d6:	2b80      	cmp	r3, #128	; 0x80
 80030d8:	d810      	bhi.n	80030fc <UART_SetConfig+0x1c0>
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d002      	beq.n	80030e4 <UART_SetConfig+0x1a8>
 80030de:	2b40      	cmp	r3, #64	; 0x40
 80030e0:	d006      	beq.n	80030f0 <UART_SetConfig+0x1b4>
 80030e2:	e00b      	b.n	80030fc <UART_SetConfig+0x1c0>
 80030e4:	2300      	movs	r3, #0
 80030e6:	77fb      	strb	r3, [r7, #31]
 80030e8:	e0cb      	b.n	8003282 <UART_SetConfig+0x346>
 80030ea:	2302      	movs	r3, #2
 80030ec:	77fb      	strb	r3, [r7, #31]
 80030ee:	e0c8      	b.n	8003282 <UART_SetConfig+0x346>
 80030f0:	2304      	movs	r3, #4
 80030f2:	77fb      	strb	r3, [r7, #31]
 80030f4:	e0c5      	b.n	8003282 <UART_SetConfig+0x346>
 80030f6:	2308      	movs	r3, #8
 80030f8:	77fb      	strb	r3, [r7, #31]
 80030fa:	e0c2      	b.n	8003282 <UART_SetConfig+0x346>
 80030fc:	2310      	movs	r3, #16
 80030fe:	77fb      	strb	r3, [r7, #31]
 8003100:	e0bf      	b.n	8003282 <UART_SetConfig+0x346>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a45      	ldr	r2, [pc, #276]	; (800321c <UART_SetConfig+0x2e0>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d125      	bne.n	8003158 <UART_SetConfig+0x21c>
 800310c:	4b3f      	ldr	r3, [pc, #252]	; (800320c <UART_SetConfig+0x2d0>)
 800310e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003112:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003116:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800311a:	d017      	beq.n	800314c <UART_SetConfig+0x210>
 800311c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003120:	d817      	bhi.n	8003152 <UART_SetConfig+0x216>
 8003122:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003126:	d00b      	beq.n	8003140 <UART_SetConfig+0x204>
 8003128:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800312c:	d811      	bhi.n	8003152 <UART_SetConfig+0x216>
 800312e:	2b00      	cmp	r3, #0
 8003130:	d003      	beq.n	800313a <UART_SetConfig+0x1fe>
 8003132:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003136:	d006      	beq.n	8003146 <UART_SetConfig+0x20a>
 8003138:	e00b      	b.n	8003152 <UART_SetConfig+0x216>
 800313a:	2300      	movs	r3, #0
 800313c:	77fb      	strb	r3, [r7, #31]
 800313e:	e0a0      	b.n	8003282 <UART_SetConfig+0x346>
 8003140:	2302      	movs	r3, #2
 8003142:	77fb      	strb	r3, [r7, #31]
 8003144:	e09d      	b.n	8003282 <UART_SetConfig+0x346>
 8003146:	2304      	movs	r3, #4
 8003148:	77fb      	strb	r3, [r7, #31]
 800314a:	e09a      	b.n	8003282 <UART_SetConfig+0x346>
 800314c:	2308      	movs	r3, #8
 800314e:	77fb      	strb	r3, [r7, #31]
 8003150:	e097      	b.n	8003282 <UART_SetConfig+0x346>
 8003152:	2310      	movs	r3, #16
 8003154:	77fb      	strb	r3, [r7, #31]
 8003156:	e094      	b.n	8003282 <UART_SetConfig+0x346>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a30      	ldr	r2, [pc, #192]	; (8003220 <UART_SetConfig+0x2e4>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d125      	bne.n	80031ae <UART_SetConfig+0x272>
 8003162:	4b2a      	ldr	r3, [pc, #168]	; (800320c <UART_SetConfig+0x2d0>)
 8003164:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003168:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800316c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003170:	d017      	beq.n	80031a2 <UART_SetConfig+0x266>
 8003172:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003176:	d817      	bhi.n	80031a8 <UART_SetConfig+0x26c>
 8003178:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800317c:	d00b      	beq.n	8003196 <UART_SetConfig+0x25a>
 800317e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003182:	d811      	bhi.n	80031a8 <UART_SetConfig+0x26c>
 8003184:	2b00      	cmp	r3, #0
 8003186:	d003      	beq.n	8003190 <UART_SetConfig+0x254>
 8003188:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800318c:	d006      	beq.n	800319c <UART_SetConfig+0x260>
 800318e:	e00b      	b.n	80031a8 <UART_SetConfig+0x26c>
 8003190:	2301      	movs	r3, #1
 8003192:	77fb      	strb	r3, [r7, #31]
 8003194:	e075      	b.n	8003282 <UART_SetConfig+0x346>
 8003196:	2302      	movs	r3, #2
 8003198:	77fb      	strb	r3, [r7, #31]
 800319a:	e072      	b.n	8003282 <UART_SetConfig+0x346>
 800319c:	2304      	movs	r3, #4
 800319e:	77fb      	strb	r3, [r7, #31]
 80031a0:	e06f      	b.n	8003282 <UART_SetConfig+0x346>
 80031a2:	2308      	movs	r3, #8
 80031a4:	77fb      	strb	r3, [r7, #31]
 80031a6:	e06c      	b.n	8003282 <UART_SetConfig+0x346>
 80031a8:	2310      	movs	r3, #16
 80031aa:	77fb      	strb	r3, [r7, #31]
 80031ac:	e069      	b.n	8003282 <UART_SetConfig+0x346>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a1c      	ldr	r2, [pc, #112]	; (8003224 <UART_SetConfig+0x2e8>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d137      	bne.n	8003228 <UART_SetConfig+0x2ec>
 80031b8:	4b14      	ldr	r3, [pc, #80]	; (800320c <UART_SetConfig+0x2d0>)
 80031ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031be:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80031c2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80031c6:	d017      	beq.n	80031f8 <UART_SetConfig+0x2bc>
 80031c8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80031cc:	d817      	bhi.n	80031fe <UART_SetConfig+0x2c2>
 80031ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031d2:	d00b      	beq.n	80031ec <UART_SetConfig+0x2b0>
 80031d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031d8:	d811      	bhi.n	80031fe <UART_SetConfig+0x2c2>
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d003      	beq.n	80031e6 <UART_SetConfig+0x2aa>
 80031de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031e2:	d006      	beq.n	80031f2 <UART_SetConfig+0x2b6>
 80031e4:	e00b      	b.n	80031fe <UART_SetConfig+0x2c2>
 80031e6:	2300      	movs	r3, #0
 80031e8:	77fb      	strb	r3, [r7, #31]
 80031ea:	e04a      	b.n	8003282 <UART_SetConfig+0x346>
 80031ec:	2302      	movs	r3, #2
 80031ee:	77fb      	strb	r3, [r7, #31]
 80031f0:	e047      	b.n	8003282 <UART_SetConfig+0x346>
 80031f2:	2304      	movs	r3, #4
 80031f4:	77fb      	strb	r3, [r7, #31]
 80031f6:	e044      	b.n	8003282 <UART_SetConfig+0x346>
 80031f8:	2308      	movs	r3, #8
 80031fa:	77fb      	strb	r3, [r7, #31]
 80031fc:	e041      	b.n	8003282 <UART_SetConfig+0x346>
 80031fe:	2310      	movs	r3, #16
 8003200:	77fb      	strb	r3, [r7, #31]
 8003202:	e03e      	b.n	8003282 <UART_SetConfig+0x346>
 8003204:	efff69f3 	.word	0xefff69f3
 8003208:	40011000 	.word	0x40011000
 800320c:	40023800 	.word	0x40023800
 8003210:	40004400 	.word	0x40004400
 8003214:	40004800 	.word	0x40004800
 8003218:	40004c00 	.word	0x40004c00
 800321c:	40005000 	.word	0x40005000
 8003220:	40011400 	.word	0x40011400
 8003224:	40007800 	.word	0x40007800
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a71      	ldr	r2, [pc, #452]	; (80033f4 <UART_SetConfig+0x4b8>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d125      	bne.n	800327e <UART_SetConfig+0x342>
 8003232:	4b71      	ldr	r3, [pc, #452]	; (80033f8 <UART_SetConfig+0x4bc>)
 8003234:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003238:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800323c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003240:	d017      	beq.n	8003272 <UART_SetConfig+0x336>
 8003242:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003246:	d817      	bhi.n	8003278 <UART_SetConfig+0x33c>
 8003248:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800324c:	d00b      	beq.n	8003266 <UART_SetConfig+0x32a>
 800324e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003252:	d811      	bhi.n	8003278 <UART_SetConfig+0x33c>
 8003254:	2b00      	cmp	r3, #0
 8003256:	d003      	beq.n	8003260 <UART_SetConfig+0x324>
 8003258:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800325c:	d006      	beq.n	800326c <UART_SetConfig+0x330>
 800325e:	e00b      	b.n	8003278 <UART_SetConfig+0x33c>
 8003260:	2300      	movs	r3, #0
 8003262:	77fb      	strb	r3, [r7, #31]
 8003264:	e00d      	b.n	8003282 <UART_SetConfig+0x346>
 8003266:	2302      	movs	r3, #2
 8003268:	77fb      	strb	r3, [r7, #31]
 800326a:	e00a      	b.n	8003282 <UART_SetConfig+0x346>
 800326c:	2304      	movs	r3, #4
 800326e:	77fb      	strb	r3, [r7, #31]
 8003270:	e007      	b.n	8003282 <UART_SetConfig+0x346>
 8003272:	2308      	movs	r3, #8
 8003274:	77fb      	strb	r3, [r7, #31]
 8003276:	e004      	b.n	8003282 <UART_SetConfig+0x346>
 8003278:	2310      	movs	r3, #16
 800327a:	77fb      	strb	r3, [r7, #31]
 800327c:	e001      	b.n	8003282 <UART_SetConfig+0x346>
 800327e:	2310      	movs	r3, #16
 8003280:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	69db      	ldr	r3, [r3, #28]
 8003286:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800328a:	d15a      	bne.n	8003342 <UART_SetConfig+0x406>
  {
    switch (clocksource)
 800328c:	7ffb      	ldrb	r3, [r7, #31]
 800328e:	2b08      	cmp	r3, #8
 8003290:	d827      	bhi.n	80032e2 <UART_SetConfig+0x3a6>
 8003292:	a201      	add	r2, pc, #4	; (adr r2, 8003298 <UART_SetConfig+0x35c>)
 8003294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003298:	080032bd 	.word	0x080032bd
 800329c:	080032c5 	.word	0x080032c5
 80032a0:	080032cd 	.word	0x080032cd
 80032a4:	080032e3 	.word	0x080032e3
 80032a8:	080032d3 	.word	0x080032d3
 80032ac:	080032e3 	.word	0x080032e3
 80032b0:	080032e3 	.word	0x080032e3
 80032b4:	080032e3 	.word	0x080032e3
 80032b8:	080032db 	.word	0x080032db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032bc:	f7fe fde4 	bl	8001e88 <HAL_RCC_GetPCLK1Freq>
 80032c0:	61b8      	str	r0, [r7, #24]
        break;
 80032c2:	e013      	b.n	80032ec <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80032c4:	f7fe fdf4 	bl	8001eb0 <HAL_RCC_GetPCLK2Freq>
 80032c8:	61b8      	str	r0, [r7, #24]
        break;
 80032ca:	e00f      	b.n	80032ec <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80032cc:	4b4b      	ldr	r3, [pc, #300]	; (80033fc <UART_SetConfig+0x4c0>)
 80032ce:	61bb      	str	r3, [r7, #24]
        break;
 80032d0:	e00c      	b.n	80032ec <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032d2:	f7fe fceb 	bl	8001cac <HAL_RCC_GetSysClockFreq>
 80032d6:	61b8      	str	r0, [r7, #24]
        break;
 80032d8:	e008      	b.n	80032ec <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80032da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032de:	61bb      	str	r3, [r7, #24]
        break;
 80032e0:	e004      	b.n	80032ec <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 80032e2:	2300      	movs	r3, #0
 80032e4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	77bb      	strb	r3, [r7, #30]
        break;
 80032ea:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80032ec:	69bb      	ldr	r3, [r7, #24]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d074      	beq.n	80033dc <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80032f2:	69bb      	ldr	r3, [r7, #24]
 80032f4:	005a      	lsls	r2, r3, #1
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	085b      	lsrs	r3, r3, #1
 80032fc:	441a      	add	r2, r3
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	fbb2 f3f3 	udiv	r3, r2, r3
 8003306:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003308:	693b      	ldr	r3, [r7, #16]
 800330a:	2b0f      	cmp	r3, #15
 800330c:	d916      	bls.n	800333c <UART_SetConfig+0x400>
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003314:	d212      	bcs.n	800333c <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	b29b      	uxth	r3, r3
 800331a:	f023 030f 	bic.w	r3, r3, #15
 800331e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	085b      	lsrs	r3, r3, #1
 8003324:	b29b      	uxth	r3, r3
 8003326:	f003 0307 	and.w	r3, r3, #7
 800332a:	b29a      	uxth	r2, r3
 800332c:	89fb      	ldrh	r3, [r7, #14]
 800332e:	4313      	orrs	r3, r2
 8003330:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	89fa      	ldrh	r2, [r7, #14]
 8003338:	60da      	str	r2, [r3, #12]
 800333a:	e04f      	b.n	80033dc <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	77bb      	strb	r3, [r7, #30]
 8003340:	e04c      	b.n	80033dc <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003342:	7ffb      	ldrb	r3, [r7, #31]
 8003344:	2b08      	cmp	r3, #8
 8003346:	d828      	bhi.n	800339a <UART_SetConfig+0x45e>
 8003348:	a201      	add	r2, pc, #4	; (adr r2, 8003350 <UART_SetConfig+0x414>)
 800334a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800334e:	bf00      	nop
 8003350:	08003375 	.word	0x08003375
 8003354:	0800337d 	.word	0x0800337d
 8003358:	08003385 	.word	0x08003385
 800335c:	0800339b 	.word	0x0800339b
 8003360:	0800338b 	.word	0x0800338b
 8003364:	0800339b 	.word	0x0800339b
 8003368:	0800339b 	.word	0x0800339b
 800336c:	0800339b 	.word	0x0800339b
 8003370:	08003393 	.word	0x08003393
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003374:	f7fe fd88 	bl	8001e88 <HAL_RCC_GetPCLK1Freq>
 8003378:	61b8      	str	r0, [r7, #24]
        break;
 800337a:	e013      	b.n	80033a4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800337c:	f7fe fd98 	bl	8001eb0 <HAL_RCC_GetPCLK2Freq>
 8003380:	61b8      	str	r0, [r7, #24]
        break;
 8003382:	e00f      	b.n	80033a4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003384:	4b1d      	ldr	r3, [pc, #116]	; (80033fc <UART_SetConfig+0x4c0>)
 8003386:	61bb      	str	r3, [r7, #24]
        break;
 8003388:	e00c      	b.n	80033a4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800338a:	f7fe fc8f 	bl	8001cac <HAL_RCC_GetSysClockFreq>
 800338e:	61b8      	str	r0, [r7, #24]
        break;
 8003390:	e008      	b.n	80033a4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003392:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003396:	61bb      	str	r3, [r7, #24]
        break;
 8003398:	e004      	b.n	80033a4 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 800339a:	2300      	movs	r3, #0
 800339c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	77bb      	strb	r3, [r7, #30]
        break;
 80033a2:	bf00      	nop
    }

    if (pclk != 0U)
 80033a4:	69bb      	ldr	r3, [r7, #24]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d018      	beq.n	80033dc <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	085a      	lsrs	r2, r3, #1
 80033b0:	69bb      	ldr	r3, [r7, #24]
 80033b2:	441a      	add	r2, r3
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80033bc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	2b0f      	cmp	r3, #15
 80033c2:	d909      	bls.n	80033d8 <UART_SetConfig+0x49c>
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033ca:	d205      	bcs.n	80033d8 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	b29a      	uxth	r2, r3
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	60da      	str	r2, [r3, #12]
 80033d6:	e001      	b.n	80033dc <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
 80033da:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2200      	movs	r2, #0
 80033e0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2200      	movs	r2, #0
 80033e6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80033e8:	7fbb      	ldrb	r3, [r7, #30]
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3720      	adds	r7, #32
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	bf00      	nop
 80033f4:	40007c00 	.word	0x40007c00
 80033f8:	40023800 	.word	0x40023800
 80033fc:	00f42400 	.word	0x00f42400

08003400 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003400:	b480      	push	{r7}
 8003402:	b083      	sub	sp, #12
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800340c:	f003 0301 	and.w	r3, r3, #1
 8003410:	2b00      	cmp	r3, #0
 8003412:	d00a      	beq.n	800342a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	430a      	orrs	r2, r1
 8003428:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800342e:	f003 0302 	and.w	r3, r3, #2
 8003432:	2b00      	cmp	r3, #0
 8003434:	d00a      	beq.n	800344c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	430a      	orrs	r2, r1
 800344a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003450:	f003 0304 	and.w	r3, r3, #4
 8003454:	2b00      	cmp	r3, #0
 8003456:	d00a      	beq.n	800346e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	430a      	orrs	r2, r1
 800346c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003472:	f003 0308 	and.w	r3, r3, #8
 8003476:	2b00      	cmp	r3, #0
 8003478:	d00a      	beq.n	8003490 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	430a      	orrs	r2, r1
 800348e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003494:	f003 0310 	and.w	r3, r3, #16
 8003498:	2b00      	cmp	r3, #0
 800349a:	d00a      	beq.n	80034b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	430a      	orrs	r2, r1
 80034b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b6:	f003 0320 	and.w	r3, r3, #32
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d00a      	beq.n	80034d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	430a      	orrs	r2, r1
 80034d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d01a      	beq.n	8003516 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	430a      	orrs	r2, r1
 80034f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80034fe:	d10a      	bne.n	8003516 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	430a      	orrs	r2, r1
 8003514:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800351a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800351e:	2b00      	cmp	r3, #0
 8003520:	d00a      	beq.n	8003538 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	430a      	orrs	r2, r1
 8003536:	605a      	str	r2, [r3, #4]
  }
}
 8003538:	bf00      	nop
 800353a:	370c      	adds	r7, #12
 800353c:	46bd      	mov	sp, r7
 800353e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003542:	4770      	bx	lr

08003544 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b086      	sub	sp, #24
 8003548:	af02      	add	r7, sp, #8
 800354a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2200      	movs	r2, #0
 8003550:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003554:	f7fd fc64 	bl	8000e20 <HAL_GetTick>
 8003558:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f003 0308 	and.w	r3, r3, #8
 8003564:	2b08      	cmp	r3, #8
 8003566:	d10e      	bne.n	8003586 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003568:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800356c:	9300      	str	r3, [sp, #0]
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2200      	movs	r2, #0
 8003572:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	f000 f82d 	bl	80035d6 <UART_WaitOnFlagUntilTimeout>
 800357c:	4603      	mov	r3, r0
 800357e:	2b00      	cmp	r3, #0
 8003580:	d001      	beq.n	8003586 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003582:	2303      	movs	r3, #3
 8003584:	e023      	b.n	80035ce <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f003 0304 	and.w	r3, r3, #4
 8003590:	2b04      	cmp	r3, #4
 8003592:	d10e      	bne.n	80035b2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003594:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003598:	9300      	str	r3, [sp, #0]
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2200      	movs	r2, #0
 800359e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	f000 f817 	bl	80035d6 <UART_WaitOnFlagUntilTimeout>
 80035a8:	4603      	mov	r3, r0
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d001      	beq.n	80035b2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80035ae:	2303      	movs	r3, #3
 80035b0:	e00d      	b.n	80035ce <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2220      	movs	r2, #32
 80035b6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2220      	movs	r2, #32
 80035bc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2200      	movs	r2, #0
 80035c2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2200      	movs	r2, #0
 80035c8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80035cc:	2300      	movs	r3, #0
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	3710      	adds	r7, #16
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}

080035d6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80035d6:	b580      	push	{r7, lr}
 80035d8:	b09c      	sub	sp, #112	; 0x70
 80035da:	af00      	add	r7, sp, #0
 80035dc:	60f8      	str	r0, [r7, #12]
 80035de:	60b9      	str	r1, [r7, #8]
 80035e0:	603b      	str	r3, [r7, #0]
 80035e2:	4613      	mov	r3, r2
 80035e4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035e6:	e0a5      	b.n	8003734 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80035ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035ee:	f000 80a1 	beq.w	8003734 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035f2:	f7fd fc15 	bl	8000e20 <HAL_GetTick>
 80035f6:	4602      	mov	r2, r0
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	1ad3      	subs	r3, r2, r3
 80035fc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80035fe:	429a      	cmp	r2, r3
 8003600:	d302      	bcc.n	8003608 <UART_WaitOnFlagUntilTimeout+0x32>
 8003602:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003604:	2b00      	cmp	r3, #0
 8003606:	d13e      	bne.n	8003686 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800360e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003610:	e853 3f00 	ldrex	r3, [r3]
 8003614:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003616:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003618:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800361c:	667b      	str	r3, [r7, #100]	; 0x64
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	461a      	mov	r2, r3
 8003624:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003626:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003628:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800362a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800362c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800362e:	e841 2300 	strex	r3, r2, [r1]
 8003632:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003634:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003636:	2b00      	cmp	r3, #0
 8003638:	d1e6      	bne.n	8003608 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	3308      	adds	r3, #8
 8003640:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003642:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003644:	e853 3f00 	ldrex	r3, [r3]
 8003648:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800364a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800364c:	f023 0301 	bic.w	r3, r3, #1
 8003650:	663b      	str	r3, [r7, #96]	; 0x60
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	3308      	adds	r3, #8
 8003658:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800365a:	64ba      	str	r2, [r7, #72]	; 0x48
 800365c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800365e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003660:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003662:	e841 2300 	strex	r3, r2, [r1]
 8003666:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003668:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800366a:	2b00      	cmp	r3, #0
 800366c:	d1e5      	bne.n	800363a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2220      	movs	r2, #32
 8003672:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2220      	movs	r2, #32
 8003678:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2200      	movs	r2, #0
 800367e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003682:	2303      	movs	r3, #3
 8003684:	e067      	b.n	8003756 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f003 0304 	and.w	r3, r3, #4
 8003690:	2b00      	cmp	r3, #0
 8003692:	d04f      	beq.n	8003734 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	69db      	ldr	r3, [r3, #28]
 800369a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800369e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036a2:	d147      	bne.n	8003734 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80036ac:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036b6:	e853 3f00 	ldrex	r3, [r3]
 80036ba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80036bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036be:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80036c2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	461a      	mov	r2, r3
 80036ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036cc:	637b      	str	r3, [r7, #52]	; 0x34
 80036ce:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036d0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80036d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80036d4:	e841 2300 	strex	r3, r2, [r1]
 80036d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80036da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d1e6      	bne.n	80036ae <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	3308      	adds	r3, #8
 80036e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	e853 3f00 	ldrex	r3, [r3]
 80036ee:	613b      	str	r3, [r7, #16]
   return(result);
 80036f0:	693b      	ldr	r3, [r7, #16]
 80036f2:	f023 0301 	bic.w	r3, r3, #1
 80036f6:	66bb      	str	r3, [r7, #104]	; 0x68
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	3308      	adds	r3, #8
 80036fe:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003700:	623a      	str	r2, [r7, #32]
 8003702:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003704:	69f9      	ldr	r1, [r7, #28]
 8003706:	6a3a      	ldr	r2, [r7, #32]
 8003708:	e841 2300 	strex	r3, r2, [r1]
 800370c:	61bb      	str	r3, [r7, #24]
   return(result);
 800370e:	69bb      	ldr	r3, [r7, #24]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d1e5      	bne.n	80036e0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2220      	movs	r2, #32
 8003718:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	2220      	movs	r2, #32
 800371e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2220      	movs	r2, #32
 8003724:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2200      	movs	r2, #0
 800372c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003730:	2303      	movs	r3, #3
 8003732:	e010      	b.n	8003756 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	69da      	ldr	r2, [r3, #28]
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	4013      	ands	r3, r2
 800373e:	68ba      	ldr	r2, [r7, #8]
 8003740:	429a      	cmp	r2, r3
 8003742:	bf0c      	ite	eq
 8003744:	2301      	moveq	r3, #1
 8003746:	2300      	movne	r3, #0
 8003748:	b2db      	uxtb	r3, r3
 800374a:	461a      	mov	r2, r3
 800374c:	79fb      	ldrb	r3, [r7, #7]
 800374e:	429a      	cmp	r2, r3
 8003750:	f43f af4a 	beq.w	80035e8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003754:	2300      	movs	r3, #0
}
 8003756:	4618      	mov	r0, r3
 8003758:	3770      	adds	r7, #112	; 0x70
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}
	...

08003760 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003760:	b480      	push	{r7}
 8003762:	b097      	sub	sp, #92	; 0x5c
 8003764:	af00      	add	r7, sp, #0
 8003766:	60f8      	str	r0, [r7, #12]
 8003768:	60b9      	str	r1, [r7, #8]
 800376a:	4613      	mov	r3, r2
 800376c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	68ba      	ldr	r2, [r7, #8]
 8003772:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	88fa      	ldrh	r2, [r7, #6]
 8003778:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	88fa      	ldrh	r2, [r7, #6]
 8003780:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	2200      	movs	r2, #0
 8003788:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003792:	d10e      	bne.n	80037b2 <UART_Start_Receive_IT+0x52>
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	691b      	ldr	r3, [r3, #16]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d105      	bne.n	80037a8 <UART_Start_Receive_IT+0x48>
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	f240 12ff 	movw	r2, #511	; 0x1ff
 80037a2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80037a6:	e02d      	b.n	8003804 <UART_Start_Receive_IT+0xa4>
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	22ff      	movs	r2, #255	; 0xff
 80037ac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80037b0:	e028      	b.n	8003804 <UART_Start_Receive_IT+0xa4>
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d10d      	bne.n	80037d6 <UART_Start_Receive_IT+0x76>
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	691b      	ldr	r3, [r3, #16]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d104      	bne.n	80037cc <UART_Start_Receive_IT+0x6c>
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	22ff      	movs	r2, #255	; 0xff
 80037c6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80037ca:	e01b      	b.n	8003804 <UART_Start_Receive_IT+0xa4>
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	227f      	movs	r2, #127	; 0x7f
 80037d0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80037d4:	e016      	b.n	8003804 <UART_Start_Receive_IT+0xa4>
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80037de:	d10d      	bne.n	80037fc <UART_Start_Receive_IT+0x9c>
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	691b      	ldr	r3, [r3, #16]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d104      	bne.n	80037f2 <UART_Start_Receive_IT+0x92>
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	227f      	movs	r2, #127	; 0x7f
 80037ec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80037f0:	e008      	b.n	8003804 <UART_Start_Receive_IT+0xa4>
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	223f      	movs	r2, #63	; 0x3f
 80037f6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80037fa:	e003      	b.n	8003804 <UART_Start_Receive_IT+0xa4>
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2200      	movs	r2, #0
 8003800:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	2200      	movs	r2, #0
 8003808:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2222      	movs	r2, #34	; 0x22
 8003810:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	3308      	adds	r3, #8
 8003818:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800381a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800381c:	e853 3f00 	ldrex	r3, [r3]
 8003820:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003822:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003824:	f043 0301 	orr.w	r3, r3, #1
 8003828:	657b      	str	r3, [r7, #84]	; 0x54
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	3308      	adds	r3, #8
 8003830:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003832:	64ba      	str	r2, [r7, #72]	; 0x48
 8003834:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003836:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003838:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800383a:	e841 2300 	strex	r3, r2, [r1]
 800383e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003840:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003842:	2b00      	cmp	r3, #0
 8003844:	d1e5      	bne.n	8003812 <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	689b      	ldr	r3, [r3, #8]
 800384a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800384e:	d107      	bne.n	8003860 <UART_Start_Receive_IT+0x100>
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	691b      	ldr	r3, [r3, #16]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d103      	bne.n	8003860 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	4a24      	ldr	r2, [pc, #144]	; (80038ec <UART_Start_Receive_IT+0x18c>)
 800385c:	665a      	str	r2, [r3, #100]	; 0x64
 800385e:	e002      	b.n	8003866 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	4a23      	ldr	r2, [pc, #140]	; (80038f0 <UART_Start_Receive_IT+0x190>)
 8003864:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2200      	movs	r2, #0
 800386a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	691b      	ldr	r3, [r3, #16]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d019      	beq.n	80038aa <UART_Start_Receive_IT+0x14a>
  { 
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800387c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800387e:	e853 3f00 	ldrex	r3, [r3]
 8003882:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003886:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800388a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	461a      	mov	r2, r3
 8003892:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003894:	637b      	str	r3, [r7, #52]	; 0x34
 8003896:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003898:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800389a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800389c:	e841 2300 	strex	r3, r2, [r1]
 80038a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80038a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d1e6      	bne.n	8003876 <UART_Start_Receive_IT+0x116>
 80038a8:	e018      	b.n	80038dc <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	e853 3f00 	ldrex	r3, [r3]
 80038b6:	613b      	str	r3, [r7, #16]
   return(result);
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	f043 0320 	orr.w	r3, r3, #32
 80038be:	653b      	str	r3, [r7, #80]	; 0x50
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	461a      	mov	r2, r3
 80038c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038c8:	623b      	str	r3, [r7, #32]
 80038ca:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038cc:	69f9      	ldr	r1, [r7, #28]
 80038ce:	6a3a      	ldr	r2, [r7, #32]
 80038d0:	e841 2300 	strex	r3, r2, [r1]
 80038d4:	61bb      	str	r3, [r7, #24]
   return(result);
 80038d6:	69bb      	ldr	r3, [r7, #24]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d1e6      	bne.n	80038aa <UART_Start_Receive_IT+0x14a>
  }
  return HAL_OK;
 80038dc:	2300      	movs	r3, #0
}
 80038de:	4618      	mov	r0, r3
 80038e0:	375c      	adds	r7, #92	; 0x5c
 80038e2:	46bd      	mov	sp, r7
 80038e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e8:	4770      	bx	lr
 80038ea:	bf00      	nop
 80038ec:	08003d0d 	.word	0x08003d0d
 80038f0:	08003bb1 	.word	0x08003bb1

080038f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b095      	sub	sp, #84	; 0x54
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003902:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003904:	e853 3f00 	ldrex	r3, [r3]
 8003908:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800390a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800390c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003910:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	461a      	mov	r2, r3
 8003918:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800391a:	643b      	str	r3, [r7, #64]	; 0x40
 800391c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800391e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003920:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003922:	e841 2300 	strex	r3, r2, [r1]
 8003926:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800392a:	2b00      	cmp	r3, #0
 800392c:	d1e6      	bne.n	80038fc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	3308      	adds	r3, #8
 8003934:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003936:	6a3b      	ldr	r3, [r7, #32]
 8003938:	e853 3f00 	ldrex	r3, [r3]
 800393c:	61fb      	str	r3, [r7, #28]
   return(result);
 800393e:	69fb      	ldr	r3, [r7, #28]
 8003940:	f023 0301 	bic.w	r3, r3, #1
 8003944:	64bb      	str	r3, [r7, #72]	; 0x48
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	3308      	adds	r3, #8
 800394c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800394e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003950:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003952:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003954:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003956:	e841 2300 	strex	r3, r2, [r1]
 800395a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800395c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800395e:	2b00      	cmp	r3, #0
 8003960:	d1e5      	bne.n	800392e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003966:	2b01      	cmp	r3, #1
 8003968:	d118      	bne.n	800399c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	e853 3f00 	ldrex	r3, [r3]
 8003976:	60bb      	str	r3, [r7, #8]
   return(result);
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	f023 0310 	bic.w	r3, r3, #16
 800397e:	647b      	str	r3, [r7, #68]	; 0x44
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	461a      	mov	r2, r3
 8003986:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003988:	61bb      	str	r3, [r7, #24]
 800398a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800398c:	6979      	ldr	r1, [r7, #20]
 800398e:	69ba      	ldr	r2, [r7, #24]
 8003990:	e841 2300 	strex	r3, r2, [r1]
 8003994:	613b      	str	r3, [r7, #16]
   return(result);
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d1e6      	bne.n	800396a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2220      	movs	r2, #32
 80039a0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2200      	movs	r2, #0
 80039a6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2200      	movs	r2, #0
 80039ac:	665a      	str	r2, [r3, #100]	; 0x64
}
 80039ae:	bf00      	nop
 80039b0:	3754      	adds	r7, #84	; 0x54
 80039b2:	46bd      	mov	sp, r7
 80039b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b8:	4770      	bx	lr

080039ba <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80039ba:	b580      	push	{r7, lr}
 80039bc:	b084      	sub	sp, #16
 80039be:	af00      	add	r7, sp, #0
 80039c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039c6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2200      	movs	r2, #0
 80039cc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2200      	movs	r2, #0
 80039d4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80039d8:	68f8      	ldr	r0, [r7, #12]
 80039da:	f7ff fa8f 	bl	8002efc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80039de:	bf00      	nop
 80039e0:	3710      	adds	r7, #16
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}

080039e6 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80039e6:	b480      	push	{r7}
 80039e8:	b08f      	sub	sp, #60	; 0x3c
 80039ea:	af00      	add	r7, sp, #0
 80039ec:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80039f2:	2b21      	cmp	r3, #33	; 0x21
 80039f4:	d14c      	bne.n	8003a90 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80039fc:	b29b      	uxth	r3, r3
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d132      	bne.n	8003a68 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a08:	6a3b      	ldr	r3, [r7, #32]
 8003a0a:	e853 3f00 	ldrex	r3, [r3]
 8003a0e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003a10:	69fb      	ldr	r3, [r7, #28]
 8003a12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a16:	637b      	str	r3, [r7, #52]	; 0x34
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	461a      	mov	r2, r3
 8003a1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a20:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a22:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a24:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a28:	e841 2300 	strex	r3, r2, [r1]
 8003a2c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d1e6      	bne.n	8003a02 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	e853 3f00 	ldrex	r3, [r3]
 8003a40:	60bb      	str	r3, [r7, #8]
   return(result);
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a48:	633b      	str	r3, [r7, #48]	; 0x30
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	461a      	mov	r2, r3
 8003a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a52:	61bb      	str	r3, [r7, #24]
 8003a54:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a56:	6979      	ldr	r1, [r7, #20]
 8003a58:	69ba      	ldr	r2, [r7, #24]
 8003a5a:	e841 2300 	strex	r3, r2, [r1]
 8003a5e:	613b      	str	r3, [r7, #16]
   return(result);
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d1e6      	bne.n	8003a34 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8003a66:	e013      	b.n	8003a90 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a6c:	781a      	ldrb	r2, [r3, #0]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a78:	1c5a      	adds	r2, r3, #1
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003a84:	b29b      	uxth	r3, r3
 8003a86:	3b01      	subs	r3, #1
 8003a88:	b29a      	uxth	r2, r3
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8003a90:	bf00      	nop
 8003a92:	373c      	adds	r7, #60	; 0x3c
 8003a94:	46bd      	mov	sp, r7
 8003a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9a:	4770      	bx	lr

08003a9c <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b091      	sub	sp, #68	; 0x44
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003aa8:	2b21      	cmp	r3, #33	; 0x21
 8003aaa:	d151      	bne.n	8003b50 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003ab2:	b29b      	uxth	r3, r3
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d132      	bne.n	8003b1e <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac0:	e853 3f00 	ldrex	r3, [r3]
 8003ac4:	623b      	str	r3, [r7, #32]
   return(result);
 8003ac6:	6a3b      	ldr	r3, [r7, #32]
 8003ac8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003acc:	63bb      	str	r3, [r7, #56]	; 0x38
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	461a      	mov	r2, r3
 8003ad4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ad6:	633b      	str	r3, [r7, #48]	; 0x30
 8003ad8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ada:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003adc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ade:	e841 2300 	strex	r3, r2, [r1]
 8003ae2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d1e6      	bne.n	8003ab8 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	e853 3f00 	ldrex	r3, [r3]
 8003af6:	60fb      	str	r3, [r7, #12]
   return(result);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003afe:	637b      	str	r3, [r7, #52]	; 0x34
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	461a      	mov	r2, r3
 8003b06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b08:	61fb      	str	r3, [r7, #28]
 8003b0a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b0c:	69b9      	ldr	r1, [r7, #24]
 8003b0e:	69fa      	ldr	r2, [r7, #28]
 8003b10:	e841 2300 	strex	r3, r2, [r1]
 8003b14:	617b      	str	r3, [r7, #20]
   return(result);
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d1e6      	bne.n	8003aea <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8003b1c:	e018      	b.n	8003b50 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b22:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8003b24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b26:	881b      	ldrh	r3, [r3, #0]
 8003b28:	461a      	mov	r2, r3
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b32:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b38:	1c9a      	adds	r2, r3, #2
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003b44:	b29b      	uxth	r3, r3
 8003b46:	3b01      	subs	r3, #1
 8003b48:	b29a      	uxth	r2, r3
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8003b50:	bf00      	nop
 8003b52:	3744      	adds	r7, #68	; 0x44
 8003b54:	46bd      	mov	sp, r7
 8003b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5a:	4770      	bx	lr

08003b5c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b088      	sub	sp, #32
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	e853 3f00 	ldrex	r3, [r3]
 8003b70:	60bb      	str	r3, [r7, #8]
   return(result);
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b78:	61fb      	str	r3, [r7, #28]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	461a      	mov	r2, r3
 8003b80:	69fb      	ldr	r3, [r7, #28]
 8003b82:	61bb      	str	r3, [r7, #24]
 8003b84:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b86:	6979      	ldr	r1, [r7, #20]
 8003b88:	69ba      	ldr	r2, [r7, #24]
 8003b8a:	e841 2300 	strex	r3, r2, [r1]
 8003b8e:	613b      	str	r3, [r7, #16]
   return(result);
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d1e6      	bne.n	8003b64 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2220      	movs	r2, #32
 8003b9a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003ba2:	6878      	ldr	r0, [r7, #4]
 8003ba4:	f7fd f88e 	bl	8000cc4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003ba8:	bf00      	nop
 8003baa:	3720      	adds	r7, #32
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}

08003bb0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b096      	sub	sp, #88	; 0x58
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003bbe:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003bc6:	2b22      	cmp	r3, #34	; 0x22
 8003bc8:	f040 8094 	bne.w	8003cf4 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd2:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003bd6:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8003bda:	b2d9      	uxtb	r1, r3
 8003bdc:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003be0:	b2da      	uxtb	r2, r3
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003be6:	400a      	ands	r2, r1
 8003be8:	b2d2      	uxtb	r2, r2
 8003bea:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bf0:	1c5a      	adds	r2, r3, #1
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003bfc:	b29b      	uxth	r3, r3
 8003bfe:	3b01      	subs	r3, #1
 8003c00:	b29a      	uxth	r2, r3
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003c0e:	b29b      	uxth	r3, r3
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d177      	bne.n	8003d04 <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c1c:	e853 3f00 	ldrex	r3, [r3]
 8003c20:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003c22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c24:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003c28:	653b      	str	r3, [r7, #80]	; 0x50
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	461a      	mov	r2, r3
 8003c30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c32:	647b      	str	r3, [r7, #68]	; 0x44
 8003c34:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c36:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003c38:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003c3a:	e841 2300 	strex	r3, r2, [r1]
 8003c3e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003c40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d1e6      	bne.n	8003c14 <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	3308      	adds	r3, #8
 8003c4c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c50:	e853 3f00 	ldrex	r3, [r3]
 8003c54:	623b      	str	r3, [r7, #32]
   return(result);
 8003c56:	6a3b      	ldr	r3, [r7, #32]
 8003c58:	f023 0301 	bic.w	r3, r3, #1
 8003c5c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	3308      	adds	r3, #8
 8003c64:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003c66:	633a      	str	r2, [r7, #48]	; 0x30
 8003c68:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c6a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003c6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c6e:	e841 2300 	strex	r3, r2, [r1]
 8003c72:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d1e5      	bne.n	8003c46 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2220      	movs	r2, #32
 8003c7e:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2200      	movs	r2, #0
 8003c84:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c8a:	2b01      	cmp	r3, #1
 8003c8c:	d12e      	bne.n	8003cec <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2200      	movs	r2, #0
 8003c92:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	e853 3f00 	ldrex	r3, [r3]
 8003ca0:	60fb      	str	r3, [r7, #12]
   return(result);
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	f023 0310 	bic.w	r3, r3, #16
 8003ca8:	64bb      	str	r3, [r7, #72]	; 0x48
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	461a      	mov	r2, r3
 8003cb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003cb2:	61fb      	str	r3, [r7, #28]
 8003cb4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cb6:	69b9      	ldr	r1, [r7, #24]
 8003cb8:	69fa      	ldr	r2, [r7, #28]
 8003cba:	e841 2300 	strex	r3, r2, [r1]
 8003cbe:	617b      	str	r3, [r7, #20]
   return(result);
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d1e6      	bne.n	8003c94 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	69db      	ldr	r3, [r3, #28]
 8003ccc:	f003 0310 	and.w	r3, r3, #16
 8003cd0:	2b10      	cmp	r3, #16
 8003cd2:	d103      	bne.n	8003cdc <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	2210      	movs	r2, #16
 8003cda:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003ce2:	4619      	mov	r1, r3
 8003ce4:	6878      	ldr	r0, [r7, #4]
 8003ce6:	f7ff f913 	bl	8002f10 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003cea:	e00b      	b.n	8003d04 <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8003cec:	6878      	ldr	r0, [r7, #4]
 8003cee:	f7fc ffb9 	bl	8000c64 <HAL_UART_RxCpltCallback>
}
 8003cf2:	e007      	b.n	8003d04 <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	699a      	ldr	r2, [r3, #24]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f042 0208 	orr.w	r2, r2, #8
 8003d02:	619a      	str	r2, [r3, #24]
}
 8003d04:	bf00      	nop
 8003d06:	3758      	adds	r7, #88	; 0x58
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bd80      	pop	{r7, pc}

08003d0c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b096      	sub	sp, #88	; 0x58
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003d1a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d22:	2b22      	cmp	r3, #34	; 0x22
 8003d24:	f040 8094 	bne.w	8003e50 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d2e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d36:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8003d38:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8003d3c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003d40:	4013      	ands	r3, r2
 8003d42:	b29a      	uxth	r2, r3
 8003d44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d46:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d4c:	1c9a      	adds	r2, r3, #2
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003d58:	b29b      	uxth	r3, r3
 8003d5a:	3b01      	subs	r3, #1
 8003d5c:	b29a      	uxth	r2, r3
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003d6a:	b29b      	uxth	r3, r3
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d177      	bne.n	8003e60 <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d78:	e853 3f00 	ldrex	r3, [r3]
 8003d7c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d80:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003d84:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	461a      	mov	r2, r3
 8003d8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d8e:	643b      	str	r3, [r7, #64]	; 0x40
 8003d90:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d92:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003d94:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003d96:	e841 2300 	strex	r3, r2, [r1]
 8003d9a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003d9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d1e6      	bne.n	8003d70 <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	3308      	adds	r3, #8
 8003da8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003daa:	6a3b      	ldr	r3, [r7, #32]
 8003dac:	e853 3f00 	ldrex	r3, [r3]
 8003db0:	61fb      	str	r3, [r7, #28]
   return(result);
 8003db2:	69fb      	ldr	r3, [r7, #28]
 8003db4:	f023 0301 	bic.w	r3, r3, #1
 8003db8:	64bb      	str	r3, [r7, #72]	; 0x48
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	3308      	adds	r3, #8
 8003dc0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003dc2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003dc4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dc6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003dc8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003dca:	e841 2300 	strex	r3, r2, [r1]
 8003dce:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d1e5      	bne.n	8003da2 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2220      	movs	r2, #32
 8003dda:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2200      	movs	r2, #0
 8003de0:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003de6:	2b01      	cmp	r3, #1
 8003de8:	d12e      	bne.n	8003e48 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2200      	movs	r2, #0
 8003dee:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	e853 3f00 	ldrex	r3, [r3]
 8003dfc:	60bb      	str	r3, [r7, #8]
   return(result);
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	f023 0310 	bic.w	r3, r3, #16
 8003e04:	647b      	str	r3, [r7, #68]	; 0x44
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	461a      	mov	r2, r3
 8003e0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e0e:	61bb      	str	r3, [r7, #24]
 8003e10:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e12:	6979      	ldr	r1, [r7, #20]
 8003e14:	69ba      	ldr	r2, [r7, #24]
 8003e16:	e841 2300 	strex	r3, r2, [r1]
 8003e1a:	613b      	str	r3, [r7, #16]
   return(result);
 8003e1c:	693b      	ldr	r3, [r7, #16]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d1e6      	bne.n	8003df0 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	69db      	ldr	r3, [r3, #28]
 8003e28:	f003 0310 	and.w	r3, r3, #16
 8003e2c:	2b10      	cmp	r3, #16
 8003e2e:	d103      	bne.n	8003e38 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	2210      	movs	r2, #16
 8003e36:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003e3e:	4619      	mov	r1, r3
 8003e40:	6878      	ldr	r0, [r7, #4]
 8003e42:	f7ff f865 	bl	8002f10 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003e46:	e00b      	b.n	8003e60 <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8003e48:	6878      	ldr	r0, [r7, #4]
 8003e4a:	f7fc ff0b 	bl	8000c64 <HAL_UART_RxCpltCallback>
}
 8003e4e:	e007      	b.n	8003e60 <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	699a      	ldr	r2, [r3, #24]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f042 0208 	orr.w	r2, r2, #8
 8003e5e:	619a      	str	r2, [r3, #24]
}
 8003e60:	bf00      	nop
 8003e62:	3758      	adds	r7, #88	; 0x58
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bd80      	pop	{r7, pc}

08003e68 <__errno>:
 8003e68:	4b01      	ldr	r3, [pc, #4]	; (8003e70 <__errno+0x8>)
 8003e6a:	6818      	ldr	r0, [r3, #0]
 8003e6c:	4770      	bx	lr
 8003e6e:	bf00      	nop
 8003e70:	2000000c 	.word	0x2000000c

08003e74 <__libc_init_array>:
 8003e74:	b570      	push	{r4, r5, r6, lr}
 8003e76:	4d0d      	ldr	r5, [pc, #52]	; (8003eac <__libc_init_array+0x38>)
 8003e78:	4c0d      	ldr	r4, [pc, #52]	; (8003eb0 <__libc_init_array+0x3c>)
 8003e7a:	1b64      	subs	r4, r4, r5
 8003e7c:	10a4      	asrs	r4, r4, #2
 8003e7e:	2600      	movs	r6, #0
 8003e80:	42a6      	cmp	r6, r4
 8003e82:	d109      	bne.n	8003e98 <__libc_init_array+0x24>
 8003e84:	4d0b      	ldr	r5, [pc, #44]	; (8003eb4 <__libc_init_array+0x40>)
 8003e86:	4c0c      	ldr	r4, [pc, #48]	; (8003eb8 <__libc_init_array+0x44>)
 8003e88:	f000 fe0e 	bl	8004aa8 <_init>
 8003e8c:	1b64      	subs	r4, r4, r5
 8003e8e:	10a4      	asrs	r4, r4, #2
 8003e90:	2600      	movs	r6, #0
 8003e92:	42a6      	cmp	r6, r4
 8003e94:	d105      	bne.n	8003ea2 <__libc_init_array+0x2e>
 8003e96:	bd70      	pop	{r4, r5, r6, pc}
 8003e98:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e9c:	4798      	blx	r3
 8003e9e:	3601      	adds	r6, #1
 8003ea0:	e7ee      	b.n	8003e80 <__libc_init_array+0xc>
 8003ea2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ea6:	4798      	blx	r3
 8003ea8:	3601      	adds	r6, #1
 8003eaa:	e7f2      	b.n	8003e92 <__libc_init_array+0x1e>
 8003eac:	08004d74 	.word	0x08004d74
 8003eb0:	08004d74 	.word	0x08004d74
 8003eb4:	08004d74 	.word	0x08004d74
 8003eb8:	08004d78 	.word	0x08004d78

08003ebc <memset>:
 8003ebc:	4402      	add	r2, r0
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d100      	bne.n	8003ec6 <memset+0xa>
 8003ec4:	4770      	bx	lr
 8003ec6:	f803 1b01 	strb.w	r1, [r3], #1
 8003eca:	e7f9      	b.n	8003ec0 <memset+0x4>

08003ecc <siscanf>:
 8003ecc:	b40e      	push	{r1, r2, r3}
 8003ece:	b510      	push	{r4, lr}
 8003ed0:	b09f      	sub	sp, #124	; 0x7c
 8003ed2:	ac21      	add	r4, sp, #132	; 0x84
 8003ed4:	f44f 7101 	mov.w	r1, #516	; 0x204
 8003ed8:	f854 2b04 	ldr.w	r2, [r4], #4
 8003edc:	9201      	str	r2, [sp, #4]
 8003ede:	f8ad 101c 	strh.w	r1, [sp, #28]
 8003ee2:	9004      	str	r0, [sp, #16]
 8003ee4:	9008      	str	r0, [sp, #32]
 8003ee6:	f7fc f9ab 	bl	8000240 <strlen>
 8003eea:	4b0c      	ldr	r3, [pc, #48]	; (8003f1c <siscanf+0x50>)
 8003eec:	9005      	str	r0, [sp, #20]
 8003eee:	9009      	str	r0, [sp, #36]	; 0x24
 8003ef0:	930d      	str	r3, [sp, #52]	; 0x34
 8003ef2:	480b      	ldr	r0, [pc, #44]	; (8003f20 <siscanf+0x54>)
 8003ef4:	9a01      	ldr	r2, [sp, #4]
 8003ef6:	6800      	ldr	r0, [r0, #0]
 8003ef8:	9403      	str	r4, [sp, #12]
 8003efa:	2300      	movs	r3, #0
 8003efc:	9311      	str	r3, [sp, #68]	; 0x44
 8003efe:	9316      	str	r3, [sp, #88]	; 0x58
 8003f00:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003f04:	f8ad 301e 	strh.w	r3, [sp, #30]
 8003f08:	a904      	add	r1, sp, #16
 8003f0a:	4623      	mov	r3, r4
 8003f0c:	f000 f88c 	bl	8004028 <__ssvfiscanf_r>
 8003f10:	b01f      	add	sp, #124	; 0x7c
 8003f12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f16:	b003      	add	sp, #12
 8003f18:	4770      	bx	lr
 8003f1a:	bf00      	nop
 8003f1c:	08003f25 	.word	0x08003f25
 8003f20:	2000000c 	.word	0x2000000c

08003f24 <__seofread>:
 8003f24:	2000      	movs	r0, #0
 8003f26:	4770      	bx	lr

08003f28 <strncmp>:
 8003f28:	b510      	push	{r4, lr}
 8003f2a:	b16a      	cbz	r2, 8003f48 <strncmp+0x20>
 8003f2c:	3901      	subs	r1, #1
 8003f2e:	1884      	adds	r4, r0, r2
 8003f30:	f810 3b01 	ldrb.w	r3, [r0], #1
 8003f34:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d103      	bne.n	8003f44 <strncmp+0x1c>
 8003f3c:	42a0      	cmp	r0, r4
 8003f3e:	d001      	beq.n	8003f44 <strncmp+0x1c>
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d1f5      	bne.n	8003f30 <strncmp+0x8>
 8003f44:	1a98      	subs	r0, r3, r2
 8003f46:	bd10      	pop	{r4, pc}
 8003f48:	4610      	mov	r0, r2
 8003f4a:	e7fc      	b.n	8003f46 <strncmp+0x1e>

08003f4c <strncpy>:
 8003f4c:	b510      	push	{r4, lr}
 8003f4e:	3901      	subs	r1, #1
 8003f50:	4603      	mov	r3, r0
 8003f52:	b132      	cbz	r2, 8003f62 <strncpy+0x16>
 8003f54:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8003f58:	f803 4b01 	strb.w	r4, [r3], #1
 8003f5c:	3a01      	subs	r2, #1
 8003f5e:	2c00      	cmp	r4, #0
 8003f60:	d1f7      	bne.n	8003f52 <strncpy+0x6>
 8003f62:	441a      	add	r2, r3
 8003f64:	2100      	movs	r1, #0
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d100      	bne.n	8003f6c <strncpy+0x20>
 8003f6a:	bd10      	pop	{r4, pc}
 8003f6c:	f803 1b01 	strb.w	r1, [r3], #1
 8003f70:	e7f9      	b.n	8003f66 <strncpy+0x1a>

08003f72 <_sungetc_r>:
 8003f72:	b538      	push	{r3, r4, r5, lr}
 8003f74:	1c4b      	adds	r3, r1, #1
 8003f76:	4614      	mov	r4, r2
 8003f78:	d103      	bne.n	8003f82 <_sungetc_r+0x10>
 8003f7a:	f04f 35ff 	mov.w	r5, #4294967295
 8003f7e:	4628      	mov	r0, r5
 8003f80:	bd38      	pop	{r3, r4, r5, pc}
 8003f82:	8993      	ldrh	r3, [r2, #12]
 8003f84:	f023 0320 	bic.w	r3, r3, #32
 8003f88:	8193      	strh	r3, [r2, #12]
 8003f8a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003f8c:	6852      	ldr	r2, [r2, #4]
 8003f8e:	b2cd      	uxtb	r5, r1
 8003f90:	b18b      	cbz	r3, 8003fb6 <_sungetc_r+0x44>
 8003f92:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003f94:	4293      	cmp	r3, r2
 8003f96:	dd08      	ble.n	8003faa <_sungetc_r+0x38>
 8003f98:	6823      	ldr	r3, [r4, #0]
 8003f9a:	1e5a      	subs	r2, r3, #1
 8003f9c:	6022      	str	r2, [r4, #0]
 8003f9e:	f803 5c01 	strb.w	r5, [r3, #-1]
 8003fa2:	6863      	ldr	r3, [r4, #4]
 8003fa4:	3301      	adds	r3, #1
 8003fa6:	6063      	str	r3, [r4, #4]
 8003fa8:	e7e9      	b.n	8003f7e <_sungetc_r+0xc>
 8003faa:	4621      	mov	r1, r4
 8003fac:	f000 fc3e 	bl	800482c <__submore>
 8003fb0:	2800      	cmp	r0, #0
 8003fb2:	d0f1      	beq.n	8003f98 <_sungetc_r+0x26>
 8003fb4:	e7e1      	b.n	8003f7a <_sungetc_r+0x8>
 8003fb6:	6921      	ldr	r1, [r4, #16]
 8003fb8:	6823      	ldr	r3, [r4, #0]
 8003fba:	b151      	cbz	r1, 8003fd2 <_sungetc_r+0x60>
 8003fbc:	4299      	cmp	r1, r3
 8003fbe:	d208      	bcs.n	8003fd2 <_sungetc_r+0x60>
 8003fc0:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8003fc4:	42a9      	cmp	r1, r5
 8003fc6:	d104      	bne.n	8003fd2 <_sungetc_r+0x60>
 8003fc8:	3b01      	subs	r3, #1
 8003fca:	3201      	adds	r2, #1
 8003fcc:	6023      	str	r3, [r4, #0]
 8003fce:	6062      	str	r2, [r4, #4]
 8003fd0:	e7d5      	b.n	8003f7e <_sungetc_r+0xc>
 8003fd2:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8003fd6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003fda:	6363      	str	r3, [r4, #52]	; 0x34
 8003fdc:	2303      	movs	r3, #3
 8003fde:	63a3      	str	r3, [r4, #56]	; 0x38
 8003fe0:	4623      	mov	r3, r4
 8003fe2:	f803 5f46 	strb.w	r5, [r3, #70]!
 8003fe6:	6023      	str	r3, [r4, #0]
 8003fe8:	2301      	movs	r3, #1
 8003fea:	e7dc      	b.n	8003fa6 <_sungetc_r+0x34>

08003fec <__ssrefill_r>:
 8003fec:	b510      	push	{r4, lr}
 8003fee:	460c      	mov	r4, r1
 8003ff0:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8003ff2:	b169      	cbz	r1, 8004010 <__ssrefill_r+0x24>
 8003ff4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003ff8:	4299      	cmp	r1, r3
 8003ffa:	d001      	beq.n	8004000 <__ssrefill_r+0x14>
 8003ffc:	f000 fc60 	bl	80048c0 <_free_r>
 8004000:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004002:	6063      	str	r3, [r4, #4]
 8004004:	2000      	movs	r0, #0
 8004006:	6360      	str	r0, [r4, #52]	; 0x34
 8004008:	b113      	cbz	r3, 8004010 <__ssrefill_r+0x24>
 800400a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800400c:	6023      	str	r3, [r4, #0]
 800400e:	bd10      	pop	{r4, pc}
 8004010:	6923      	ldr	r3, [r4, #16]
 8004012:	6023      	str	r3, [r4, #0]
 8004014:	2300      	movs	r3, #0
 8004016:	6063      	str	r3, [r4, #4]
 8004018:	89a3      	ldrh	r3, [r4, #12]
 800401a:	f043 0320 	orr.w	r3, r3, #32
 800401e:	81a3      	strh	r3, [r4, #12]
 8004020:	f04f 30ff 	mov.w	r0, #4294967295
 8004024:	e7f3      	b.n	800400e <__ssrefill_r+0x22>
	...

08004028 <__ssvfiscanf_r>:
 8004028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800402c:	460c      	mov	r4, r1
 800402e:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8004032:	2100      	movs	r1, #0
 8004034:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8004038:	49b2      	ldr	r1, [pc, #712]	; (8004304 <__ssvfiscanf_r+0x2dc>)
 800403a:	91a0      	str	r1, [sp, #640]	; 0x280
 800403c:	f10d 0804 	add.w	r8, sp, #4
 8004040:	49b1      	ldr	r1, [pc, #708]	; (8004308 <__ssvfiscanf_r+0x2e0>)
 8004042:	4fb2      	ldr	r7, [pc, #712]	; (800430c <__ssvfiscanf_r+0x2e4>)
 8004044:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 8004310 <__ssvfiscanf_r+0x2e8>
 8004048:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800404c:	4606      	mov	r6, r0
 800404e:	91a1      	str	r1, [sp, #644]	; 0x284
 8004050:	9300      	str	r3, [sp, #0]
 8004052:	f892 a000 	ldrb.w	sl, [r2]
 8004056:	f1ba 0f00 	cmp.w	sl, #0
 800405a:	f000 8151 	beq.w	8004300 <__ssvfiscanf_r+0x2d8>
 800405e:	f81a 3007 	ldrb.w	r3, [sl, r7]
 8004062:	f013 0308 	ands.w	r3, r3, #8
 8004066:	f102 0501 	add.w	r5, r2, #1
 800406a:	d019      	beq.n	80040a0 <__ssvfiscanf_r+0x78>
 800406c:	6863      	ldr	r3, [r4, #4]
 800406e:	2b00      	cmp	r3, #0
 8004070:	dd0f      	ble.n	8004092 <__ssvfiscanf_r+0x6a>
 8004072:	6823      	ldr	r3, [r4, #0]
 8004074:	781a      	ldrb	r2, [r3, #0]
 8004076:	5cba      	ldrb	r2, [r7, r2]
 8004078:	0712      	lsls	r2, r2, #28
 800407a:	d401      	bmi.n	8004080 <__ssvfiscanf_r+0x58>
 800407c:	462a      	mov	r2, r5
 800407e:	e7e8      	b.n	8004052 <__ssvfiscanf_r+0x2a>
 8004080:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8004082:	3201      	adds	r2, #1
 8004084:	9245      	str	r2, [sp, #276]	; 0x114
 8004086:	6862      	ldr	r2, [r4, #4]
 8004088:	3301      	adds	r3, #1
 800408a:	3a01      	subs	r2, #1
 800408c:	6062      	str	r2, [r4, #4]
 800408e:	6023      	str	r3, [r4, #0]
 8004090:	e7ec      	b.n	800406c <__ssvfiscanf_r+0x44>
 8004092:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8004094:	4621      	mov	r1, r4
 8004096:	4630      	mov	r0, r6
 8004098:	4798      	blx	r3
 800409a:	2800      	cmp	r0, #0
 800409c:	d0e9      	beq.n	8004072 <__ssvfiscanf_r+0x4a>
 800409e:	e7ed      	b.n	800407c <__ssvfiscanf_r+0x54>
 80040a0:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 80040a4:	f040 8083 	bne.w	80041ae <__ssvfiscanf_r+0x186>
 80040a8:	9341      	str	r3, [sp, #260]	; 0x104
 80040aa:	9343      	str	r3, [sp, #268]	; 0x10c
 80040ac:	7853      	ldrb	r3, [r2, #1]
 80040ae:	2b2a      	cmp	r3, #42	; 0x2a
 80040b0:	bf02      	ittt	eq
 80040b2:	2310      	moveq	r3, #16
 80040b4:	1c95      	addeq	r5, r2, #2
 80040b6:	9341      	streq	r3, [sp, #260]	; 0x104
 80040b8:	220a      	movs	r2, #10
 80040ba:	46ab      	mov	fp, r5
 80040bc:	f81b 1b01 	ldrb.w	r1, [fp], #1
 80040c0:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80040c4:	2b09      	cmp	r3, #9
 80040c6:	d91d      	bls.n	8004104 <__ssvfiscanf_r+0xdc>
 80040c8:	4891      	ldr	r0, [pc, #580]	; (8004310 <__ssvfiscanf_r+0x2e8>)
 80040ca:	2203      	movs	r2, #3
 80040cc:	f7fc f8c0 	bl	8000250 <memchr>
 80040d0:	b140      	cbz	r0, 80040e4 <__ssvfiscanf_r+0xbc>
 80040d2:	2301      	movs	r3, #1
 80040d4:	eba0 0009 	sub.w	r0, r0, r9
 80040d8:	fa03 f000 	lsl.w	r0, r3, r0
 80040dc:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80040de:	4318      	orrs	r0, r3
 80040e0:	9041      	str	r0, [sp, #260]	; 0x104
 80040e2:	465d      	mov	r5, fp
 80040e4:	f815 3b01 	ldrb.w	r3, [r5], #1
 80040e8:	2b78      	cmp	r3, #120	; 0x78
 80040ea:	d806      	bhi.n	80040fa <__ssvfiscanf_r+0xd2>
 80040ec:	2b57      	cmp	r3, #87	; 0x57
 80040ee:	d810      	bhi.n	8004112 <__ssvfiscanf_r+0xea>
 80040f0:	2b25      	cmp	r3, #37	; 0x25
 80040f2:	d05c      	beq.n	80041ae <__ssvfiscanf_r+0x186>
 80040f4:	d856      	bhi.n	80041a4 <__ssvfiscanf_r+0x17c>
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d074      	beq.n	80041e4 <__ssvfiscanf_r+0x1bc>
 80040fa:	2303      	movs	r3, #3
 80040fc:	9347      	str	r3, [sp, #284]	; 0x11c
 80040fe:	230a      	movs	r3, #10
 8004100:	9342      	str	r3, [sp, #264]	; 0x108
 8004102:	e081      	b.n	8004208 <__ssvfiscanf_r+0x1e0>
 8004104:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8004106:	fb02 1303 	mla	r3, r2, r3, r1
 800410a:	3b30      	subs	r3, #48	; 0x30
 800410c:	9343      	str	r3, [sp, #268]	; 0x10c
 800410e:	465d      	mov	r5, fp
 8004110:	e7d3      	b.n	80040ba <__ssvfiscanf_r+0x92>
 8004112:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8004116:	2a20      	cmp	r2, #32
 8004118:	d8ef      	bhi.n	80040fa <__ssvfiscanf_r+0xd2>
 800411a:	a101      	add	r1, pc, #4	; (adr r1, 8004120 <__ssvfiscanf_r+0xf8>)
 800411c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004120:	080041f3 	.word	0x080041f3
 8004124:	080040fb 	.word	0x080040fb
 8004128:	080040fb 	.word	0x080040fb
 800412c:	08004251 	.word	0x08004251
 8004130:	080040fb 	.word	0x080040fb
 8004134:	080040fb 	.word	0x080040fb
 8004138:	080040fb 	.word	0x080040fb
 800413c:	080040fb 	.word	0x080040fb
 8004140:	080040fb 	.word	0x080040fb
 8004144:	080040fb 	.word	0x080040fb
 8004148:	080040fb 	.word	0x080040fb
 800414c:	08004267 	.word	0x08004267
 8004150:	0800423d 	.word	0x0800423d
 8004154:	080041ab 	.word	0x080041ab
 8004158:	080041ab 	.word	0x080041ab
 800415c:	080041ab 	.word	0x080041ab
 8004160:	080040fb 	.word	0x080040fb
 8004164:	08004241 	.word	0x08004241
 8004168:	080040fb 	.word	0x080040fb
 800416c:	080040fb 	.word	0x080040fb
 8004170:	080040fb 	.word	0x080040fb
 8004174:	080040fb 	.word	0x080040fb
 8004178:	08004277 	.word	0x08004277
 800417c:	08004249 	.word	0x08004249
 8004180:	080041eb 	.word	0x080041eb
 8004184:	080040fb 	.word	0x080040fb
 8004188:	080040fb 	.word	0x080040fb
 800418c:	08004273 	.word	0x08004273
 8004190:	080040fb 	.word	0x080040fb
 8004194:	0800423d 	.word	0x0800423d
 8004198:	080040fb 	.word	0x080040fb
 800419c:	080040fb 	.word	0x080040fb
 80041a0:	080041f3 	.word	0x080041f3
 80041a4:	3b45      	subs	r3, #69	; 0x45
 80041a6:	2b02      	cmp	r3, #2
 80041a8:	d8a7      	bhi.n	80040fa <__ssvfiscanf_r+0xd2>
 80041aa:	2305      	movs	r3, #5
 80041ac:	e02b      	b.n	8004206 <__ssvfiscanf_r+0x1de>
 80041ae:	6863      	ldr	r3, [r4, #4]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	dd0d      	ble.n	80041d0 <__ssvfiscanf_r+0x1a8>
 80041b4:	6823      	ldr	r3, [r4, #0]
 80041b6:	781a      	ldrb	r2, [r3, #0]
 80041b8:	4552      	cmp	r2, sl
 80041ba:	f040 80a1 	bne.w	8004300 <__ssvfiscanf_r+0x2d8>
 80041be:	3301      	adds	r3, #1
 80041c0:	6862      	ldr	r2, [r4, #4]
 80041c2:	6023      	str	r3, [r4, #0]
 80041c4:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80041c6:	3a01      	subs	r2, #1
 80041c8:	3301      	adds	r3, #1
 80041ca:	6062      	str	r2, [r4, #4]
 80041cc:	9345      	str	r3, [sp, #276]	; 0x114
 80041ce:	e755      	b.n	800407c <__ssvfiscanf_r+0x54>
 80041d0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80041d2:	4621      	mov	r1, r4
 80041d4:	4630      	mov	r0, r6
 80041d6:	4798      	blx	r3
 80041d8:	2800      	cmp	r0, #0
 80041da:	d0eb      	beq.n	80041b4 <__ssvfiscanf_r+0x18c>
 80041dc:	9844      	ldr	r0, [sp, #272]	; 0x110
 80041de:	2800      	cmp	r0, #0
 80041e0:	f040 8084 	bne.w	80042ec <__ssvfiscanf_r+0x2c4>
 80041e4:	f04f 30ff 	mov.w	r0, #4294967295
 80041e8:	e086      	b.n	80042f8 <__ssvfiscanf_r+0x2d0>
 80041ea:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80041ec:	f042 0220 	orr.w	r2, r2, #32
 80041f0:	9241      	str	r2, [sp, #260]	; 0x104
 80041f2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80041f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041f8:	9241      	str	r2, [sp, #260]	; 0x104
 80041fa:	2210      	movs	r2, #16
 80041fc:	2b6f      	cmp	r3, #111	; 0x6f
 80041fe:	9242      	str	r2, [sp, #264]	; 0x108
 8004200:	bf34      	ite	cc
 8004202:	2303      	movcc	r3, #3
 8004204:	2304      	movcs	r3, #4
 8004206:	9347      	str	r3, [sp, #284]	; 0x11c
 8004208:	6863      	ldr	r3, [r4, #4]
 800420a:	2b00      	cmp	r3, #0
 800420c:	dd41      	ble.n	8004292 <__ssvfiscanf_r+0x26a>
 800420e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8004210:	0659      	lsls	r1, r3, #25
 8004212:	d404      	bmi.n	800421e <__ssvfiscanf_r+0x1f6>
 8004214:	6823      	ldr	r3, [r4, #0]
 8004216:	781a      	ldrb	r2, [r3, #0]
 8004218:	5cba      	ldrb	r2, [r7, r2]
 800421a:	0712      	lsls	r2, r2, #28
 800421c:	d440      	bmi.n	80042a0 <__ssvfiscanf_r+0x278>
 800421e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8004220:	2b02      	cmp	r3, #2
 8004222:	dc4f      	bgt.n	80042c4 <__ssvfiscanf_r+0x29c>
 8004224:	466b      	mov	r3, sp
 8004226:	4622      	mov	r2, r4
 8004228:	a941      	add	r1, sp, #260	; 0x104
 800422a:	4630      	mov	r0, r6
 800422c:	f000 f874 	bl	8004318 <_scanf_chars>
 8004230:	2801      	cmp	r0, #1
 8004232:	d065      	beq.n	8004300 <__ssvfiscanf_r+0x2d8>
 8004234:	2802      	cmp	r0, #2
 8004236:	f47f af21 	bne.w	800407c <__ssvfiscanf_r+0x54>
 800423a:	e7cf      	b.n	80041dc <__ssvfiscanf_r+0x1b4>
 800423c:	220a      	movs	r2, #10
 800423e:	e7dd      	b.n	80041fc <__ssvfiscanf_r+0x1d4>
 8004240:	2300      	movs	r3, #0
 8004242:	9342      	str	r3, [sp, #264]	; 0x108
 8004244:	2303      	movs	r3, #3
 8004246:	e7de      	b.n	8004206 <__ssvfiscanf_r+0x1de>
 8004248:	2308      	movs	r3, #8
 800424a:	9342      	str	r3, [sp, #264]	; 0x108
 800424c:	2304      	movs	r3, #4
 800424e:	e7da      	b.n	8004206 <__ssvfiscanf_r+0x1de>
 8004250:	4629      	mov	r1, r5
 8004252:	4640      	mov	r0, r8
 8004254:	f000 f9ac 	bl	80045b0 <__sccl>
 8004258:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800425a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800425e:	9341      	str	r3, [sp, #260]	; 0x104
 8004260:	4605      	mov	r5, r0
 8004262:	2301      	movs	r3, #1
 8004264:	e7cf      	b.n	8004206 <__ssvfiscanf_r+0x1de>
 8004266:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8004268:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800426c:	9341      	str	r3, [sp, #260]	; 0x104
 800426e:	2300      	movs	r3, #0
 8004270:	e7c9      	b.n	8004206 <__ssvfiscanf_r+0x1de>
 8004272:	2302      	movs	r3, #2
 8004274:	e7c7      	b.n	8004206 <__ssvfiscanf_r+0x1de>
 8004276:	9841      	ldr	r0, [sp, #260]	; 0x104
 8004278:	06c3      	lsls	r3, r0, #27
 800427a:	f53f aeff 	bmi.w	800407c <__ssvfiscanf_r+0x54>
 800427e:	9b00      	ldr	r3, [sp, #0]
 8004280:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8004282:	1d19      	adds	r1, r3, #4
 8004284:	9100      	str	r1, [sp, #0]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	07c0      	lsls	r0, r0, #31
 800428a:	bf4c      	ite	mi
 800428c:	801a      	strhmi	r2, [r3, #0]
 800428e:	601a      	strpl	r2, [r3, #0]
 8004290:	e6f4      	b.n	800407c <__ssvfiscanf_r+0x54>
 8004292:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8004294:	4621      	mov	r1, r4
 8004296:	4630      	mov	r0, r6
 8004298:	4798      	blx	r3
 800429a:	2800      	cmp	r0, #0
 800429c:	d0b7      	beq.n	800420e <__ssvfiscanf_r+0x1e6>
 800429e:	e79d      	b.n	80041dc <__ssvfiscanf_r+0x1b4>
 80042a0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80042a2:	3201      	adds	r2, #1
 80042a4:	9245      	str	r2, [sp, #276]	; 0x114
 80042a6:	6862      	ldr	r2, [r4, #4]
 80042a8:	3a01      	subs	r2, #1
 80042aa:	2a00      	cmp	r2, #0
 80042ac:	6062      	str	r2, [r4, #4]
 80042ae:	dd02      	ble.n	80042b6 <__ssvfiscanf_r+0x28e>
 80042b0:	3301      	adds	r3, #1
 80042b2:	6023      	str	r3, [r4, #0]
 80042b4:	e7ae      	b.n	8004214 <__ssvfiscanf_r+0x1ec>
 80042b6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80042b8:	4621      	mov	r1, r4
 80042ba:	4630      	mov	r0, r6
 80042bc:	4798      	blx	r3
 80042be:	2800      	cmp	r0, #0
 80042c0:	d0a8      	beq.n	8004214 <__ssvfiscanf_r+0x1ec>
 80042c2:	e78b      	b.n	80041dc <__ssvfiscanf_r+0x1b4>
 80042c4:	2b04      	cmp	r3, #4
 80042c6:	dc06      	bgt.n	80042d6 <__ssvfiscanf_r+0x2ae>
 80042c8:	466b      	mov	r3, sp
 80042ca:	4622      	mov	r2, r4
 80042cc:	a941      	add	r1, sp, #260	; 0x104
 80042ce:	4630      	mov	r0, r6
 80042d0:	f000 f87a 	bl	80043c8 <_scanf_i>
 80042d4:	e7ac      	b.n	8004230 <__ssvfiscanf_r+0x208>
 80042d6:	4b0f      	ldr	r3, [pc, #60]	; (8004314 <__ssvfiscanf_r+0x2ec>)
 80042d8:	2b00      	cmp	r3, #0
 80042da:	f43f aecf 	beq.w	800407c <__ssvfiscanf_r+0x54>
 80042de:	466b      	mov	r3, sp
 80042e0:	4622      	mov	r2, r4
 80042e2:	a941      	add	r1, sp, #260	; 0x104
 80042e4:	4630      	mov	r0, r6
 80042e6:	f3af 8000 	nop.w
 80042ea:	e7a1      	b.n	8004230 <__ssvfiscanf_r+0x208>
 80042ec:	89a3      	ldrh	r3, [r4, #12]
 80042ee:	f013 0f40 	tst.w	r3, #64	; 0x40
 80042f2:	bf18      	it	ne
 80042f4:	f04f 30ff 	movne.w	r0, #4294967295
 80042f8:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 80042fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004300:	9844      	ldr	r0, [sp, #272]	; 0x110
 8004302:	e7f9      	b.n	80042f8 <__ssvfiscanf_r+0x2d0>
 8004304:	08003f73 	.word	0x08003f73
 8004308:	08003fed 	.word	0x08003fed
 800430c:	08004c0c 	.word	0x08004c0c
 8004310:	08004bec 	.word	0x08004bec
 8004314:	00000000 	.word	0x00000000

08004318 <_scanf_chars>:
 8004318:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800431c:	4615      	mov	r5, r2
 800431e:	688a      	ldr	r2, [r1, #8]
 8004320:	4680      	mov	r8, r0
 8004322:	460c      	mov	r4, r1
 8004324:	b932      	cbnz	r2, 8004334 <_scanf_chars+0x1c>
 8004326:	698a      	ldr	r2, [r1, #24]
 8004328:	2a00      	cmp	r2, #0
 800432a:	bf0c      	ite	eq
 800432c:	2201      	moveq	r2, #1
 800432e:	f04f 32ff 	movne.w	r2, #4294967295
 8004332:	608a      	str	r2, [r1, #8]
 8004334:	6822      	ldr	r2, [r4, #0]
 8004336:	f8df 908c 	ldr.w	r9, [pc, #140]	; 80043c4 <_scanf_chars+0xac>
 800433a:	06d1      	lsls	r1, r2, #27
 800433c:	bf5f      	itttt	pl
 800433e:	681a      	ldrpl	r2, [r3, #0]
 8004340:	1d11      	addpl	r1, r2, #4
 8004342:	6019      	strpl	r1, [r3, #0]
 8004344:	6816      	ldrpl	r6, [r2, #0]
 8004346:	2700      	movs	r7, #0
 8004348:	69a0      	ldr	r0, [r4, #24]
 800434a:	b188      	cbz	r0, 8004370 <_scanf_chars+0x58>
 800434c:	2801      	cmp	r0, #1
 800434e:	d107      	bne.n	8004360 <_scanf_chars+0x48>
 8004350:	682b      	ldr	r3, [r5, #0]
 8004352:	781a      	ldrb	r2, [r3, #0]
 8004354:	6963      	ldr	r3, [r4, #20]
 8004356:	5c9b      	ldrb	r3, [r3, r2]
 8004358:	b953      	cbnz	r3, 8004370 <_scanf_chars+0x58>
 800435a:	bb27      	cbnz	r7, 80043a6 <_scanf_chars+0x8e>
 800435c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004360:	2802      	cmp	r0, #2
 8004362:	d120      	bne.n	80043a6 <_scanf_chars+0x8e>
 8004364:	682b      	ldr	r3, [r5, #0]
 8004366:	781b      	ldrb	r3, [r3, #0]
 8004368:	f813 3009 	ldrb.w	r3, [r3, r9]
 800436c:	071b      	lsls	r3, r3, #28
 800436e:	d41a      	bmi.n	80043a6 <_scanf_chars+0x8e>
 8004370:	6823      	ldr	r3, [r4, #0]
 8004372:	06da      	lsls	r2, r3, #27
 8004374:	bf5e      	ittt	pl
 8004376:	682b      	ldrpl	r3, [r5, #0]
 8004378:	781b      	ldrbpl	r3, [r3, #0]
 800437a:	f806 3b01 	strbpl.w	r3, [r6], #1
 800437e:	682a      	ldr	r2, [r5, #0]
 8004380:	686b      	ldr	r3, [r5, #4]
 8004382:	3201      	adds	r2, #1
 8004384:	602a      	str	r2, [r5, #0]
 8004386:	68a2      	ldr	r2, [r4, #8]
 8004388:	3b01      	subs	r3, #1
 800438a:	3a01      	subs	r2, #1
 800438c:	606b      	str	r3, [r5, #4]
 800438e:	3701      	adds	r7, #1
 8004390:	60a2      	str	r2, [r4, #8]
 8004392:	b142      	cbz	r2, 80043a6 <_scanf_chars+0x8e>
 8004394:	2b00      	cmp	r3, #0
 8004396:	dcd7      	bgt.n	8004348 <_scanf_chars+0x30>
 8004398:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800439c:	4629      	mov	r1, r5
 800439e:	4640      	mov	r0, r8
 80043a0:	4798      	blx	r3
 80043a2:	2800      	cmp	r0, #0
 80043a4:	d0d0      	beq.n	8004348 <_scanf_chars+0x30>
 80043a6:	6823      	ldr	r3, [r4, #0]
 80043a8:	f013 0310 	ands.w	r3, r3, #16
 80043ac:	d105      	bne.n	80043ba <_scanf_chars+0xa2>
 80043ae:	68e2      	ldr	r2, [r4, #12]
 80043b0:	3201      	adds	r2, #1
 80043b2:	60e2      	str	r2, [r4, #12]
 80043b4:	69a2      	ldr	r2, [r4, #24]
 80043b6:	b102      	cbz	r2, 80043ba <_scanf_chars+0xa2>
 80043b8:	7033      	strb	r3, [r6, #0]
 80043ba:	6923      	ldr	r3, [r4, #16]
 80043bc:	441f      	add	r7, r3
 80043be:	6127      	str	r7, [r4, #16]
 80043c0:	2000      	movs	r0, #0
 80043c2:	e7cb      	b.n	800435c <_scanf_chars+0x44>
 80043c4:	08004c0c 	.word	0x08004c0c

080043c8 <_scanf_i>:
 80043c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043cc:	4698      	mov	r8, r3
 80043ce:	4b74      	ldr	r3, [pc, #464]	; (80045a0 <_scanf_i+0x1d8>)
 80043d0:	460c      	mov	r4, r1
 80043d2:	4682      	mov	sl, r0
 80043d4:	4616      	mov	r6, r2
 80043d6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80043da:	b087      	sub	sp, #28
 80043dc:	ab03      	add	r3, sp, #12
 80043de:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80043e2:	4b70      	ldr	r3, [pc, #448]	; (80045a4 <_scanf_i+0x1dc>)
 80043e4:	69a1      	ldr	r1, [r4, #24]
 80043e6:	4a70      	ldr	r2, [pc, #448]	; (80045a8 <_scanf_i+0x1e0>)
 80043e8:	2903      	cmp	r1, #3
 80043ea:	bf18      	it	ne
 80043ec:	461a      	movne	r2, r3
 80043ee:	68a3      	ldr	r3, [r4, #8]
 80043f0:	9201      	str	r2, [sp, #4]
 80043f2:	1e5a      	subs	r2, r3, #1
 80043f4:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80043f8:	bf88      	it	hi
 80043fa:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80043fe:	4627      	mov	r7, r4
 8004400:	bf82      	ittt	hi
 8004402:	eb03 0905 	addhi.w	r9, r3, r5
 8004406:	f240 135d 	movwhi	r3, #349	; 0x15d
 800440a:	60a3      	strhi	r3, [r4, #8]
 800440c:	f857 3b1c 	ldr.w	r3, [r7], #28
 8004410:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8004414:	bf98      	it	ls
 8004416:	f04f 0900 	movls.w	r9, #0
 800441a:	6023      	str	r3, [r4, #0]
 800441c:	463d      	mov	r5, r7
 800441e:	f04f 0b00 	mov.w	fp, #0
 8004422:	6831      	ldr	r1, [r6, #0]
 8004424:	ab03      	add	r3, sp, #12
 8004426:	7809      	ldrb	r1, [r1, #0]
 8004428:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800442c:	2202      	movs	r2, #2
 800442e:	f7fb ff0f 	bl	8000250 <memchr>
 8004432:	b328      	cbz	r0, 8004480 <_scanf_i+0xb8>
 8004434:	f1bb 0f01 	cmp.w	fp, #1
 8004438:	d159      	bne.n	80044ee <_scanf_i+0x126>
 800443a:	6862      	ldr	r2, [r4, #4]
 800443c:	b92a      	cbnz	r2, 800444a <_scanf_i+0x82>
 800443e:	6822      	ldr	r2, [r4, #0]
 8004440:	2308      	movs	r3, #8
 8004442:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004446:	6063      	str	r3, [r4, #4]
 8004448:	6022      	str	r2, [r4, #0]
 800444a:	6822      	ldr	r2, [r4, #0]
 800444c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8004450:	6022      	str	r2, [r4, #0]
 8004452:	68a2      	ldr	r2, [r4, #8]
 8004454:	1e51      	subs	r1, r2, #1
 8004456:	60a1      	str	r1, [r4, #8]
 8004458:	b192      	cbz	r2, 8004480 <_scanf_i+0xb8>
 800445a:	6832      	ldr	r2, [r6, #0]
 800445c:	1c51      	adds	r1, r2, #1
 800445e:	6031      	str	r1, [r6, #0]
 8004460:	7812      	ldrb	r2, [r2, #0]
 8004462:	f805 2b01 	strb.w	r2, [r5], #1
 8004466:	6872      	ldr	r2, [r6, #4]
 8004468:	3a01      	subs	r2, #1
 800446a:	2a00      	cmp	r2, #0
 800446c:	6072      	str	r2, [r6, #4]
 800446e:	dc07      	bgt.n	8004480 <_scanf_i+0xb8>
 8004470:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8004474:	4631      	mov	r1, r6
 8004476:	4650      	mov	r0, sl
 8004478:	4790      	blx	r2
 800447a:	2800      	cmp	r0, #0
 800447c:	f040 8085 	bne.w	800458a <_scanf_i+0x1c2>
 8004480:	f10b 0b01 	add.w	fp, fp, #1
 8004484:	f1bb 0f03 	cmp.w	fp, #3
 8004488:	d1cb      	bne.n	8004422 <_scanf_i+0x5a>
 800448a:	6863      	ldr	r3, [r4, #4]
 800448c:	b90b      	cbnz	r3, 8004492 <_scanf_i+0xca>
 800448e:	230a      	movs	r3, #10
 8004490:	6063      	str	r3, [r4, #4]
 8004492:	6863      	ldr	r3, [r4, #4]
 8004494:	4945      	ldr	r1, [pc, #276]	; (80045ac <_scanf_i+0x1e4>)
 8004496:	6960      	ldr	r0, [r4, #20]
 8004498:	1ac9      	subs	r1, r1, r3
 800449a:	f000 f889 	bl	80045b0 <__sccl>
 800449e:	f04f 0b00 	mov.w	fp, #0
 80044a2:	68a3      	ldr	r3, [r4, #8]
 80044a4:	6822      	ldr	r2, [r4, #0]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d03d      	beq.n	8004526 <_scanf_i+0x15e>
 80044aa:	6831      	ldr	r1, [r6, #0]
 80044ac:	6960      	ldr	r0, [r4, #20]
 80044ae:	f891 c000 	ldrb.w	ip, [r1]
 80044b2:	f810 000c 	ldrb.w	r0, [r0, ip]
 80044b6:	2800      	cmp	r0, #0
 80044b8:	d035      	beq.n	8004526 <_scanf_i+0x15e>
 80044ba:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80044be:	d124      	bne.n	800450a <_scanf_i+0x142>
 80044c0:	0510      	lsls	r0, r2, #20
 80044c2:	d522      	bpl.n	800450a <_scanf_i+0x142>
 80044c4:	f10b 0b01 	add.w	fp, fp, #1
 80044c8:	f1b9 0f00 	cmp.w	r9, #0
 80044cc:	d003      	beq.n	80044d6 <_scanf_i+0x10e>
 80044ce:	3301      	adds	r3, #1
 80044d0:	f109 39ff 	add.w	r9, r9, #4294967295
 80044d4:	60a3      	str	r3, [r4, #8]
 80044d6:	6873      	ldr	r3, [r6, #4]
 80044d8:	3b01      	subs	r3, #1
 80044da:	2b00      	cmp	r3, #0
 80044dc:	6073      	str	r3, [r6, #4]
 80044de:	dd1b      	ble.n	8004518 <_scanf_i+0x150>
 80044e0:	6833      	ldr	r3, [r6, #0]
 80044e2:	3301      	adds	r3, #1
 80044e4:	6033      	str	r3, [r6, #0]
 80044e6:	68a3      	ldr	r3, [r4, #8]
 80044e8:	3b01      	subs	r3, #1
 80044ea:	60a3      	str	r3, [r4, #8]
 80044ec:	e7d9      	b.n	80044a2 <_scanf_i+0xda>
 80044ee:	f1bb 0f02 	cmp.w	fp, #2
 80044f2:	d1ae      	bne.n	8004452 <_scanf_i+0x8a>
 80044f4:	6822      	ldr	r2, [r4, #0]
 80044f6:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80044fa:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80044fe:	d1bf      	bne.n	8004480 <_scanf_i+0xb8>
 8004500:	2310      	movs	r3, #16
 8004502:	6063      	str	r3, [r4, #4]
 8004504:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004508:	e7a2      	b.n	8004450 <_scanf_i+0x88>
 800450a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800450e:	6022      	str	r2, [r4, #0]
 8004510:	780b      	ldrb	r3, [r1, #0]
 8004512:	f805 3b01 	strb.w	r3, [r5], #1
 8004516:	e7de      	b.n	80044d6 <_scanf_i+0x10e>
 8004518:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800451c:	4631      	mov	r1, r6
 800451e:	4650      	mov	r0, sl
 8004520:	4798      	blx	r3
 8004522:	2800      	cmp	r0, #0
 8004524:	d0df      	beq.n	80044e6 <_scanf_i+0x11e>
 8004526:	6823      	ldr	r3, [r4, #0]
 8004528:	05d9      	lsls	r1, r3, #23
 800452a:	d50d      	bpl.n	8004548 <_scanf_i+0x180>
 800452c:	42bd      	cmp	r5, r7
 800452e:	d909      	bls.n	8004544 <_scanf_i+0x17c>
 8004530:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8004534:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004538:	4632      	mov	r2, r6
 800453a:	4650      	mov	r0, sl
 800453c:	4798      	blx	r3
 800453e:	f105 39ff 	add.w	r9, r5, #4294967295
 8004542:	464d      	mov	r5, r9
 8004544:	42bd      	cmp	r5, r7
 8004546:	d028      	beq.n	800459a <_scanf_i+0x1d2>
 8004548:	6822      	ldr	r2, [r4, #0]
 800454a:	f012 0210 	ands.w	r2, r2, #16
 800454e:	d113      	bne.n	8004578 <_scanf_i+0x1b0>
 8004550:	702a      	strb	r2, [r5, #0]
 8004552:	6863      	ldr	r3, [r4, #4]
 8004554:	9e01      	ldr	r6, [sp, #4]
 8004556:	4639      	mov	r1, r7
 8004558:	4650      	mov	r0, sl
 800455a:	47b0      	blx	r6
 800455c:	f8d8 3000 	ldr.w	r3, [r8]
 8004560:	6821      	ldr	r1, [r4, #0]
 8004562:	1d1a      	adds	r2, r3, #4
 8004564:	f8c8 2000 	str.w	r2, [r8]
 8004568:	f011 0f20 	tst.w	r1, #32
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	d00f      	beq.n	8004590 <_scanf_i+0x1c8>
 8004570:	6018      	str	r0, [r3, #0]
 8004572:	68e3      	ldr	r3, [r4, #12]
 8004574:	3301      	adds	r3, #1
 8004576:	60e3      	str	r3, [r4, #12]
 8004578:	1bed      	subs	r5, r5, r7
 800457a:	44ab      	add	fp, r5
 800457c:	6925      	ldr	r5, [r4, #16]
 800457e:	445d      	add	r5, fp
 8004580:	6125      	str	r5, [r4, #16]
 8004582:	2000      	movs	r0, #0
 8004584:	b007      	add	sp, #28
 8004586:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800458a:	f04f 0b00 	mov.w	fp, #0
 800458e:	e7ca      	b.n	8004526 <_scanf_i+0x15e>
 8004590:	07ca      	lsls	r2, r1, #31
 8004592:	bf4c      	ite	mi
 8004594:	8018      	strhmi	r0, [r3, #0]
 8004596:	6018      	strpl	r0, [r3, #0]
 8004598:	e7eb      	b.n	8004572 <_scanf_i+0x1aa>
 800459a:	2001      	movs	r0, #1
 800459c:	e7f2      	b.n	8004584 <_scanf_i+0x1bc>
 800459e:	bf00      	nop
 80045a0:	08004bc8 	.word	0x08004bc8
 80045a4:	08004829 	.word	0x08004829
 80045a8:	0800472d 	.word	0x0800472d
 80045ac:	08004c09 	.word	0x08004c09

080045b0 <__sccl>:
 80045b0:	b570      	push	{r4, r5, r6, lr}
 80045b2:	780b      	ldrb	r3, [r1, #0]
 80045b4:	4604      	mov	r4, r0
 80045b6:	2b5e      	cmp	r3, #94	; 0x5e
 80045b8:	bf0b      	itete	eq
 80045ba:	784b      	ldrbeq	r3, [r1, #1]
 80045bc:	1c48      	addne	r0, r1, #1
 80045be:	1c88      	addeq	r0, r1, #2
 80045c0:	2200      	movne	r2, #0
 80045c2:	bf08      	it	eq
 80045c4:	2201      	moveq	r2, #1
 80045c6:	1e61      	subs	r1, r4, #1
 80045c8:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 80045cc:	f801 2f01 	strb.w	r2, [r1, #1]!
 80045d0:	42a9      	cmp	r1, r5
 80045d2:	d1fb      	bne.n	80045cc <__sccl+0x1c>
 80045d4:	b90b      	cbnz	r3, 80045da <__sccl+0x2a>
 80045d6:	3801      	subs	r0, #1
 80045d8:	bd70      	pop	{r4, r5, r6, pc}
 80045da:	f082 0101 	eor.w	r1, r2, #1
 80045de:	54e1      	strb	r1, [r4, r3]
 80045e0:	1c42      	adds	r2, r0, #1
 80045e2:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 80045e6:	2d2d      	cmp	r5, #45	; 0x2d
 80045e8:	f102 36ff 	add.w	r6, r2, #4294967295
 80045ec:	4610      	mov	r0, r2
 80045ee:	d006      	beq.n	80045fe <__sccl+0x4e>
 80045f0:	2d5d      	cmp	r5, #93	; 0x5d
 80045f2:	d0f1      	beq.n	80045d8 <__sccl+0x28>
 80045f4:	b90d      	cbnz	r5, 80045fa <__sccl+0x4a>
 80045f6:	4630      	mov	r0, r6
 80045f8:	e7ee      	b.n	80045d8 <__sccl+0x28>
 80045fa:	462b      	mov	r3, r5
 80045fc:	e7ef      	b.n	80045de <__sccl+0x2e>
 80045fe:	7816      	ldrb	r6, [r2, #0]
 8004600:	2e5d      	cmp	r6, #93	; 0x5d
 8004602:	d0fa      	beq.n	80045fa <__sccl+0x4a>
 8004604:	42b3      	cmp	r3, r6
 8004606:	dcf8      	bgt.n	80045fa <__sccl+0x4a>
 8004608:	4618      	mov	r0, r3
 800460a:	3001      	adds	r0, #1
 800460c:	4286      	cmp	r6, r0
 800460e:	5421      	strb	r1, [r4, r0]
 8004610:	dcfb      	bgt.n	800460a <__sccl+0x5a>
 8004612:	43d8      	mvns	r0, r3
 8004614:	4430      	add	r0, r6
 8004616:	1c5d      	adds	r5, r3, #1
 8004618:	42b3      	cmp	r3, r6
 800461a:	bfa8      	it	ge
 800461c:	2000      	movge	r0, #0
 800461e:	182b      	adds	r3, r5, r0
 8004620:	3202      	adds	r2, #2
 8004622:	e7de      	b.n	80045e2 <__sccl+0x32>

08004624 <_strtol_l.isra.0>:
 8004624:	2b01      	cmp	r3, #1
 8004626:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800462a:	d001      	beq.n	8004630 <_strtol_l.isra.0+0xc>
 800462c:	2b24      	cmp	r3, #36	; 0x24
 800462e:	d906      	bls.n	800463e <_strtol_l.isra.0+0x1a>
 8004630:	f7ff fc1a 	bl	8003e68 <__errno>
 8004634:	2316      	movs	r3, #22
 8004636:	6003      	str	r3, [r0, #0]
 8004638:	2000      	movs	r0, #0
 800463a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800463e:	4f3a      	ldr	r7, [pc, #232]	; (8004728 <_strtol_l.isra.0+0x104>)
 8004640:	468e      	mov	lr, r1
 8004642:	4676      	mov	r6, lr
 8004644:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8004648:	5de5      	ldrb	r5, [r4, r7]
 800464a:	f015 0508 	ands.w	r5, r5, #8
 800464e:	d1f8      	bne.n	8004642 <_strtol_l.isra.0+0x1e>
 8004650:	2c2d      	cmp	r4, #45	; 0x2d
 8004652:	d134      	bne.n	80046be <_strtol_l.isra.0+0x9a>
 8004654:	f89e 4000 	ldrb.w	r4, [lr]
 8004658:	f04f 0801 	mov.w	r8, #1
 800465c:	f106 0e02 	add.w	lr, r6, #2
 8004660:	2b00      	cmp	r3, #0
 8004662:	d05c      	beq.n	800471e <_strtol_l.isra.0+0xfa>
 8004664:	2b10      	cmp	r3, #16
 8004666:	d10c      	bne.n	8004682 <_strtol_l.isra.0+0x5e>
 8004668:	2c30      	cmp	r4, #48	; 0x30
 800466a:	d10a      	bne.n	8004682 <_strtol_l.isra.0+0x5e>
 800466c:	f89e 4000 	ldrb.w	r4, [lr]
 8004670:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8004674:	2c58      	cmp	r4, #88	; 0x58
 8004676:	d14d      	bne.n	8004714 <_strtol_l.isra.0+0xf0>
 8004678:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800467c:	2310      	movs	r3, #16
 800467e:	f10e 0e02 	add.w	lr, lr, #2
 8004682:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8004686:	f10c 3cff 	add.w	ip, ip, #4294967295
 800468a:	2600      	movs	r6, #0
 800468c:	fbbc f9f3 	udiv	r9, ip, r3
 8004690:	4635      	mov	r5, r6
 8004692:	fb03 ca19 	mls	sl, r3, r9, ip
 8004696:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800469a:	2f09      	cmp	r7, #9
 800469c:	d818      	bhi.n	80046d0 <_strtol_l.isra.0+0xac>
 800469e:	463c      	mov	r4, r7
 80046a0:	42a3      	cmp	r3, r4
 80046a2:	dd24      	ble.n	80046ee <_strtol_l.isra.0+0xca>
 80046a4:	2e00      	cmp	r6, #0
 80046a6:	db1f      	blt.n	80046e8 <_strtol_l.isra.0+0xc4>
 80046a8:	45a9      	cmp	r9, r5
 80046aa:	d31d      	bcc.n	80046e8 <_strtol_l.isra.0+0xc4>
 80046ac:	d101      	bne.n	80046b2 <_strtol_l.isra.0+0x8e>
 80046ae:	45a2      	cmp	sl, r4
 80046b0:	db1a      	blt.n	80046e8 <_strtol_l.isra.0+0xc4>
 80046b2:	fb05 4503 	mla	r5, r5, r3, r4
 80046b6:	2601      	movs	r6, #1
 80046b8:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80046bc:	e7eb      	b.n	8004696 <_strtol_l.isra.0+0x72>
 80046be:	2c2b      	cmp	r4, #43	; 0x2b
 80046c0:	bf08      	it	eq
 80046c2:	f89e 4000 	ldrbeq.w	r4, [lr]
 80046c6:	46a8      	mov	r8, r5
 80046c8:	bf08      	it	eq
 80046ca:	f106 0e02 	addeq.w	lr, r6, #2
 80046ce:	e7c7      	b.n	8004660 <_strtol_l.isra.0+0x3c>
 80046d0:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80046d4:	2f19      	cmp	r7, #25
 80046d6:	d801      	bhi.n	80046dc <_strtol_l.isra.0+0xb8>
 80046d8:	3c37      	subs	r4, #55	; 0x37
 80046da:	e7e1      	b.n	80046a0 <_strtol_l.isra.0+0x7c>
 80046dc:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80046e0:	2f19      	cmp	r7, #25
 80046e2:	d804      	bhi.n	80046ee <_strtol_l.isra.0+0xca>
 80046e4:	3c57      	subs	r4, #87	; 0x57
 80046e6:	e7db      	b.n	80046a0 <_strtol_l.isra.0+0x7c>
 80046e8:	f04f 36ff 	mov.w	r6, #4294967295
 80046ec:	e7e4      	b.n	80046b8 <_strtol_l.isra.0+0x94>
 80046ee:	2e00      	cmp	r6, #0
 80046f0:	da05      	bge.n	80046fe <_strtol_l.isra.0+0xda>
 80046f2:	2322      	movs	r3, #34	; 0x22
 80046f4:	6003      	str	r3, [r0, #0]
 80046f6:	4665      	mov	r5, ip
 80046f8:	b942      	cbnz	r2, 800470c <_strtol_l.isra.0+0xe8>
 80046fa:	4628      	mov	r0, r5
 80046fc:	e79d      	b.n	800463a <_strtol_l.isra.0+0x16>
 80046fe:	f1b8 0f00 	cmp.w	r8, #0
 8004702:	d000      	beq.n	8004706 <_strtol_l.isra.0+0xe2>
 8004704:	426d      	negs	r5, r5
 8004706:	2a00      	cmp	r2, #0
 8004708:	d0f7      	beq.n	80046fa <_strtol_l.isra.0+0xd6>
 800470a:	b10e      	cbz	r6, 8004710 <_strtol_l.isra.0+0xec>
 800470c:	f10e 31ff 	add.w	r1, lr, #4294967295
 8004710:	6011      	str	r1, [r2, #0]
 8004712:	e7f2      	b.n	80046fa <_strtol_l.isra.0+0xd6>
 8004714:	2430      	movs	r4, #48	; 0x30
 8004716:	2b00      	cmp	r3, #0
 8004718:	d1b3      	bne.n	8004682 <_strtol_l.isra.0+0x5e>
 800471a:	2308      	movs	r3, #8
 800471c:	e7b1      	b.n	8004682 <_strtol_l.isra.0+0x5e>
 800471e:	2c30      	cmp	r4, #48	; 0x30
 8004720:	d0a4      	beq.n	800466c <_strtol_l.isra.0+0x48>
 8004722:	230a      	movs	r3, #10
 8004724:	e7ad      	b.n	8004682 <_strtol_l.isra.0+0x5e>
 8004726:	bf00      	nop
 8004728:	08004c0c 	.word	0x08004c0c

0800472c <_strtol_r>:
 800472c:	f7ff bf7a 	b.w	8004624 <_strtol_l.isra.0>

08004730 <_strtoul_l.isra.0>:
 8004730:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004734:	4e3b      	ldr	r6, [pc, #236]	; (8004824 <_strtoul_l.isra.0+0xf4>)
 8004736:	4686      	mov	lr, r0
 8004738:	468c      	mov	ip, r1
 800473a:	4660      	mov	r0, ip
 800473c:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8004740:	5da5      	ldrb	r5, [r4, r6]
 8004742:	f015 0508 	ands.w	r5, r5, #8
 8004746:	d1f8      	bne.n	800473a <_strtoul_l.isra.0+0xa>
 8004748:	2c2d      	cmp	r4, #45	; 0x2d
 800474a:	d134      	bne.n	80047b6 <_strtoul_l.isra.0+0x86>
 800474c:	f89c 4000 	ldrb.w	r4, [ip]
 8004750:	f04f 0801 	mov.w	r8, #1
 8004754:	f100 0c02 	add.w	ip, r0, #2
 8004758:	2b00      	cmp	r3, #0
 800475a:	d05e      	beq.n	800481a <_strtoul_l.isra.0+0xea>
 800475c:	2b10      	cmp	r3, #16
 800475e:	d10c      	bne.n	800477a <_strtoul_l.isra.0+0x4a>
 8004760:	2c30      	cmp	r4, #48	; 0x30
 8004762:	d10a      	bne.n	800477a <_strtoul_l.isra.0+0x4a>
 8004764:	f89c 0000 	ldrb.w	r0, [ip]
 8004768:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800476c:	2858      	cmp	r0, #88	; 0x58
 800476e:	d14f      	bne.n	8004810 <_strtoul_l.isra.0+0xe0>
 8004770:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8004774:	2310      	movs	r3, #16
 8004776:	f10c 0c02 	add.w	ip, ip, #2
 800477a:	f04f 37ff 	mov.w	r7, #4294967295
 800477e:	2500      	movs	r5, #0
 8004780:	fbb7 f7f3 	udiv	r7, r7, r3
 8004784:	fb03 f907 	mul.w	r9, r3, r7
 8004788:	ea6f 0909 	mvn.w	r9, r9
 800478c:	4628      	mov	r0, r5
 800478e:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8004792:	2e09      	cmp	r6, #9
 8004794:	d818      	bhi.n	80047c8 <_strtoul_l.isra.0+0x98>
 8004796:	4634      	mov	r4, r6
 8004798:	42a3      	cmp	r3, r4
 800479a:	dd24      	ble.n	80047e6 <_strtoul_l.isra.0+0xb6>
 800479c:	2d00      	cmp	r5, #0
 800479e:	db1f      	blt.n	80047e0 <_strtoul_l.isra.0+0xb0>
 80047a0:	4287      	cmp	r7, r0
 80047a2:	d31d      	bcc.n	80047e0 <_strtoul_l.isra.0+0xb0>
 80047a4:	d101      	bne.n	80047aa <_strtoul_l.isra.0+0x7a>
 80047a6:	45a1      	cmp	r9, r4
 80047a8:	db1a      	blt.n	80047e0 <_strtoul_l.isra.0+0xb0>
 80047aa:	fb00 4003 	mla	r0, r0, r3, r4
 80047ae:	2501      	movs	r5, #1
 80047b0:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80047b4:	e7eb      	b.n	800478e <_strtoul_l.isra.0+0x5e>
 80047b6:	2c2b      	cmp	r4, #43	; 0x2b
 80047b8:	bf08      	it	eq
 80047ba:	f89c 4000 	ldrbeq.w	r4, [ip]
 80047be:	46a8      	mov	r8, r5
 80047c0:	bf08      	it	eq
 80047c2:	f100 0c02 	addeq.w	ip, r0, #2
 80047c6:	e7c7      	b.n	8004758 <_strtoul_l.isra.0+0x28>
 80047c8:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 80047cc:	2e19      	cmp	r6, #25
 80047ce:	d801      	bhi.n	80047d4 <_strtoul_l.isra.0+0xa4>
 80047d0:	3c37      	subs	r4, #55	; 0x37
 80047d2:	e7e1      	b.n	8004798 <_strtoul_l.isra.0+0x68>
 80047d4:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 80047d8:	2e19      	cmp	r6, #25
 80047da:	d804      	bhi.n	80047e6 <_strtoul_l.isra.0+0xb6>
 80047dc:	3c57      	subs	r4, #87	; 0x57
 80047de:	e7db      	b.n	8004798 <_strtoul_l.isra.0+0x68>
 80047e0:	f04f 35ff 	mov.w	r5, #4294967295
 80047e4:	e7e4      	b.n	80047b0 <_strtoul_l.isra.0+0x80>
 80047e6:	2d00      	cmp	r5, #0
 80047e8:	da07      	bge.n	80047fa <_strtoul_l.isra.0+0xca>
 80047ea:	2322      	movs	r3, #34	; 0x22
 80047ec:	f8ce 3000 	str.w	r3, [lr]
 80047f0:	f04f 30ff 	mov.w	r0, #4294967295
 80047f4:	b942      	cbnz	r2, 8004808 <_strtoul_l.isra.0+0xd8>
 80047f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80047fa:	f1b8 0f00 	cmp.w	r8, #0
 80047fe:	d000      	beq.n	8004802 <_strtoul_l.isra.0+0xd2>
 8004800:	4240      	negs	r0, r0
 8004802:	2a00      	cmp	r2, #0
 8004804:	d0f7      	beq.n	80047f6 <_strtoul_l.isra.0+0xc6>
 8004806:	b10d      	cbz	r5, 800480c <_strtoul_l.isra.0+0xdc>
 8004808:	f10c 31ff 	add.w	r1, ip, #4294967295
 800480c:	6011      	str	r1, [r2, #0]
 800480e:	e7f2      	b.n	80047f6 <_strtoul_l.isra.0+0xc6>
 8004810:	2430      	movs	r4, #48	; 0x30
 8004812:	2b00      	cmp	r3, #0
 8004814:	d1b1      	bne.n	800477a <_strtoul_l.isra.0+0x4a>
 8004816:	2308      	movs	r3, #8
 8004818:	e7af      	b.n	800477a <_strtoul_l.isra.0+0x4a>
 800481a:	2c30      	cmp	r4, #48	; 0x30
 800481c:	d0a2      	beq.n	8004764 <_strtoul_l.isra.0+0x34>
 800481e:	230a      	movs	r3, #10
 8004820:	e7ab      	b.n	800477a <_strtoul_l.isra.0+0x4a>
 8004822:	bf00      	nop
 8004824:	08004c0c 	.word	0x08004c0c

08004828 <_strtoul_r>:
 8004828:	f7ff bf82 	b.w	8004730 <_strtoul_l.isra.0>

0800482c <__submore>:
 800482c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004830:	460c      	mov	r4, r1
 8004832:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8004834:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004838:	4299      	cmp	r1, r3
 800483a:	d11d      	bne.n	8004878 <__submore+0x4c>
 800483c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004840:	f000 f88e 	bl	8004960 <_malloc_r>
 8004844:	b918      	cbnz	r0, 800484e <__submore+0x22>
 8004846:	f04f 30ff 	mov.w	r0, #4294967295
 800484a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800484e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004852:	63a3      	str	r3, [r4, #56]	; 0x38
 8004854:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8004858:	6360      	str	r0, [r4, #52]	; 0x34
 800485a:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800485e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8004862:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8004866:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800486a:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800486e:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8004872:	6020      	str	r0, [r4, #0]
 8004874:	2000      	movs	r0, #0
 8004876:	e7e8      	b.n	800484a <__submore+0x1e>
 8004878:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800487a:	0077      	lsls	r7, r6, #1
 800487c:	463a      	mov	r2, r7
 800487e:	f000 f8c9 	bl	8004a14 <_realloc_r>
 8004882:	4605      	mov	r5, r0
 8004884:	2800      	cmp	r0, #0
 8004886:	d0de      	beq.n	8004846 <__submore+0x1a>
 8004888:	eb00 0806 	add.w	r8, r0, r6
 800488c:	4601      	mov	r1, r0
 800488e:	4632      	mov	r2, r6
 8004890:	4640      	mov	r0, r8
 8004892:	f000 f807 	bl	80048a4 <memcpy>
 8004896:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800489a:	f8c4 8000 	str.w	r8, [r4]
 800489e:	e7e9      	b.n	8004874 <__submore+0x48>

080048a0 <__retarget_lock_acquire_recursive>:
 80048a0:	4770      	bx	lr

080048a2 <__retarget_lock_release_recursive>:
 80048a2:	4770      	bx	lr

080048a4 <memcpy>:
 80048a4:	440a      	add	r2, r1
 80048a6:	4291      	cmp	r1, r2
 80048a8:	f100 33ff 	add.w	r3, r0, #4294967295
 80048ac:	d100      	bne.n	80048b0 <memcpy+0xc>
 80048ae:	4770      	bx	lr
 80048b0:	b510      	push	{r4, lr}
 80048b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80048b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80048ba:	4291      	cmp	r1, r2
 80048bc:	d1f9      	bne.n	80048b2 <memcpy+0xe>
 80048be:	bd10      	pop	{r4, pc}

080048c0 <_free_r>:
 80048c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80048c2:	2900      	cmp	r1, #0
 80048c4:	d048      	beq.n	8004958 <_free_r+0x98>
 80048c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80048ca:	9001      	str	r0, [sp, #4]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	f1a1 0404 	sub.w	r4, r1, #4
 80048d2:	bfb8      	it	lt
 80048d4:	18e4      	addlt	r4, r4, r3
 80048d6:	f000 f8d3 	bl	8004a80 <__malloc_lock>
 80048da:	4a20      	ldr	r2, [pc, #128]	; (800495c <_free_r+0x9c>)
 80048dc:	9801      	ldr	r0, [sp, #4]
 80048de:	6813      	ldr	r3, [r2, #0]
 80048e0:	4615      	mov	r5, r2
 80048e2:	b933      	cbnz	r3, 80048f2 <_free_r+0x32>
 80048e4:	6063      	str	r3, [r4, #4]
 80048e6:	6014      	str	r4, [r2, #0]
 80048e8:	b003      	add	sp, #12
 80048ea:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80048ee:	f000 b8cd 	b.w	8004a8c <__malloc_unlock>
 80048f2:	42a3      	cmp	r3, r4
 80048f4:	d90b      	bls.n	800490e <_free_r+0x4e>
 80048f6:	6821      	ldr	r1, [r4, #0]
 80048f8:	1862      	adds	r2, r4, r1
 80048fa:	4293      	cmp	r3, r2
 80048fc:	bf04      	itt	eq
 80048fe:	681a      	ldreq	r2, [r3, #0]
 8004900:	685b      	ldreq	r3, [r3, #4]
 8004902:	6063      	str	r3, [r4, #4]
 8004904:	bf04      	itt	eq
 8004906:	1852      	addeq	r2, r2, r1
 8004908:	6022      	streq	r2, [r4, #0]
 800490a:	602c      	str	r4, [r5, #0]
 800490c:	e7ec      	b.n	80048e8 <_free_r+0x28>
 800490e:	461a      	mov	r2, r3
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	b10b      	cbz	r3, 8004918 <_free_r+0x58>
 8004914:	42a3      	cmp	r3, r4
 8004916:	d9fa      	bls.n	800490e <_free_r+0x4e>
 8004918:	6811      	ldr	r1, [r2, #0]
 800491a:	1855      	adds	r5, r2, r1
 800491c:	42a5      	cmp	r5, r4
 800491e:	d10b      	bne.n	8004938 <_free_r+0x78>
 8004920:	6824      	ldr	r4, [r4, #0]
 8004922:	4421      	add	r1, r4
 8004924:	1854      	adds	r4, r2, r1
 8004926:	42a3      	cmp	r3, r4
 8004928:	6011      	str	r1, [r2, #0]
 800492a:	d1dd      	bne.n	80048e8 <_free_r+0x28>
 800492c:	681c      	ldr	r4, [r3, #0]
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	6053      	str	r3, [r2, #4]
 8004932:	4421      	add	r1, r4
 8004934:	6011      	str	r1, [r2, #0]
 8004936:	e7d7      	b.n	80048e8 <_free_r+0x28>
 8004938:	d902      	bls.n	8004940 <_free_r+0x80>
 800493a:	230c      	movs	r3, #12
 800493c:	6003      	str	r3, [r0, #0]
 800493e:	e7d3      	b.n	80048e8 <_free_r+0x28>
 8004940:	6825      	ldr	r5, [r4, #0]
 8004942:	1961      	adds	r1, r4, r5
 8004944:	428b      	cmp	r3, r1
 8004946:	bf04      	itt	eq
 8004948:	6819      	ldreq	r1, [r3, #0]
 800494a:	685b      	ldreq	r3, [r3, #4]
 800494c:	6063      	str	r3, [r4, #4]
 800494e:	bf04      	itt	eq
 8004950:	1949      	addeq	r1, r1, r5
 8004952:	6021      	streq	r1, [r4, #0]
 8004954:	6054      	str	r4, [r2, #4]
 8004956:	e7c7      	b.n	80048e8 <_free_r+0x28>
 8004958:	b003      	add	sp, #12
 800495a:	bd30      	pop	{r4, r5, pc}
 800495c:	2000009c 	.word	0x2000009c

08004960 <_malloc_r>:
 8004960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004962:	1ccd      	adds	r5, r1, #3
 8004964:	f025 0503 	bic.w	r5, r5, #3
 8004968:	3508      	adds	r5, #8
 800496a:	2d0c      	cmp	r5, #12
 800496c:	bf38      	it	cc
 800496e:	250c      	movcc	r5, #12
 8004970:	2d00      	cmp	r5, #0
 8004972:	4606      	mov	r6, r0
 8004974:	db01      	blt.n	800497a <_malloc_r+0x1a>
 8004976:	42a9      	cmp	r1, r5
 8004978:	d903      	bls.n	8004982 <_malloc_r+0x22>
 800497a:	230c      	movs	r3, #12
 800497c:	6033      	str	r3, [r6, #0]
 800497e:	2000      	movs	r0, #0
 8004980:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004982:	f000 f87d 	bl	8004a80 <__malloc_lock>
 8004986:	4921      	ldr	r1, [pc, #132]	; (8004a0c <_malloc_r+0xac>)
 8004988:	680a      	ldr	r2, [r1, #0]
 800498a:	4614      	mov	r4, r2
 800498c:	b99c      	cbnz	r4, 80049b6 <_malloc_r+0x56>
 800498e:	4f20      	ldr	r7, [pc, #128]	; (8004a10 <_malloc_r+0xb0>)
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	b923      	cbnz	r3, 800499e <_malloc_r+0x3e>
 8004994:	4621      	mov	r1, r4
 8004996:	4630      	mov	r0, r6
 8004998:	f000 f862 	bl	8004a60 <_sbrk_r>
 800499c:	6038      	str	r0, [r7, #0]
 800499e:	4629      	mov	r1, r5
 80049a0:	4630      	mov	r0, r6
 80049a2:	f000 f85d 	bl	8004a60 <_sbrk_r>
 80049a6:	1c43      	adds	r3, r0, #1
 80049a8:	d123      	bne.n	80049f2 <_malloc_r+0x92>
 80049aa:	230c      	movs	r3, #12
 80049ac:	6033      	str	r3, [r6, #0]
 80049ae:	4630      	mov	r0, r6
 80049b0:	f000 f86c 	bl	8004a8c <__malloc_unlock>
 80049b4:	e7e3      	b.n	800497e <_malloc_r+0x1e>
 80049b6:	6823      	ldr	r3, [r4, #0]
 80049b8:	1b5b      	subs	r3, r3, r5
 80049ba:	d417      	bmi.n	80049ec <_malloc_r+0x8c>
 80049bc:	2b0b      	cmp	r3, #11
 80049be:	d903      	bls.n	80049c8 <_malloc_r+0x68>
 80049c0:	6023      	str	r3, [r4, #0]
 80049c2:	441c      	add	r4, r3
 80049c4:	6025      	str	r5, [r4, #0]
 80049c6:	e004      	b.n	80049d2 <_malloc_r+0x72>
 80049c8:	6863      	ldr	r3, [r4, #4]
 80049ca:	42a2      	cmp	r2, r4
 80049cc:	bf0c      	ite	eq
 80049ce:	600b      	streq	r3, [r1, #0]
 80049d0:	6053      	strne	r3, [r2, #4]
 80049d2:	4630      	mov	r0, r6
 80049d4:	f000 f85a 	bl	8004a8c <__malloc_unlock>
 80049d8:	f104 000b 	add.w	r0, r4, #11
 80049dc:	1d23      	adds	r3, r4, #4
 80049de:	f020 0007 	bic.w	r0, r0, #7
 80049e2:	1ac2      	subs	r2, r0, r3
 80049e4:	d0cc      	beq.n	8004980 <_malloc_r+0x20>
 80049e6:	1a1b      	subs	r3, r3, r0
 80049e8:	50a3      	str	r3, [r4, r2]
 80049ea:	e7c9      	b.n	8004980 <_malloc_r+0x20>
 80049ec:	4622      	mov	r2, r4
 80049ee:	6864      	ldr	r4, [r4, #4]
 80049f0:	e7cc      	b.n	800498c <_malloc_r+0x2c>
 80049f2:	1cc4      	adds	r4, r0, #3
 80049f4:	f024 0403 	bic.w	r4, r4, #3
 80049f8:	42a0      	cmp	r0, r4
 80049fa:	d0e3      	beq.n	80049c4 <_malloc_r+0x64>
 80049fc:	1a21      	subs	r1, r4, r0
 80049fe:	4630      	mov	r0, r6
 8004a00:	f000 f82e 	bl	8004a60 <_sbrk_r>
 8004a04:	3001      	adds	r0, #1
 8004a06:	d1dd      	bne.n	80049c4 <_malloc_r+0x64>
 8004a08:	e7cf      	b.n	80049aa <_malloc_r+0x4a>
 8004a0a:	bf00      	nop
 8004a0c:	2000009c 	.word	0x2000009c
 8004a10:	200000a0 	.word	0x200000a0

08004a14 <_realloc_r>:
 8004a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a16:	4607      	mov	r7, r0
 8004a18:	4614      	mov	r4, r2
 8004a1a:	460e      	mov	r6, r1
 8004a1c:	b921      	cbnz	r1, 8004a28 <_realloc_r+0x14>
 8004a1e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004a22:	4611      	mov	r1, r2
 8004a24:	f7ff bf9c 	b.w	8004960 <_malloc_r>
 8004a28:	b922      	cbnz	r2, 8004a34 <_realloc_r+0x20>
 8004a2a:	f7ff ff49 	bl	80048c0 <_free_r>
 8004a2e:	4625      	mov	r5, r4
 8004a30:	4628      	mov	r0, r5
 8004a32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a34:	f000 f830 	bl	8004a98 <_malloc_usable_size_r>
 8004a38:	42a0      	cmp	r0, r4
 8004a3a:	d20f      	bcs.n	8004a5c <_realloc_r+0x48>
 8004a3c:	4621      	mov	r1, r4
 8004a3e:	4638      	mov	r0, r7
 8004a40:	f7ff ff8e 	bl	8004960 <_malloc_r>
 8004a44:	4605      	mov	r5, r0
 8004a46:	2800      	cmp	r0, #0
 8004a48:	d0f2      	beq.n	8004a30 <_realloc_r+0x1c>
 8004a4a:	4631      	mov	r1, r6
 8004a4c:	4622      	mov	r2, r4
 8004a4e:	f7ff ff29 	bl	80048a4 <memcpy>
 8004a52:	4631      	mov	r1, r6
 8004a54:	4638      	mov	r0, r7
 8004a56:	f7ff ff33 	bl	80048c0 <_free_r>
 8004a5a:	e7e9      	b.n	8004a30 <_realloc_r+0x1c>
 8004a5c:	4635      	mov	r5, r6
 8004a5e:	e7e7      	b.n	8004a30 <_realloc_r+0x1c>

08004a60 <_sbrk_r>:
 8004a60:	b538      	push	{r3, r4, r5, lr}
 8004a62:	4d06      	ldr	r5, [pc, #24]	; (8004a7c <_sbrk_r+0x1c>)
 8004a64:	2300      	movs	r3, #0
 8004a66:	4604      	mov	r4, r0
 8004a68:	4608      	mov	r0, r1
 8004a6a:	602b      	str	r3, [r5, #0]
 8004a6c:	f7fb ffc0 	bl	80009f0 <_sbrk>
 8004a70:	1c43      	adds	r3, r0, #1
 8004a72:	d102      	bne.n	8004a7a <_sbrk_r+0x1a>
 8004a74:	682b      	ldr	r3, [r5, #0]
 8004a76:	b103      	cbz	r3, 8004a7a <_sbrk_r+0x1a>
 8004a78:	6023      	str	r3, [r4, #0]
 8004a7a:	bd38      	pop	{r3, r4, r5, pc}
 8004a7c:	2000022c 	.word	0x2000022c

08004a80 <__malloc_lock>:
 8004a80:	4801      	ldr	r0, [pc, #4]	; (8004a88 <__malloc_lock+0x8>)
 8004a82:	f7ff bf0d 	b.w	80048a0 <__retarget_lock_acquire_recursive>
 8004a86:	bf00      	nop
 8004a88:	20000234 	.word	0x20000234

08004a8c <__malloc_unlock>:
 8004a8c:	4801      	ldr	r0, [pc, #4]	; (8004a94 <__malloc_unlock+0x8>)
 8004a8e:	f7ff bf08 	b.w	80048a2 <__retarget_lock_release_recursive>
 8004a92:	bf00      	nop
 8004a94:	20000234 	.word	0x20000234

08004a98 <_malloc_usable_size_r>:
 8004a98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a9c:	1f18      	subs	r0, r3, #4
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	bfbc      	itt	lt
 8004aa2:	580b      	ldrlt	r3, [r1, r0]
 8004aa4:	18c0      	addlt	r0, r0, r3
 8004aa6:	4770      	bx	lr

08004aa8 <_init>:
 8004aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004aaa:	bf00      	nop
 8004aac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004aae:	bc08      	pop	{r3}
 8004ab0:	469e      	mov	lr, r3
 8004ab2:	4770      	bx	lr

08004ab4 <_fini>:
 8004ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ab6:	bf00      	nop
 8004ab8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004aba:	bc08      	pop	{r3}
 8004abc:	469e      	mov	lr, r3
 8004abe:	4770      	bx	lr
